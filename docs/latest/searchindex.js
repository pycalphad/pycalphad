Search.setIndex({"alltitles": {"0.1 (2015-04-09)": [[0, "id43"]], "0.1.1 (2015-04-09)": [[0, "id42"]], "0.1.1.post1 (2015-04-10)": [[0, "post1-2015-04-10"]], "0.10.0 (2022-02-21)": [[0, "id8"]], "0.10.1 (2022-05-25)": [[0, "id7"]], "0.10.2 (2023-02-14)": [[0, "id6"]], "0.10.3 (2023-09-13)": [[0, "id5"]], "0.10.4 (2024-01-29)": [[0, "id4"]], "0.10.5 (2024-07-12)": [[0, "id3"]], "0.11.0 (2024-08-09)": [[0, "id2"]], "0.11.1 (2025-10-22)": [[0, "id1"]], "0.2 (2015-08-23)": [[0, "id41"]], "0.2.1 (2015-09-10)": [[0, "id40"]], "0.2.2 (2015-10-17)": [[0, "id39"]], "0.2.3 (2015-11-08)": [[0, "id38"]], "0.2.4 (2015-11-18)": [[0, "id37"]], "0.2.5 (2015-12-22)": [[0, "id36"]], "0.3 (2016-02-17)": [[0, "id35"]], "0.3.1 (2016-02-18)": [[0, "id34"]], "0.3.2 (2016-02-22)": [[0, "id33"]], "0.3.3 (2016-04-21)": [[0, "id32"]], "0.3.4 (2016-04-28)": [[0, "id31"]], "0.3.5 (2016-05-14)": [[0, "id30"]], "0.3.6 (2016-06-01)": [[0, "id29"]], "0.4 (2016-08-03)": [[0, "id28"]], "0.4.1 (2016-08-08)": [[0, "id27"]], "0.4.2 (2016-08-26)": [[0, "id26"]], "0.5 (2017-05-04)": [[0, "id25"]], "0.5.1 (2017-05-12)": [[0, "id24"]], "0.5.2 (2017-08-10)": [[0, "id23"]], "0.6 (2017-11-26)": [[0, "id22"]], "0.6.1 (2017-12-01)": [[0, "id21"]], "0.7 (2018-03-19)": [[0, "id20"]], "0.7.1 (2018-11-14)": [[0, "id19"]], "0.8 (2019-05-31)": [[0, "id18"]], "0.8.1 (2019-11-28)": [[0, "id17"]], "0.8.2 (2020-03-07)": [[0, "id16"]], "0.8.3 (2020-03-31)": [[0, "id15"]], "0.8.4 (2020-10-28)": [[0, "id14"]], "0.8.5 (2021-05-20)": [[0, "id13"]], "0.9.0 (2021-06-06)": [[0, "id11"]], "0.9.1 (2021-08-08)": [[0, "id10"]], "0.9.2 (2021-08-12)": [[0, "id9"]], "API Documentation": [[2, null]], "Acknowledgements": [[28, "acknowledgements"]], "Activate your conda environment in Anaconda Prompt": [[29, "activate-your-conda-environment-in-anaconda-prompt"]], "Adding the ETA parameter to the TDB parser": [[25, "Adding-the-ETA-parameter-to-the-TDB-parser"]], "Advanced Examples": [[26, "advanced-examples"]], "Al-Fe (Heat Capacity and Degree of Ordering)": [[16, "Al-Fe-(Heat-Capacity-and-Degree-of-Ordering)"]], "Al-Fe (M. Seiersten, 1991)": [[13, "Al-Fe-(M.-Seiersten,-1991)"]], "Al-Mg (Y. Zhong, 2005)": [[13, "Al-Mg-(Y.-Zhong,-2005)"]], "Al-Ni (Degree of Ordering)": [[16, "Al-Ni-(Degree-of-Ordering)"]], "Al-Ni (Dupin, 2001)": [[13, "Al-Ni-(Dupin,-2001)"]], "Al-Zn (S. Mey, 1993)": [[13, "Al-Zn-(S.-Mey,-1993)"]], "Binary phase diagrams with mapping": [[19, "Binary-phase-diagrams-with-mapping"]], "Building a local version of the Pycalphad website": [[29, "building-a-local-version-of-the-pycalphad-website"]], "Calculate T0 (t-zero) as a function of composition": [[20, "Calculate-T0-(t-zero)-as-a-function-of-composition"]], "Calculate and Plot Activity": [[21, null]], "Calculate the equilibria": [[21, "Calculate-the-equilibria"]], "Calculate the reference state": [[21, "Calculate-the-reference-state"]], "Calculating Energy Surfaces [Legacy Method]": [[17, null]], "Calculations at specific site fractions": [[18, "Calculations-at-specific-site-fractions"]], "Calculations with Reference States": [[22, null]], "Citing": [[28, "citing"]], "Constants": [[8, "constants"]], "Create a release of pycalphad": [[30, "create-a-release-of-pycalphad"]], "Custom Models in pycalphad: Viscosity": [[25, null]], "Dataset structure": [[24, "Dataset-structure"]], "Deploy to PyPI (manually)": [[30, "deploy-to-pypi-manually"]], "Deploy to conda-forge": [[30, "deploy-to-conda-forge"]], "Derived Classes": [[8, "derived-classes"]], "Developer": [[28, null]], "Development version": [[1, "development-version"]], "Driving force calculation": [[20, "Driving-force-calculation"]], "Enthalpy of formation - convex hull": [[22, "Enthalpy-of-formation---convex-hull"]], "Enthalpy of mixing": [[22, "Enthalpy-of-mixing"]], "Equilibrium Properties and Partial Ordering (Al-Fe and Al-Ni)": [[16, null]], "Examples": [[26, null]], "Experimental Reference States: Formation and Mixing Energy": [[22, "Experimental-Reference-States:-Formation-and-Mixing-Energy"]], "Experimental activity results": [[21, "Experimental-activity-results"]], "Exploring calculate and equilibrium xarray Datasets": [[24, null]], "FAQ": [[27, null]], "Get the chemical potentials and calculate activity": [[21, "Get-the-chemical-potentials-and-calculate-activity"]], "Getting Help": [[28, "getting-help"]], "Heat Capacity of Cementite (Fe_3C)": [[14, null]], "How long should equilibrium calculations take?": [[27, "how-long-should-equilibrium-calculations-take"]], "How to create your conda environment": [[29, "how-to-create-your-conda-environment"]], "How to recompile Pycalphad": [[29, "how-to-recompile-pycalphad"]], "Indices and tables": [[28, "indices-and-tables"]], "Install pycalphad": [[1, null]], "Installing": [[1, "installing"]], "Is any parallelism supported in pycalphad?": [[27, "is-any-parallelism-supported-in-pycalphad"]], "Isopleth plotting": [[19, "Isopleth-plotting"]], "Logo pycalphad: Computational Thermodynamics": [[28, null]], "Module contents": [[3, "module-pycalphad"], [4, "module-pycalphad.codegen"], [5, "module-pycalphad.core"], [6, "module-pycalphad.io"], [7, "module-pycalphad.mapping"], [8, "module-pycalphad.mapping.strategy"], [9, "module-pycalphad.models"], [10, "module-pycalphad.plot"], [11, "module-pycalphad.plot.binary"], [12, "module-pycalphad.property_framework"]], "Molar Ratios and Linear Combination Conditions": [[23, "Molar-Ratios-and-Linear-Combination-Conditions"]], "Nb-Re (Liu, 2013)": [[13, "Nb-Re-(Liu,-2013)"]], "Onboarding as a Developer": [[29, null]], "Performing Calculations": [[25, "Performing-Calculations"]], "Phases with Electrically Charged Species": [[15, null]], "Plot energy curves for several phases": [[20, null]], "Plot the result": [[21, "Plot-the-result"]], "Plots": [[16, "Plots"], [16, "id1"]], "Plotting Isobaric Binary Phase Diagrams with binplot": [[13, null]], "Plotting Ternary Phase Diagrams and Using Triangular Axes": [[23, null]], "Plotting using the Mapping API": [[19, null]], "Potential errors and their solutions": [[29, "potential-errors-and-their-solutions"]], "RecursionError during a calculation": [[27, "recursionerror-during-a-calculation"]], "Releasing pycalphad": [[30, null]], "Set up the database": [[21, "Set-up-the-database"]], "Setting up your fork and remote repositories": [[29, "setting-up-your-fork-and-remote-repositories"]], "Setting your VSCode environment": [[29, "setting-your-vscode-environment"]], "Special _MIX Reference State": [[18, null]], "Step plotting": [[19, "Step-plotting"]], "Submodules": [[3, "submodules"], [4, "submodules"], [5, "submodules"], [6, "submodules"], [7, "submodules"], [8, "submodules"], [9, "submodules"], [10, "submodules"], [11, "submodules"], [12, "submodules"]], "Subpackages": [[3, "subpackages"], [7, "subpackages"], [10, "subpackages"]], "TDB Parameters": [[25, "TDB-Parameters"]], "TDB files": [[13, "TDB-files"]], "Text is sometimes cut off when saving figures": [[27, "text-is-sometimes-cut-off-when-saving-figures"]], "Triangular projection plots": [[17, "Triangular-projection-plots"]], "TypeError: argument is not an mpz during a calculation": [[27, "typeerror-argument-is-not-an-mpz-during-a-calculation"]], "Upgrading": [[1, "upgrading"]], "Viscosity Model Background": [[25, "Viscosity-Model-Background"]], "What units does pycalphad use?": [[27, "what-units-does-pycalphad-use"]], "What\u2019s New": [[0, null]], "Workplace setup & software tutorials": [[29, "workplace-setup-software-tutorials"]], "Writing the Custom Viscosity Model": [[25, "Writing-the-Custom-Viscosity-Model"]], "binplot": [[13, "binplot"]], "calculate() results": [[24, "calculate()-results"]], "conda": [[1, "conda"]], "equilibrium() results": [[24, "equilibrium()-results"]], "pip (recommended)": [[1, "pip-recommended"]], "pycalphad package": [[3, null]], "pycalphad.codegen package": [[4, null]], "pycalphad.codegen.phase_record_factory module": [[4, "module-pycalphad.codegen.phase_record_factory"]], "pycalphad.codegen.sympydiff_utils module": [[4, "module-pycalphad.codegen.sympydiff_utils"]], "pycalphad.core package": [[5, null]], "pycalphad.core.cache module": [[5, "module-pycalphad.core.cache"]], "pycalphad.core.calculate module": [[5, "module-pycalphad.core.calculate"]], "pycalphad.core.composition_set module": [[5, "module-pycalphad.core.composition_set"]], "pycalphad.core.conditions module": [[5, "module-pycalphad.core.conditions"]], "pycalphad.core.constants module": [[5, "module-pycalphad.core.constants"]], "pycalphad.core.constraints module": [[5, "module-pycalphad.core.constraints"]], "pycalphad.core.eqsolver module": [[5, "module-pycalphad.core.eqsolver"]], "pycalphad.core.equilibrium module": [[5, "module-pycalphad.core.equilibrium"]], "pycalphad.core.errors module": [[5, "module-pycalphad.core.errors"]], "pycalphad.core.halton module": [[5, "module-pycalphad.core.halton"]], "pycalphad.core.hyperplane module": [[5, "module-pycalphad.core.hyperplane"]], "pycalphad.core.light_dataset module": [[5, "module-pycalphad.core.light_dataset"]], "pycalphad.core.lower_convex_hull module": [[5, "module-pycalphad.core.lower_convex_hull"]], "pycalphad.core.minimizer module": [[5, "module-pycalphad.core.minimizer"]], "pycalphad.core.phase_rec module": [[5, "module-pycalphad.core.phase_rec"]], "pycalphad.core.polytope module": [[5, "module-pycalphad.core.polytope"]], "pycalphad.core.solver module": [[5, "module-pycalphad.core.solver"]], "pycalphad.core.starting_point module": [[5, "module-pycalphad.core.starting_point"]], "pycalphad.core.utils module": [[5, "module-pycalphad.core.utils"]], "pycalphad.core.workspace module": [[5, "module-pycalphad.core.workspace"]], "pycalphad.io package": [[6, null]], "pycalphad.io.cs_dat module": [[6, "module-pycalphad.io.cs_dat"]], "pycalphad.io.database module": [[6, "module-pycalphad.io.database"]], "pycalphad.io.grammar module": [[6, "module-pycalphad.io.grammar"]], "pycalphad.io.tdb module": [[6, "module-pycalphad.io.tdb"]], "pycalphad.io.tdb_keywords module": [[6, "module-pycalphad.io.tdb_keywords"]], "pycalphad.mapping package": [[7, null]], "pycalphad.mapping.compat_api module": [[7, "module-pycalphad.mapping.compat_api"]], "pycalphad.mapping.plotting module": [[7, "module-pycalphad.mapping.plotting"]], "pycalphad.mapping.primitives module": [[7, "module-pycalphad.mapping.primitives"]], "pycalphad.mapping.starting_points module": [[7, "module-pycalphad.mapping.starting_points"]], "pycalphad.mapping.strategy package": [[8, null]], "pycalphad.mapping.strategy.binary_strategy module": [[8, "module-pycalphad.mapping.strategy.binary_strategy"]], "pycalphad.mapping.strategy.isopleth_strategy module": [[8, "module-pycalphad.mapping.strategy.isopleth_strategy"]], "pycalphad.mapping.strategy.step_strategy module": [[8, "module-pycalphad.mapping.strategy.step_strategy"]], "pycalphad.mapping.strategy.strategy_base module": [[8, "module-pycalphad.mapping.strategy.strategy_base"]], "pycalphad.mapping.strategy.strategy_data module": [[8, "module-pycalphad.mapping.strategy.strategy_data"]], "pycalphad.mapping.strategy.ternary_strategy module": [[8, "module-pycalphad.mapping.strategy.ternary_strategy"]], "pycalphad.mapping.utils module": [[7, "module-pycalphad.mapping.utils"]], "pycalphad.mapping.zpf_checks module": [[7, "module-pycalphad.mapping.zpf_checks"]], "pycalphad.mapping.zpf_equilibrium module": [[7, "module-pycalphad.mapping.zpf_equilibrium"]], "pycalphad.model module": [[3, "module-pycalphad.model"]], "pycalphad.models package": [[9, null]], "pycalphad.models.model_mqmqa module": [[9, "module-pycalphad.models.model_mqmqa"]], "pycalphad.plot package": [[10, null]], "pycalphad.plot.binary package": [[11, null]], "pycalphad.plot.binary.compsets module": [[11, "module-pycalphad.plot.binary.compsets"]], "pycalphad.plot.binary.map module": [[11, "module-pycalphad.plot.binary.map"]], "pycalphad.plot.binary.plot module": [[11, "module-pycalphad.plot.binary.plot"]], "pycalphad.plot.binary.zpf_boundary_sets module": [[11, "module-pycalphad.plot.binary.zpf_boundary_sets"]], "pycalphad.plot.eqplot module": [[10, "module-pycalphad.plot.eqplot"]], "pycalphad.plot.ternary module": [[10, "module-pycalphad.plot.ternary"]], "pycalphad.plot.triangular module": [[10, "module-pycalphad.plot.triangular"]], "pycalphad.plot.utils module": [[10, "module-pycalphad.plot.utils"]], "pycalphad.property_framework package": [[12, null]], "pycalphad.property_framework.computed_property module": [[12, "module-pycalphad.property_framework.computed_property"]], "pycalphad.property_framework.metaproperties module": [[12, "module-pycalphad.property_framework.metaproperties"]], "pycalphad.property_framework.types module": [[12, "module-pycalphad.property_framework.types"]], "pycalphad.property_framework.tzero module": [[12, "module-pycalphad.property_framework.tzero"]], "pycalphad.property_framework.units module": [[12, "module-pycalphad.property_framework.units"]], "pycalphad.variables module": [[3, "module-pycalphad.variables"]], "ternplot": [[23, "ternplot"]], "xarray Datasets": [[24, "xarray-Datasets"]]}, "docnames": ["CHANGES", "INSTALLING", "api/modules", "api/pycalphad", "api/pycalphad.codegen", "api/pycalphad.core", "api/pycalphad.io", "api/pycalphad.mapping", "api/pycalphad.mapping.strategy", "api/pycalphad.models", "api/pycalphad.plot", "api/pycalphad.plot.binary", "api/pycalphad.property_framework", "examples/BinaryExamples", "examples/CementiteAnalysis", "examples/ChargedPhases", "examples/EquilibriumWithOrdering", "examples/LegacyEnergySurface", "examples/LegacyReferenceState", "examples/Mapping", "examples/Metastability", "examples/PlotActivity", "examples/ReferenceStateExamples", "examples/TernaryExamples", "examples/UsingCalculationResults", "examples/ViscosityModel", "examples/index", "faq", "index", "onboarding", "releasing"], "envversion": {"nbsphinx": 4, "sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1}, "filenames": ["CHANGES.rst", "INSTALLING.rst", "api/modules.rst", "api/pycalphad.rst", "api/pycalphad.codegen.rst", "api/pycalphad.core.rst", "api/pycalphad.io.rst", "api/pycalphad.mapping.rst", "api/pycalphad.mapping.strategy.rst", "api/pycalphad.models.rst", "api/pycalphad.plot.rst", "api/pycalphad.plot.binary.rst", "api/pycalphad.property_framework.rst", "examples/BinaryExamples.nblink", "examples/CementiteAnalysis.nblink", "examples/ChargedPhases.nblink", "examples/EquilibriumWithOrdering.nblink", "examples/LegacyEnergySurface.nblink", "examples/LegacyReferenceState.nblink", "examples/Mapping.nblink", "examples/Metastability.nblink", "examples/PlotActivity.nblink", "examples/ReferenceStateExamples.nblink", "examples/TernaryExamples.nblink", "examples/UsingCalculationResults.nblink", "examples/ViscosityModel.nblink", "examples/index.rst", "faq.rst", "index.rst", "onboarding.rst", "releasing.rst"], "indexentries": {"a (pycalphad.plot.binary.compsets.compsetpair attribute)": [[11, "pycalphad.plot.binary.compsets.CompsetPair.a", false]], "acentric_factor (pycalphad.io.cs_dat.endmemberrealgas attribute)": [[6, "pycalphad.io.cs_dat.EndmemberRealGas.acentric_factor", false]], "add_compsets() (pycalphad.plot.binary.zpf_boundary_sets.twophaseregion method)": [[11, "pycalphad.plot.binary.zpf_boundary_sets.TwoPhaseRegion.add_compsets", false]], "add_compsets() (pycalphad.plot.binary.zpf_boundary_sets.zpfboundarysets method)": [[11, "pycalphad.plot.binary.zpf_boundary_sets.ZPFBoundarySets.add_compsets", false]], "add_nearly_stable() (in module pycalphad.core.eqsolver)": [[5, "pycalphad.core.eqsolver.add_nearly_stable", false]], "add_new_phases() (in module pycalphad.core.eqsolver)": [[5, "pycalphad.core.eqsolver.add_new_phases", false]], "add_node() (pycalphad.mapping.primitives.nodequeue method)": [[7, "pycalphad.mapping.primitives.NodeQueue.add_node", false]], "add_nodes_from_conditions() (pycalphad.mapping.strategy.strategy_base.mapstrategy method)": [[8, "pycalphad.mapping.strategy.strategy_base.MapStrategy.add_nodes_from_conditions", false]], "add_parameter() (pycalphad.io.database.database method)": [[6, "pycalphad.io.database.Database.add_parameter", false]], "add_phase() (pycalphad.io.database.database method)": [[6, "pycalphad.io.database.Database.add_phase", false]], "add_phase_constituents() (pycalphad.io.database.database method)": [[6, "pycalphad.io.database.Database.add_phase_constituents", false]], "add_phase_symmetry_ordering_parameters() (in module pycalphad.io.tdb)": [[6, "pycalphad.io.tdb.add_phase_symmetry_ordering_parameters", false]], "add_starting_points_from_step() (pycalphad.mapping.strategy.binary_strategy.binarystrategy method)": [[8, "pycalphad.mapping.strategy.binary_strategy.BinaryStrategy.add_starting_points_from_step", false]], "add_starting_points_from_step() (pycalphad.mapping.strategy.isopleth_strategy.isoplethstrategy method)": [[8, "pycalphad.mapping.strategy.isopleth_strategy.IsoplethStrategy.add_starting_points_from_step", false]], "add_starting_points_from_step() (pycalphad.mapping.strategy.ternary_strategy.ternarystrategy method)": [[8, "pycalphad.mapping.strategy.ternary_strategy.TernaryStrategy.add_starting_points_from_step", false]], "add_structure_entry() (pycalphad.io.database.database method)": [[6, "pycalphad.io.database.Database.add_structure_entry", false]], "add_variable() (pycalphad.core.light_dataset.lightdataset method)": [[5, "pycalphad.core.light_dataset.LightDataset.add_variable", false]], "additional_anion_mixing_const (pycalphad.io.cs_dat.subqexcessquadruplet attribute)": [[6, "pycalphad.io.cs_dat.SUBQExcessQuadruplet.additional_anion_mixing_const", false]], "additional_cation_mixing_const (pycalphad.io.cs_dat.subqexcessquadruplet attribute)": [[6, "pycalphad.io.cs_dat.SUBQExcessQuadruplet.additional_cation_mixing_const", false]], "additional_coeff_pairs (pycalphad.io.cs_dat.intervalcp attribute)": [[6, "pycalphad.io.cs_dat.IntervalCP.additional_coeff_pairs", false]], "additional_coeff_pairs (pycalphad.io.cs_dat.intervalg attribute)": [[6, "pycalphad.io.cs_dat.IntervalG.additional_coeff_pairs", false]], "additionalcoefficientpair (class in pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.AdditionalCoefficientPair", false]], "advance_state() (in module pycalphad.core.minimizer)": [[5, "pycalphad.core.minimizer.advance_state", false]], "affine_subspace() (in module pycalphad.core.polytope)": [[5, "pycalphad.core.polytope.affine_subspace", false]], "all_compsets (pycalphad.plot.binary.zpf_boundary_sets.zpfboundarysets attribute)": [[11, "pycalphad.plot.binary.zpf_boundary_sets.ZPFBoundarySets.all_compsets", false]], "append() (pycalphad.mapping.primitives.zpfline method)": [[7, "pycalphad.mapping.primitives.ZPFLine.append", false]], "as_property() (in module pycalphad.property_framework.computed_property)": [[12, "pycalphad.property_framework.computed_property.as_property", false]], "as_quantity() (in module pycalphad.property_framework.units)": [[12, "pycalphad.property_framework.units.as_quantity", false]], "ast (pycalphad.model.model property)": [[3, "pycalphad.model.Model.ast", false]], "ast (pycalphad.models.model_mqmqa.modelmqmqa property)": [[9, "pycalphad.models.model_mqmqa.ModelMQMQA.ast", false]], "atomic_ordering_energy() (pycalphad.model.model method)": [[3, "pycalphad.model.Model.atomic_ordering_energy", false]], "attempt_new_step (pycalphad.mapping.primitives.zpfstate attribute)": [[7, "pycalphad.mapping.primitives.ZPFState.ATTEMPT_NEW_STEP", false]], "attrs (pycalphad.core.light_dataset.lightdataset attribute)": [[5, "pycalphad.core.light_dataset.LightDataset.attrs", false]], "axis_direction (pycalphad.mapping.primitives.node attribute)": [[7, "pycalphad.mapping.primitives.Node.axis_direction", false]], "axis_direction (pycalphad.mapping.primitives.zpfline attribute)": [[7, "pycalphad.mapping.primitives.ZPFLine.axis_direction", false]], "axis_var (pycalphad.mapping.primitives.node attribute)": [[7, "pycalphad.mapping.primitives.Node.axis_var", false]], "axis_var (pycalphad.mapping.primitives.zpfline attribute)": [[7, "pycalphad.mapping.primitives.ZPFLine.axis_var", false]], "b (pycalphad.plot.binary.compsets.compsetpair attribute)": [[11, "pycalphad.plot.binary.compsets.CompsetPair.b", false]], "beta (pycalphad.model.model attribute)": [[3, "pycalphad.model.Model.beta", false]], "beta (pycalphad.models.model_mqmqa.modelmqmqa attribute)": [[9, "pycalphad.models.model_mqmqa.ModelMQMQA.beta", false]], "binarycompset (class in pycalphad.plot.binary.compsets)": [[11, "pycalphad.plot.binary.compsets.BinaryCompset", false]], "binarystrategy (class in pycalphad.mapping.strategy.binary_strategy)": [[8, "pycalphad.mapping.strategy.binary_strategy.BinaryStrategy", false]], "binplot() (in module pycalphad.mapping.compat_api)": [[7, "pycalphad.mapping.compat_api.binplot", false]], "binplot() (in module pycalphad.plot.binary.plot)": [[11, "pycalphad.plot.binary.plot.binplot", false]], "bmag (pycalphad.model.model attribute)": [[3, "pycalphad.model.Model.BMAG", false]], "bmag (pycalphad.models.model_mqmqa.modelmqmqa attribute)": [[9, "pycalphad.models.model_mqmqa.ModelMQMQA.BMAG", false]], "build_constraint_functions() (in module pycalphad.codegen.sympydiff_utils)": [[4, "pycalphad.codegen.sympydiff_utils.build_constraint_functions", false]], "build_constraints() (in module pycalphad.core.constraints)": [[5, "pycalphad.core.constraints.build_constraints", false]], "build_functions() (in module pycalphad.codegen.sympydiff_utils)": [[4, "pycalphad.codegen.sympydiff_utils.build_functions", false]], "build_phase() (pycalphad.model.model method)": [[3, "pycalphad.model.Model.build_phase", false]], "build_phase() (pycalphad.models.model_mqmqa.modelmqmqa method)": [[9, "pycalphad.models.model_mqmqa.ModelMQMQA.build_phase", false]], "build_phase_local_constraints() (in module pycalphad.core.constraints)": [[5, "pycalphad.core.constraints.build_phase_local_constraints", false]], "buildfunctionsresult (class in pycalphad.codegen.sympydiff_utils)": [[4, "pycalphad.codegen.sympydiff_utils.BuildFunctionsResult", false]], "cacheit() (in module pycalphad.core.cache)": [[5, "pycalphad.core.cache.cacheit", false]], "calc_opts (pycalphad.core.workspace.workspace attribute)": [[5, "pycalphad.core.workspace.Workspace.calc_opts", false]], "calculate() (in module pycalphad.core.calculate)": [[5, "pycalphad.core.calculate.calculate", false]], "calculateerror": [[5, "pycalphad.core.errors.CalculateError", false]], "can_zoom() (pycalphad.plot.triangular.triangularaxes method)": [[10, "pycalphad.plot.triangular.TriangularAxes.can_zoom", false]], "canonical_sort_key() (in module pycalphad.core.utils)": [[5, "pycalphad.core.utils.canonical_sort_key", false]], "cast_from() (pycalphad.core.conditions.conditions class method)": [[5, "pycalphad.core.conditions.Conditions.cast_from", false]], "cast_from() (pycalphad.core.workspace.componentlist class method)": [[5, "pycalphad.core.workspace.ComponentList.cast_from", false]], "cast_from() (pycalphad.core.workspace.conditionkey class method)": [[5, "pycalphad.core.workspace.ConditionKey.cast_from", false]], "cast_from() (pycalphad.core.workspace.conditionvalue class method)": [[5, "pycalphad.core.workspace.ConditionValue.cast_from", false]], "cast_from() (pycalphad.core.workspace.constituentslist class method)": [[5, "pycalphad.core.workspace.ConstituentsList.cast_from", false]], "cast_from() (pycalphad.core.workspace.phaselist class method)": [[5, "pycalphad.core.workspace.PhaseList.cast_from", false]], "cast_from() (pycalphad.core.workspace.phasename class method)": [[5, "pycalphad.core.workspace.PhaseName.cast_from", false]], "cast_from() (pycalphad.io.database.database class method)": [[6, "pycalphad.io.database.Database.cast_from", false]], "cast_from() (pycalphad.variables.component class method)": [[3, "pycalphad.variables.Component.cast_from", false]], "cast_from() (pycalphad.variables.species class method)": [[3, "pycalphad.variables.Species.cast_from", false]], "charge (pycalphad.io.cs_dat.endmemberaqueous attribute)": [[6, "pycalphad.io.cs_dat.EndmemberAqueous.charge", false]], "charge (pycalphad.variables.species attribute)": [[3, "pycalphad.variables.Species.charge", false]], "chebyshev_center() (in module pycalphad.core.polytope)": [[5, "pycalphad.core.polytope.chebyshev_center", false]], "check_ab() (in module pycalphad.core.polytope)": [[5, "pycalphad.core.polytope.check_Ab", false]], "check_axis_values() (in module pycalphad.mapping.zpf_checks)": [[7, "pycalphad.mapping.zpf_checks.check_axis_values", false]], "check_change_in_phases() (in module pycalphad.mapping.zpf_checks)": [[7, "pycalphad.mapping.zpf_checks.check_change_in_phases", false]], "check_convergence() (pycalphad.core.minimizer.systemspecification method)": [[5, "pycalphad.core.minimizer.SystemSpecification.check_convergence", false]], "check_global_min() (in module pycalphad.mapping.zpf_checks)": [[7, "pycalphad.mapping.zpf_checks.check_global_min", false]], "check_similar_phase_composition() (in module pycalphad.mapping.zpf_checks)": [[7, "pycalphad.mapping.zpf_checks.check_similar_phase_composition", false]], "check_valid_point() (in module pycalphad.mapping.zpf_checks)": [[7, "pycalphad.mapping.zpf_checks.check_valid_point", false]], "chemical_group (pycalphad.io.cs_dat.endmemberqkto attribute)": [[6, "pycalphad.io.cs_dat.EndmemberQKTO.chemical_group", false]], "chemical_group_overrides (pycalphad.io.cs_dat.phase_subq attribute)": [[6, "pycalphad.io.cs_dat.Phase_SUBQ.chemical_group_overrides", false]], "chemical_potential_differential() (in module pycalphad.core.minimizer)": [[5, "pycalphad.core.minimizer.chemical_potential_differential", false]], "chemical_potentials (pycalphad.core.minimizer.systemstate attribute)": [[5, "pycalphad.core.minimizer.SystemState.chemical_potentials", false]], "chemical_potentials (pycalphad.core.solver.solverresult attribute)": [[5, "pycalphad.core.solver.SolverResult.chemical_potentials", false]], "chemical_potentials (pycalphad.mapping.primitives.point attribute)": [[7, "pycalphad.mapping.primitives.Point.chemical_potentials", false]], "chemicalpotential (class in pycalphad.variables)": [[3, "pycalphad.variables.ChemicalPotential", false]], "classproperty (class in pycalphad.model)": [[3, "pycalphad.model.classproperty", false]], "clear() (pycalphad.plot.triangular.triangularaxes method)": [[10, "pycalphad.plot.triangular.TriangularAxes.clear", false]], "coefficient (pycalphad.io.cs_dat.additionalcoefficientpair attribute)": [[6, "pycalphad.io.cs_dat.AdditionalCoefficientPair.coefficient", false]], "coefficients (pycalphad.io.cs_dat.excessqkto attribute)": [[6, "pycalphad.io.cs_dat.ExcessQKTO.coefficients", false]], "coefficients (pycalphad.io.cs_dat.excessrkm attribute)": [[6, "pycalphad.io.cs_dat.ExcessRKM.coefficients", false]], "coefficients (pycalphad.io.cs_dat.intervalg attribute)": [[6, "pycalphad.io.cs_dat.IntervalG.coefficients", false]], "compare_consider_fixed_cs() (pycalphad.mapping.primitives.point method)": [[7, "pycalphad.mapping.primitives.Point.compare_consider_fixed_cs", false]], "component (class in pycalphad.variables)": [[3, "pycalphad.variables.Component", false]], "componentlist (class in pycalphad.core.workspace)": [[5, "pycalphad.core.workspace.ComponentList", false]], "components (pycalphad.core.phase_rec.phaserecord attribute)": [[5, "pycalphad.core.phase_rec.PhaseRecord.components", false]], "components (pycalphad.core.workspace.workspace attribute)": [[5, "pycalphad.core.workspace.Workspace.components", false]], "components (pycalphad.plot.binary.zpf_boundary_sets.zpfboundarysets attribute)": [[11, "pycalphad.plot.binary.zpf_boundary_sets.ZPFBoundarySets.components", false]], "componentsfield (class in pycalphad.core.workspace)": [[5, "pycalphad.core.workspace.ComponentsField", false]], "compositions (pycalphad.plot.binary.compsets.compsetpair attribute)": [[11, "pycalphad.plot.binary.compsets.CompsetPair.compositions", false]], "compositionset (class in pycalphad.core.composition_set)": [[5, "pycalphad.core.composition_set.CompositionSet", false]], "compsetpair (class in pycalphad.plot.binary.compsets)": [[11, "pycalphad.plot.binary.compsets.CompsetPair", false]], "compsets (pycalphad.core.minimizer.systemstate attribute)": [[5, "pycalphad.core.minimizer.SystemState.compsets", false]], "compsets (pycalphad.plot.binary.compsets.compsetpair attribute)": [[11, "pycalphad.plot.binary.compsets.CompsetPair.compsets", false]], "compsets (pycalphad.plot.binary.zpf_boundary_sets.twophaseregion attribute)": [[11, "pycalphad.plot.binary.zpf_boundary_sets.TwoPhaseRegion.compsets", false]], "compsets_belong_in_region() (pycalphad.plot.binary.zpf_boundary_sets.twophaseregion method)": [[11, "pycalphad.plot.binary.zpf_boundary_sets.TwoPhaseRegion.compsets_belong_in_region", false]], "compsetstate (class in pycalphad.core.minimizer)": [[5, "pycalphad.core.minimizer.CompsetState", false]], "computableproperty (class in pycalphad.property_framework.types)": [[12, "pycalphad.property_framework.types.ComputableProperty", false]], "compute_derivative() (in module pycalphad.mapping.zpf_equilibrium)": [[7, "pycalphad.mapping.zpf_equilibrium.compute_derivative", false]], "compute_per_phase_property() (pycalphad.variables.molefraction method)": [[3, "pycalphad.variables.MoleFraction.compute_per_phase_property", false]], "compute_property() (pycalphad.property_framework.computed_property.janssonderivative method)": [[12, "pycalphad.property_framework.computed_property.JanssonDerivative.compute_property", false]], "compute_property() (pycalphad.property_framework.computed_property.linearcombination method)": [[12, "pycalphad.property_framework.computed_property.LinearCombination.compute_property", false]], "compute_property() (pycalphad.property_framework.computed_property.modelcomputedproperty method)": [[12, "pycalphad.property_framework.computed_property.ModelComputedProperty.compute_property", false]], "compute_property() (pycalphad.property_framework.metaproperties.drivingforce method)": [[12, "pycalphad.property_framework.metaproperties.DrivingForce.compute_property", false]], "compute_property() (pycalphad.property_framework.types.computableproperty method)": [[12, "pycalphad.property_framework.types.ComputableProperty.compute_property", false]], "compute_property() (pycalphad.property_framework.tzero.t0 method)": [[12, "pycalphad.property_framework.tzero.T0.compute_property", false]], "compute_property() (pycalphad.variables.chemicalpotential method)": [[3, "pycalphad.variables.ChemicalPotential.compute_property", false]], "compute_property() (pycalphad.variables.massfraction method)": [[3, "pycalphad.variables.MassFraction.compute_property", false]], "compute_property() (pycalphad.variables.molefraction method)": [[3, "pycalphad.variables.MoleFraction.compute_property", false]], "compute_property() (pycalphad.variables.phasefraction method)": [[3, "pycalphad.variables.PhaseFraction.compute_property", false]], "compute_property() (pycalphad.variables.sitefraction method)": [[3, "pycalphad.variables.SiteFraction.compute_property", false]], "compute_property() (pycalphad.variables.statevariable method)": [[3, "pycalphad.variables.StateVariable.compute_property", false]], "compute_property_gradient() (pycalphad.variables.molefraction method)": [[3, "pycalphad.variables.MoleFraction.compute_property_gradient", false]], "cond() (pycalphad.io.cs_dat.intervalbase method)": [[6, "pycalphad.io.cs_dat.IntervalBase.cond", false]], "condition_axis_order (pycalphad.core.workspace.workspace property)": [[5, "pycalphad.core.workspace.Workspace.condition_axis_order", false]], "conditionablecomputableproperty (class in pycalphad.property_framework.types)": [[12, "pycalphad.property_framework.types.ConditionableComputableProperty", false]], "conditionerror": [[5, "pycalphad.core.errors.ConditionError", false]], "conditionkey (class in pycalphad.core.workspace)": [[5, "pycalphad.core.workspace.ConditionKey", false]], "conditions (class in pycalphad.core.conditions)": [[5, "pycalphad.core.conditions.Conditions", false]], "conditions (pycalphad.core.workspace.workspace attribute)": [[5, "pycalphad.core.workspace.Workspace.conditions", false]], "conditionsentry (class in pycalphad.core.conditions)": [[5, "pycalphad.core.conditions.ConditionsEntry", false]], "conditionsfield (class in pycalphad.core.workspace)": [[5, "pycalphad.core.workspace.ConditionsField", false]], "conditionvalue (class in pycalphad.core.workspace)": [[5, "pycalphad.core.workspace.ConditionValue", false]], "cons_func (pycalphad.codegen.sympydiff_utils.constraintfunctions attribute)": [[4, "pycalphad.codegen.sympydiff_utils.ConstraintFunctions.cons_func", false]], "cons_hess (pycalphad.codegen.sympydiff_utils.constraintfunctions attribute)": [[4, "pycalphad.codegen.sympydiff_utils.ConstraintFunctions.cons_hess", false]], "cons_jac (pycalphad.codegen.sympydiff_utils.constraintfunctions attribute)": [[4, "pycalphad.codegen.sympydiff_utils.ConstraintFunctions.cons_jac", false]], "constituent_array (pycalphad.io.cs_dat.phase_cef attribute)": [[6, "pycalphad.io.cs_dat.Phase_CEF.constituent_array", false]], "constituent_array() (pycalphad.io.cs_dat.endmember method)": [[6, "pycalphad.io.cs_dat.Endmember.constituent_array", false]], "constituent_array() (pycalphad.io.cs_dat.excessbase method)": [[6, "pycalphad.io.cs_dat.ExcessBase.constituent_array", false]], "constituents (pycalphad.core.workspace.workspace attribute)": [[5, "pycalphad.core.workspace.Workspace.constituents", false]], "constituents (pycalphad.io.database.phase attribute)": [[6, "pycalphad.io.database.Phase.constituents", false]], "constituents (pycalphad.model.model attribute)": [[3, "pycalphad.model.Model.constituents", false]], "constituents (pycalphad.variables.component attribute)": [[3, "pycalphad.variables.Component.constituents", false]], "constituents (pycalphad.variables.species attribute)": [[3, "pycalphad.variables.Species.constituents", false]], "constituents() (pycalphad.io.cs_dat.endmember method)": [[6, "pycalphad.io.cs_dat.Endmember.constituents", false]], "constituentsfield (class in pycalphad.core.workspace)": [[5, "pycalphad.core.workspace.ConstituentsField", false]], "constituentslist (class in pycalphad.core.workspace)": [[5, "pycalphad.core.workspace.ConstituentsList", false]], "constraintfunctions (class in pycalphad.codegen.sympydiff_utils)": [[4, "pycalphad.codegen.sympydiff_utils.ConstraintFunctions", false]], "constraints_from_bounds() (in module pycalphad.core.polytope)": [[5, "pycalphad.core.polytope.constraints_from_bounds", false]], "constrainttuple (class in pycalphad.core.constraints)": [[5, "pycalphad.core.constraints.ConstraintTuple", false]], "construct_equilibrium_system() (in module pycalphad.core.minimizer)": [[5, "pycalphad.core.minimizer.construct_equilibrium_system", false]], "contributions (pycalphad.model.model attribute)": [[3, "pycalphad.model.Model.contributions", false]], "contributions (pycalphad.models.model_mqmqa.modelmqmqa attribute)": [[9, "pycalphad.models.model_mqmqa.ModelMQMQA.contributions", false]], "converged (pycalphad.core.solver.solverresult attribute)": [[5, "pycalphad.core.solver.SolverResult.converged", false]], "coords (pycalphad.core.light_dataset.lightdataset attribute)": [[5, "pycalphad.core.light_dataset.LightDataset.coords", false]], "copy() (pycalphad.core.workspace.workspace method)": [[5, "pycalphad.core.workspace.Workspace.copy", false]], "cp_coefficients (pycalphad.io.cs_dat.intervalcp attribute)": [[6, "pycalphad.io.cs_dat.IntervalCP.CP_coefficients", false]], "cpm (pycalphad.model.model property)": [[3, "pycalphad.model.Model.CPM", false]], "cpm (pycalphad.models.model_mqmqa.modelmqmqa property)": [[9, "pycalphad.models.model_mqmqa.ModelMQMQA.CPM", false]], "cpm_mix (pycalphad.model.model property)": [[3, "pycalphad.model.Model.CPM_MIX", false]], "cpm_mix (pycalphad.models.model_mqmqa.modelmqmqa property)": [[9, "pycalphad.models.model_mqmqa.ModelMQMQA.CPM_MIX", false]], "create_copy() (pycalphad.mapping.primitives.point method)": [[7, "pycalphad.mapping.primitives.Point.create_copy", false]], "create_node_from_different_points() (in module pycalphad.mapping.zpf_equilibrium)": [[7, "pycalphad.mapping.zpf_equilibrium.create_node_from_different_points", false]], "cs_states (pycalphad.core.minimizer.systemstate attribute)": [[5, "pycalphad.core.minimizer.SystemState.cs_states", false]], "curie_temperature (pycalphad.io.cs_dat.endmembermagnetic attribute)": [[6, "pycalphad.io.cs_dat.EndmemberMagnetic.curie_temperature", false]], "curie_temperature (pycalphad.io.cs_dat.excessrkmmagnetic attribute)": [[6, "pycalphad.io.cs_dat.ExcessRKMMagnetic.curie_temperature", false]], "curie_temperature (pycalphad.model.model attribute)": [[3, "pycalphad.model.Model.curie_temperature", false]], "curie_temperature (pycalphad.models.model_mqmqa.modelmqmqa attribute)": [[9, "pycalphad.models.model_mqmqa.ModelMQMQA.curie_temperature", false]], "current_delta (pycalphad.mapping.primitives.zpfline attribute)": [[7, "pycalphad.mapping.primitives.ZPFLine.current_delta", false]], "data (pycalphad.mapping.strategy.strategy_data.strategydata attribute)": [[8, "pycalphad.mapping.strategy.strategy_data.StrategyData.data", false]], "data_vars (pycalphad.core.light_dataset.lightdataset attribute)": [[5, "pycalphad.core.light_dataset.LightDataset.data_vars", false]], "database (class in pycalphad.io.database)": [[6, "pycalphad.io.database.Database", false]], "database (pycalphad.core.workspace.workspace attribute)": [[5, "pycalphad.core.workspace.Workspace.database", false]], "databaseexporterror": [[6, "pycalphad.io.database.DatabaseExportError", false]], "databaseformat (class in pycalphad.io.database)": [[6, "pycalphad.io.database.DatabaseFormat", false]], "degree_of_ordering (pycalphad.model.model property)": [[3, "pycalphad.model.Model.degree_of_ordering", false]], "degree_of_ordering (pycalphad.models.model_mqmqa.modelmqmqa attribute)": [[9, "pycalphad.models.model_mqmqa.ModelMQMQA.degree_of_ordering", false]], "degrees_of_freedom() (in module pycalphad.mapping.utils)": [[7, "pycalphad.mapping.utils.degrees_of_freedom", false]], "delta_chemical_potentials (pycalphad.property_framework.types.janssonderivativedeltas attribute)": [[12, "pycalphad.property_framework.types.JanssonDerivativeDeltas.delta_chemical_potentials", false]], "delta_parameters (pycalphad.property_framework.types.janssonderivativedeltas attribute)": [[12, "pycalphad.property_framework.types.JanssonDerivativeDeltas.delta_parameters", false]], "delta_phase_amounts (pycalphad.property_framework.types.janssonderivativedeltas attribute)": [[12, "pycalphad.property_framework.types.JanssonDerivativeDeltas.delta_phase_amounts", false]], "delta_sitefracs (pycalphad.property_framework.types.janssonderivativedeltas attribute)": [[12, "pycalphad.property_framework.types.JanssonDerivativeDeltas.delta_sitefracs", false]], "delta_statevars (pycalphad.property_framework.types.janssonderivativedeltas attribute)": [[12, "pycalphad.property_framework.types.JanssonDerivativeDeltas.delta_statevars", false]], "dictfield (class in pycalphad.core.workspace)": [[5, "pycalphad.core.workspace.DictField", false]], "differentiablecomputableproperty (class in pycalphad.property_framework.types)": [[12, "pycalphad.property_framework.types.DifferentiableComputableProperty", false]], "dipole_moment (pycalphad.io.cs_dat.endmemberrealgas attribute)": [[6, "pycalphad.io.cs_dat.EndmemberRealGas.dipole_moment", false]], "direction (class in pycalphad.mapping.primitives)": [[7, "pycalphad.mapping.primitives.Direction", false]], "display_name (pycalphad.property_framework.computed_property.janssonderivative property)": [[12, "pycalphad.property_framework.computed_property.JanssonDerivative.display_name", false]], "display_name (pycalphad.property_framework.metaproperties.drivingforce attribute)": [[12, "pycalphad.property_framework.metaproperties.DrivingForce.display_name", false]], "display_name (pycalphad.variables.chemicalpotential property)": [[3, "pycalphad.variables.ChemicalPotential.display_name", false]], "display_name (pycalphad.variables.pressuretype attribute)": [[3, "pycalphad.variables.PressureType.display_name", false]], "display_name (pycalphad.variables.statevariable property)": [[3, "pycalphad.variables.StateVariable.display_name", false]], "display_name (pycalphad.variables.systemmolestype attribute)": [[3, "pycalphad.variables.SystemMolesType.display_name", false]], "display_name (pycalphad.variables.temperaturetype attribute)": [[3, "pycalphad.variables.TemperatureType.display_name", false]], "display_units (pycalphad.property_framework.computed_property.janssonderivative property)": [[12, "pycalphad.property_framework.computed_property.JanssonDerivative.display_units", false]], "display_units (pycalphad.property_framework.computed_property.linearcombination attribute)": [[12, "pycalphad.property_framework.computed_property.LinearCombination.display_units", false]], "display_units (pycalphad.property_framework.metaproperties.drivingforce attribute)": [[12, "pycalphad.property_framework.metaproperties.DrivingForce.display_units", false]], "display_units (pycalphad.property_framework.types.computableproperty attribute)": [[12, "pycalphad.property_framework.types.ComputableProperty.display_units", false]], "display_units (pycalphad.property_framework.tzero.t0 property)": [[12, "pycalphad.property_framework.tzero.T0.display_units", false]], "display_units (pycalphad.variables.chemicalpotential attribute)": [[3, "pycalphad.variables.ChemicalPotential.display_units", false]], "display_units (pycalphad.variables.massfraction attribute)": [[3, "pycalphad.variables.MassFraction.display_units", false]], "display_units (pycalphad.variables.molefraction attribute)": [[3, "pycalphad.variables.MoleFraction.display_units", false]], "display_units (pycalphad.variables.phasefraction attribute)": [[3, "pycalphad.variables.PhaseFraction.display_units", false]], "display_units (pycalphad.variables.pressuretype attribute)": [[3, "pycalphad.variables.PressureType.display_units", false]], "display_units (pycalphad.variables.sitefraction attribute)": [[3, "pycalphad.variables.SiteFraction.display_units", false]], "display_units (pycalphad.variables.statevariable attribute)": [[3, "pycalphad.variables.StateVariable.display_units", false]], "display_units (pycalphad.variables.systemmolestype attribute)": [[3, "pycalphad.variables.SystemMolesType.display_units", false]], "display_units (pycalphad.variables.temperaturetype attribute)": [[3, "pycalphad.variables.TemperatureType.display_units", false]], "do_map() (pycalphad.mapping.strategy.strategy_base.mapstrategy method)": [[8, "pycalphad.mapping.strategy.strategy_base.MapStrategy.do_map", false]], "dof (pycalphad.core.composition_set.compositionset attribute)": [[5, "pycalphad.core.composition_set.CompositionSet.dof", false]], "doferror": [[5, "pycalphad.core.errors.DofError", false]], "doo (pycalphad.model.model property)": [[3, "pycalphad.model.Model.DOO", false]], "doo (pycalphad.models.model_mqmqa.modelmqmqa attribute)": [[9, "pycalphad.models.model_mqmqa.ModelMQMQA.DOO", false]], "doprint() (pycalphad.io.tdb.tcprinter method)": [[6, "pycalphad.io.tdb.TCPrinter.doprint", false]], "dormantphase (class in pycalphad.property_framework.metaproperties)": [[12, "pycalphad.property_framework.metaproperties.DormantPhase", false]], "drag_pan() (pycalphad.plot.triangular.triangularaxes method)": [[10, "pycalphad.plot.triangular.TriangularAxes.drag_pan", false]], "driving_force (pycalphad.property_framework.metaproperties.dormantphase property)": [[12, "pycalphad.property_framework.metaproperties.DormantPhase.driving_force", false]], "driving_force (pycalphad.property_framework.metaproperties.isolatedphase property)": [[12, "pycalphad.property_framework.metaproperties.IsolatedPhase.driving_force", false]], "drivingforce (class in pycalphad.property_framework.metaproperties)": [[12, "pycalphad.property_framework.metaproperties.DrivingForce", false]], "einstein_energy() (pycalphad.model.model method)": [[3, "pycalphad.model.Model.einstein_energy", false]], "elements (pycalphad.io.database.database attribute)": [[6, "pycalphad.io.database.Database.elements", false]], "end_pan() (pycalphad.plot.triangular.triangularaxes method)": [[10, "pycalphad.plot.triangular.TriangularAxes.end_pan", false]], "endmember (class in pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.Endmember", false]], "endmember_constituent_idxs (pycalphad.io.cs_dat.phase_cef attribute)": [[6, "pycalphad.io.cs_dat.Phase_CEF.endmember_constituent_idxs", false]], "endmember_matrix() (in module pycalphad.core.utils)": [[5, "pycalphad.core.utils.endmember_matrix", false]], "endmember_reference_model (pycalphad.model.model property)": [[3, "pycalphad.model.Model.endmember_reference_model", false]], "endmemberaqueous (class in pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.EndmemberAqueous", false]], "endmembermagnetic (class in pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.EndmemberMagnetic", false]], "endmemberqkto (class in pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.EndmemberQKTO", false]], "endmemberrealgas (class in pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.EndmemberRealGas", false]], "endmembers (pycalphad.io.cs_dat.phase_aqueous attribute)": [[6, "pycalphad.io.cs_dat.Phase_Aqueous.endmembers", false]], "endmembers (pycalphad.io.cs_dat.phase_realgas attribute)": [[6, "pycalphad.io.cs_dat.Phase_RealGas.endmembers", false]], "endmembers (pycalphad.io.cs_dat.phasebase attribute)": [[6, "pycalphad.io.cs_dat.PhaseBase.endmembers", false]], "energy (pycalphad.core.composition_set.compositionset attribute)": [[5, "pycalphad.core.composition_set.CompositionSet.energy", false]], "energy (pycalphad.model.model property)": [[3, "pycalphad.model.Model.energy", false]], "energy (pycalphad.models.model_mqmqa.modelmqmqa property)": [[9, "pycalphad.models.model_mqmqa.ModelMQMQA.energy", false]], "enthalpy (pycalphad.model.model property)": [[3, "pycalphad.model.Model.enthalpy", false]], "enthalpy (pycalphad.models.model_mqmqa.modelmqmqa property)": [[9, "pycalphad.models.model_mqmqa.ModelMQMQA.enthalpy", false]], "entropy (pycalphad.model.model property)": [[3, "pycalphad.model.Model.entropy", false]], "entropy (pycalphad.models.model_mqmqa.modelmqmqa property)": [[9, "pycalphad.models.model_mqmqa.ModelMQMQA.entropy", false]], "enumerate_composition_sets() (pycalphad.core.workspace.workspace method)": [[5, "pycalphad.core.workspace.Workspace.enumerate_composition_sets", false]], "eq (pycalphad.core.workspace.workspace attribute)": [[5, "pycalphad.core.workspace.Workspace.eq", false]], "eqplot() (in module pycalphad.plot.eqplot)": [[10, "pycalphad.plot.eqplot.eqplot", false]], "equilibrium() (in module pycalphad.core.equilibrium)": [[5, "pycalphad.core.equilibrium.equilibrium", false]], "equilibriumcalculationfield (class in pycalphad.core.workspace)": [[5, "pycalphad.core.workspace.EquilibriumCalculationField", false]], "equilibriumerror": [[5, "pycalphad.core.errors.EquilibriumError", false]], "escaped_name (pycalphad.variables.component property)": [[3, "pycalphad.variables.Component.escaped_name", false]], "escaped_name (pycalphad.variables.species property)": [[3, "pycalphad.variables.Species.escaped_name", false]], "excess_coefficient_idxs (pycalphad.io.cs_dat.header attribute)": [[6, "pycalphad.io.cs_dat.Header.excess_coefficient_idxs", false]], "excess_coeffs (pycalphad.io.cs_dat.subqexcessquadruplet attribute)": [[6, "pycalphad.io.cs_dat.SUBQExcessQuadruplet.excess_coeffs", false]], "excess_mixing_energy() (pycalphad.model.model method)": [[3, "pycalphad.model.Model.excess_mixing_energy", false]], "excess_mixing_energy() (pycalphad.models.model_mqmqa.modelmqmqa method)": [[9, "pycalphad.models.model_mqmqa.ModelMQMQA.excess_mixing_energy", false]], "excess_parameters (pycalphad.io.cs_dat.phase_cef attribute)": [[6, "pycalphad.io.cs_dat.Phase_CEF.excess_parameters", false]], "excess_parameters (pycalphad.io.cs_dat.phase_subq attribute)": [[6, "pycalphad.io.cs_dat.Phase_SUBQ.excess_parameters", false]], "excessbase (class in pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.ExcessBase", false]], "excessqkto (class in pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.ExcessQKTO", false]], "excessrkm (class in pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.ExcessRKM", false]], "excessrkmmagnetic (class in pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.ExcessRKMMagnetic", false]], "exit_hint (pycalphad.mapping.primitives.node attribute)": [[7, "pycalphad.mapping.primitives.Node.exit_hint", false]], "exithint (class in pycalphad.mapping.primitives)": [[7, "pycalphad.mapping.primitives.ExitHint", false]], "expand_keyword() (in module pycalphad.io.tdb_keywords)": [[6, "pycalphad.io.tdb_keywords.expand_keyword", false]], "expand_wildcard() (pycalphad.property_framework.computed_property.modelcomputedproperty method)": [[12, "pycalphad.property_framework.computed_property.ModelComputedProperty.expand_wildcard", false]], "expand_wildcard() (pycalphad.property_framework.metaproperties.drivingforce method)": [[12, "pycalphad.property_framework.metaproperties.DrivingForce.expand_wildcard", false]], "expand_wildcard() (pycalphad.variables.chemicalpotential method)": [[3, "pycalphad.variables.ChemicalPotential.expand_wildcard", false]], "expand_wildcard() (pycalphad.variables.massfraction method)": [[3, "pycalphad.variables.MassFraction.expand_wildcard", false]], "expand_wildcard() (pycalphad.variables.molefraction method)": [[3, "pycalphad.variables.MoleFraction.expand_wildcard", false]], "expand_wildcard() (pycalphad.variables.phasefraction method)": [[3, "pycalphad.variables.PhaseFraction.expand_wildcard", false]], "expand_wildcard() (pycalphad.variables.sitefraction method)": [[3, "pycalphad.variables.SiteFraction.expand_wildcard", false]], "exponent (pycalphad.io.cs_dat.additionalcoefficientpair attribute)": [[6, "pycalphad.io.cs_dat.AdditionalCoefficientPair.exponent", false]], "exponents (pycalphad.io.cs_dat.excessqkto attribute)": [[6, "pycalphad.io.cs_dat.ExcessQKTO.exponents", false]], "expr() (pycalphad.io.cs_dat.additionalcoefficientpair method)": [[6, "pycalphad.io.cs_dat.AdditionalCoefficientPair.expr", false]], "expr() (pycalphad.io.cs_dat.endmember method)": [[6, "pycalphad.io.cs_dat.Endmember.expr", false]], "expr() (pycalphad.io.cs_dat.excessqkto method)": [[6, "pycalphad.io.cs_dat.ExcessQKTO.expr", false]], "expr() (pycalphad.io.cs_dat.excessrkm method)": [[6, "pycalphad.io.cs_dat.ExcessRKM.expr", false]], "expr() (pycalphad.io.cs_dat.intervalbase method)": [[6, "pycalphad.io.cs_dat.IntervalBase.expr", false]], "expr() (pycalphad.io.cs_dat.intervalcp method)": [[6, "pycalphad.io.cs_dat.IntervalCP.expr", false]], "expr() (pycalphad.io.cs_dat.intervalg method)": [[6, "pycalphad.io.cs_dat.IntervalG.expr", false]], "expr() (pycalphad.io.cs_dat.subqexcessquadruplet method)": [[6, "pycalphad.io.cs_dat.SUBQExcessQuadruplet.expr", false]], "expr_cond_pair() (pycalphad.io.cs_dat.intervalbase method)": [[6, "pycalphad.io.cs_dat.IntervalBase.expr_cond_pair", false]], "extract_parameters() (in module pycalphad.core.utils)": [[5, "pycalphad.core.utils.extract_parameters", false]], "extrapolate_temperature_bounds (pycalphad.model.model attribute)": [[3, "pycalphad.model.Model.extrapolate_temperature_bounds", false]], "failed (pycalphad.mapping.primitives.zpfstate attribute)": [[7, "pycalphad.mapping.primitives.ZPFState.FAILED", false]], "fastfunction (class in pycalphad.core.phase_rec)": [[5, "pycalphad.core.phase_rec.FastFunction", false]], "fastfunctionfactory (class in pycalphad.core.phase_rec)": [[5, "pycalphad.core.phase_rec.FastFunctionFactory", false]], "fhash() (in module pycalphad.core.cache)": [[5, "pycalphad.core.cache.fhash", false]], "filter_phases() (in module pycalphad.core.utils)": [[5, "pycalphad.core.utils.filter_phases", false]], "filtered() (pycalphad.property_framework.metaproperties.drivingforce method)": [[12, "pycalphad.property_framework.metaproperties.DrivingForce.filtered", false]], "filtered() (pycalphad.variables.statevariable method)": [[3, "pycalphad.variables.StateVariable.filtered", false]], "find_first_compset() (in module pycalphad.property_framework.metaproperties)": [[12, "pycalphad.property_framework.metaproperties.find_first_compset", false]], "find_first_compset() (in module pycalphad.property_framework.tzero)": [[12, "pycalphad.property_framework.tzero.find_first_compset", false]], "find_global_min_point() (in module pycalphad.mapping.zpf_equilibrium)": [[7, "pycalphad.mapping.zpf_equilibrium.find_global_min_point", false]], "find_two_phase_region_compsets() (in module pycalphad.plot.binary.compsets)": [[11, "pycalphad.plot.binary.compsets.find_two_phase_region_compsets", false]], "fixed (pycalphad.core.composition_set.compositionset attribute)": [[5, "pycalphad.core.composition_set.CompositionSet.fixed", false]], "fixed_component_differential() (in module pycalphad.core.minimizer)": [[5, "pycalphad.core.minimizer.fixed_component_differential", false]], "fixed_composition_sets (pycalphad.mapping.primitives.point property)": [[7, "pycalphad.mapping.primitives.Point.fixed_composition_sets", false]], "fixed_phases (pycalphad.mapping.primitives.point property)": [[7, "pycalphad.mapping.primitives.Point.fixed_phases", false]], "fixed_phases (pycalphad.mapping.primitives.zpfline attribute)": [[7, "pycalphad.mapping.primitives.ZPFLine.fixed_phases", false]], "fixed_phases_with_multiplicity (pycalphad.mapping.primitives.point property)": [[7, "pycalphad.mapping.primitives.Point.fixed_phases_with_multiplicity", false]], "fixed_phases_with_multiplicity (pycalphad.mapping.primitives.zpfline property)": [[7, "pycalphad.mapping.primitives.ZPFLine.fixed_phases_with_multiplicity", false]], "fixed_statevars (pycalphad.model.referencestate attribute)": [[3, "pycalphad.model.ReferenceState.fixed_statevars", false]], "formulaenergy (pycalphad.model.model property)": [[3, "pycalphad.model.Model.formulaenergy", false]], "formulaenthalpy (pycalphad.model.model property)": [[3, "pycalphad.model.Model.formulaenthalpy", false]], "formulagrad() (pycalphad.core.phase_rec.phaserecord method)": [[5, "pycalphad.core.phase_rec.PhaseRecord.formulagrad", false]], "formulahess() (pycalphad.core.phase_rec.phaserecord method)": [[5, "pycalphad.core.phase_rec.PhaseRecord.formulahess", false]], "formulamole_grad() (pycalphad.core.phase_rec.phaserecord method)": [[5, "pycalphad.core.phase_rec.PhaseRecord.formulamole_grad", false]], "formulamole_hess() (pycalphad.core.phase_rec.phaserecord method)": [[5, "pycalphad.core.phase_rec.PhaseRecord.formulamole_hess", false]], "formulamole_obj() (pycalphad.core.phase_rec.phaserecord method)": [[5, "pycalphad.core.phase_rec.PhaseRecord.formulamole_obj", false]], "formulaobj() (pycalphad.core.phase_rec.phaserecord method)": [[5, "pycalphad.core.phase_rec.PhaseRecord.formulaobj", false]], "free_composition_sets (pycalphad.mapping.primitives.point property)": [[7, "pycalphad.mapping.primitives.Point.free_composition_sets", false]], "free_phases (pycalphad.mapping.primitives.point property)": [[7, "pycalphad.mapping.primitives.Point.free_phases", false]], "free_phases (pycalphad.mapping.primitives.zpfline attribute)": [[7, "pycalphad.mapping.primitives.ZPFLine.free_phases", false]], "free_phases_with_multiplicity (pycalphad.mapping.primitives.point property)": [[7, "pycalphad.mapping.primitives.Point.free_phases_with_multiplicity", false]], "free_phases_with_multiplicity (pycalphad.mapping.primitives.zpfline property)": [[7, "pycalphad.mapping.primitives.ZPFLine.free_phases_with_multiplicity", false]], "from_dataset_vertices() (pycalphad.plot.binary.compsets.binarycompset class method)": [[11, "pycalphad.plot.binary.compsets.BinaryCompset.from_dataset_vertices", false]], "from_dict() (pycalphad.core.conditions.conditions class method)": [[5, "pycalphad.core.conditions.Conditions.from_dict", false]], "from_file() (pycalphad.io.database.database static method)": [[6, "pycalphad.io.database.Database.from_file", false]], "from_string() (pycalphad.io.database.database class method)": [[6, "pycalphad.io.database.Database.from_string", false]], "func (pycalphad.codegen.sympydiff_utils.buildfunctionsresult attribute)": [[4, "pycalphad.codegen.sympydiff_utils.BuildFunctionsResult.func", false]], "function_factory (pycalphad.core.phase_rec.phaserecord attribute)": [[5, "pycalphad.core.phase_rec.PhaseRecord.function_factory", false]], "g (pycalphad.model.model property)": [[3, "pycalphad.model.Model.G", false]], "g (pycalphad.models.model_mqmqa.modelmqmqa property)": [[9, "pycalphad.models.model_mqmqa.ModelMQMQA.G", false]], "generate_automatic_starting_points() (pycalphad.mapping.strategy.binary_strategy.binarystrategy method)": [[8, "pycalphad.mapping.strategy.binary_strategy.BinaryStrategy.generate_automatic_starting_points", false]], "generate_automatic_starting_points() (pycalphad.mapping.strategy.isopleth_strategy.isoplethstrategy method)": [[8, "pycalphad.mapping.strategy.isopleth_strategy.IsoplethStrategy.generate_automatic_starting_points", false]], "generate_automatic_starting_points() (pycalphad.mapping.strategy.step_strategy.stepstrategy method)": [[8, "pycalphad.mapping.strategy.step_strategy.StepStrategy.generate_automatic_starting_points", false]], "generate_automatic_starting_points() (pycalphad.mapping.strategy.strategy_base.mapstrategy method)": [[8, "pycalphad.mapping.strategy.strategy_base.MapStrategy.generate_automatic_starting_points", false]], "generate_automatic_starting_points() (pycalphad.mapping.strategy.ternary_strategy.ternarystrategy method)": [[8, "pycalphad.mapping.strategy.ternary_strategy.TernaryStrategy.generate_automatic_starting_points", false]], "generate_dof() (in module pycalphad.core.utils)": [[5, "pycalphad.core.utils.generate_dof", false]], "generate_symmetric_group() (in module pycalphad.core.utils)": [[5, "pycalphad.core.utils.generate_symmetric_group", false]], "get() (pycalphad.codegen.phase_record_factory.phaserecordfactory method)": [[4, "pycalphad.codegen.phase_record_factory.PhaseRecordFactory.get", false]], "get() (pycalphad.core.conditions.conditions method)": [[5, "pycalphad.core.conditions.Conditions.get", false]], "get() (pycalphad.core.workspace.workspace method)": [[5, "pycalphad.core.workspace.Workspace.get", false]], "get_all_phases() (pycalphad.mapping.strategy.strategy_base.mapstrategy method)": [[8, "pycalphad.mapping.strategy.strategy_base.MapStrategy.get_all_phases", false]], "get_composition_sets() (pycalphad.core.workspace.workspace method)": [[5, "pycalphad.core.workspace.Workspace.get_composition_sets", false]], "get_compsets() (in module pycalphad.plot.binary.compsets)": [[11, "pycalphad.plot.binary.compsets.get_compsets", false]], "get_cons_func() (pycalphad.core.phase_rec.fastfunctionfactory method)": [[5, "pycalphad.core.phase_rec.FastFunctionFactory.get_cons_func", false]], "get_cons_hess() (pycalphad.core.phase_rec.fastfunctionfactory method)": [[5, "pycalphad.core.phase_rec.FastFunctionFactory.get_cons_hess", false]], "get_cons_jac() (pycalphad.core.phase_rec.fastfunctionfactory method)": [[5, "pycalphad.core.phase_rec.FastFunctionFactory.get_cons_jac", false]], "get_cons_len() (pycalphad.core.phase_rec.fastfunctionfactory method)": [[5, "pycalphad.core.phase_rec.FastFunctionFactory.get_cons_len", false]], "get_data() (pycalphad.mapping.strategy.step_strategy.stepstrategy method)": [[8, "pycalphad.mapping.strategy.step_strategy.StepStrategy.get_data", false]], "get_dataset() (pycalphad.core.light_dataset.lightdataset method)": [[5, "pycalphad.core.light_dataset.LightDataset.get_dataset", false]], "get_dict() (pycalphad.core.workspace.workspace method)": [[5, "pycalphad.core.workspace.Workspace.get_dict", false]], "get_internal_constraints() (pycalphad.model.model method)": [[3, "pycalphad.model.Model.get_internal_constraints", false]], "get_internal_constraints() (pycalphad.models.model_mqmqa.modelmqmqa method)": [[9, "pycalphad.models.model_mqmqa.ModelMQMQA.get_internal_constraints", false]], "get_invariant_data() (pycalphad.mapping.strategy.binary_strategy.binarystrategy method)": [[8, "pycalphad.mapping.strategy.binary_strategy.BinaryStrategy.get_invariant_data", false]], "get_invariant_data() (pycalphad.mapping.strategy.isopleth_strategy.isoplethstrategy method)": [[8, "pycalphad.mapping.strategy.isopleth_strategy.IsoplethStrategy.get_invariant_data", false]], "get_invariant_data() (pycalphad.mapping.strategy.ternary_strategy.ternarystrategy method)": [[8, "pycalphad.mapping.strategy.ternary_strategy.TernaryStrategy.get_invariant_data", false]], "get_invariant_data_from_tieline_strategy() (in module pycalphad.mapping.strategy.strategy_data)": [[8, "pycalphad.mapping.strategy.strategy_data.get_invariant_data_from_tieline_strategy", false]], "get_label() (in module pycalphad.mapping.plotting)": [[7, "pycalphad.mapping.plotting.get_label", false]], "get_line_plot_boundaries() (pycalphad.plot.binary.zpf_boundary_sets.zpfboundarysets method)": [[11, "pycalphad.plot.binary.zpf_boundary_sets.ZPFBoundarySets.get_line_plot_boundaries", false]], "get_local_property() (pycalphad.mapping.primitives.point method)": [[7, "pycalphad.mapping.primitives.Point.get_local_property", false]], "get_mass_fractions() (in module pycalphad.variables)": [[3, "pycalphad.variables.get_mass_fractions", false]], "get_mole_formula_func() (pycalphad.core.phase_rec.fastfunctionfactory method)": [[5, "pycalphad.core.phase_rec.FastFunctionFactory.get_mole_formula_func", false]], "get_mole_formula_grad() (pycalphad.core.phase_rec.fastfunctionfactory method)": [[5, "pycalphad.core.phase_rec.FastFunctionFactory.get_mole_formula_grad", false]], "get_mole_formula_hess() (pycalphad.core.phase_rec.fastfunctionfactory method)": [[5, "pycalphad.core.phase_rec.FastFunctionFactory.get_mole_formula_hess", false]], "get_mole_fraction_func() (pycalphad.core.phase_rec.fastfunctionfactory method)": [[5, "pycalphad.core.phase_rec.FastFunctionFactory.get_mole_fraction_func", false]], "get_mole_fraction_grad() (pycalphad.core.phase_rec.fastfunctionfactory method)": [[5, "pycalphad.core.phase_rec.FastFunctionFactory.get_mole_fraction_grad", false]], "get_mole_fraction_hess() (pycalphad.core.phase_rec.fastfunctionfactory method)": [[5, "pycalphad.core.phase_rec.FastFunctionFactory.get_mole_fraction_hess", false]], "get_mole_fractions() (in module pycalphad.variables)": [[3, "pycalphad.variables.get_mole_fractions", false]], "get_new_state() (pycalphad.core.minimizer.systemspecification method)": [[5, "pycalphad.core.minimizer.SystemSpecification.get_new_state", false]], "get_next_node() (pycalphad.mapping.primitives.nodequeue method)": [[7, "pycalphad.mapping.primitives.NodeQueue.get_next_node", false]], "get_phase_constraints() (pycalphad.codegen.phase_record_factory.phaserecordfactory method)": [[4, "pycalphad.codegen.phase_record_factory.PhaseRecordFactory.get_phase_constraints", false]], "get_phase_formula_energy() (pycalphad.codegen.phase_record_factory.phaserecordfactory method)": [[4, "pycalphad.codegen.phase_record_factory.PhaseRecordFactory.get_phase_formula_energy", false]], "get_phase_formula_moles_element() (pycalphad.codegen.phase_record_factory.phaserecordfactory method)": [[4, "pycalphad.codegen.phase_record_factory.PhaseRecordFactory.get_phase_formula_moles_element", false]], "get_phase_property() (pycalphad.codegen.phase_record_factory.phaserecordfactory method)": [[4, "pycalphad.codegen.phase_record_factory.PhaseRecordFactory.get_phase_property", false]], "get_phases() (pycalphad.plot.binary.zpf_boundary_sets.zpfboundarysets method)": [[11, "pycalphad.plot.binary.zpf_boundary_sets.ZPFBoundarySets.get_phases", false]], "get_property() (pycalphad.mapping.primitives.point method)": [[7, "pycalphad.mapping.primitives.Point.get_property", false]], "get_proxy() (pycalphad.core.workspace.dictfield method)": [[5, "pycalphad.core.workspace.DictField.get_proxy", false]], "get_pure_elements() (in module pycalphad.core.utils)": [[5, "pycalphad.core.utils.get_pure_elements", false]], "get_scatter_plot_boundaries() (pycalphad.plot.binary.zpf_boundary_sets.zpfboundarysets method)": [[11, "pycalphad.plot.binary.zpf_boundary_sets.ZPFBoundarySets.get_scatter_plot_boundaries", false]], "get_state_variables() (in module pycalphad.core.utils)": [[5, "pycalphad.core.utils.get_state_variables", false]], "get_statevars_array() (in module pycalphad.mapping.utils)": [[7, "pycalphad.mapping.utils.get_statevars_array", false]], "get_supported_variables() (in module pycalphad.io.tdb)": [[6, "pycalphad.io.tdb.get_supported_variables", false]], "get_system_spec() (pycalphad.core.solver.solver method)": [[5, "pycalphad.core.solver.Solver.get_system_spec", false]], "get_tieline_data() (pycalphad.mapping.strategy.binary_strategy.binarystrategy method)": [[8, "pycalphad.mapping.strategy.binary_strategy.BinaryStrategy.get_tieline_data", false]], "get_tieline_data() (pycalphad.mapping.strategy.ternary_strategy.ternarystrategy method)": [[8, "pycalphad.mapping.strategy.ternary_strategy.TernaryStrategy.get_tieline_data", false]], "get_tieline_data_from_tieline_strategy() (in module pycalphad.mapping.strategy.strategy_data)": [[8, "pycalphad.mapping.strategy.strategy_data.get_tieline_data_from_tieline_strategy", false]], "get_var_list() (pycalphad.mapping.primitives.zpfline method)": [[7, "pycalphad.mapping.primitives.ZPFLine.get_var_list", false]], "get_xaxis_text1_transform() (pycalphad.plot.triangular.triangularaxes method)": [[10, "pycalphad.plot.triangular.TriangularAxes.get_xaxis_text1_transform", false]], "get_xaxis_text2_transform() (pycalphad.plot.triangular.triangularaxes method)": [[10, "pycalphad.plot.triangular.TriangularAxes.get_xaxis_text2_transform", false]], "get_xaxis_transform() (pycalphad.plot.triangular.triangularaxes method)": [[10, "pycalphad.plot.triangular.TriangularAxes.get_xaxis_transform", false]], "get_yaxis_text1_transform() (pycalphad.plot.triangular.triangularaxes method)": [[10, "pycalphad.plot.triangular.TriangularAxes.get_yaxis_text1_transform", false]], "get_yaxis_text2_transform() (pycalphad.plot.triangular.triangularaxes method)": [[10, "pycalphad.plot.triangular.TriangularAxes.get_yaxis_text2_transform", false]], "get_yaxis_transform() (pycalphad.plot.triangular.triangularaxes method)": [[10, "pycalphad.plot.triangular.TriangularAxes.get_yaxis_transform", false]], "get_zpf_data() (pycalphad.mapping.strategy.isopleth_strategy.isoplethstrategy method)": [[8, "pycalphad.mapping.strategy.isopleth_strategy.IsoplethStrategy.get_zpf_data", false]], "gibbs_coefficient_idxs (pycalphad.io.cs_dat.header attribute)": [[6, "pycalphad.io.cs_dat.Header.gibbs_coefficient_idxs", false]], "gibbs_eq_type (pycalphad.io.cs_dat.endmember attribute)": [[6, "pycalphad.io.cs_dat.Endmember.gibbs_eq_type", false]], "global_conditions (pycalphad.mapping.primitives.point attribute)": [[7, "pycalphad.mapping.primitives.Point.global_conditions", false]], "global_min_is_possible() (in module pycalphad.core.starting_point)": [[5, "pycalphad.core.starting_point.global_min_is_possible", false]], "gm (pycalphad.model.model property)": [[3, "pycalphad.model.Model.GM", false]], "gm (pycalphad.models.model_mqmqa.modelmqmqa property)": [[9, "pycalphad.models.model_mqmqa.ModelMQMQA.GM", false]], "gm_mix (pycalphad.model.model property)": [[3, "pycalphad.model.Model.GM_MIX", false]], "gm_mix (pycalphad.models.model_mqmqa.modelmqmqa property)": [[9, "pycalphad.models.model_mqmqa.ModelMQMQA.GM_MIX", false]], "grad (pycalphad.codegen.sympydiff_utils.buildfunctionsresult attribute)": [[4, "pycalphad.codegen.sympydiff_utils.BuildFunctionsResult.grad", false]], "gradient (pycalphad.model.model attribute)": [[3, "pycalphad.model.Model.gradient", false]], "h (pycalphad.model.model property)": [[3, "pycalphad.model.Model.H", false]], "h298 (pycalphad.io.cs_dat.intervalcp attribute)": [[6, "pycalphad.io.cs_dat.IntervalCP.H298", false]], "h_trans (pycalphad.io.cs_dat.intervalcp attribute)": [[6, "pycalphad.io.cs_dat.IntervalCP.H_trans", false]], "halton() (in module pycalphad.core.halton)": [[5, "pycalphad.core.halton.halton", false]], "has_point_been_encountered() (pycalphad.mapping.primitives.node method)": [[7, "pycalphad.mapping.primitives.Node.has_point_been_encountered", false]], "header (class in pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.Header", false]], "heat_capacity (pycalphad.model.model property)": [[3, "pycalphad.model.Model.heat_capacity", false]], "heat_capacity (pycalphad.models.model_mqmqa.modelmqmqa property)": [[9, "pycalphad.models.model_mqmqa.ModelMQMQA.heat_capacity", false]], "hess (pycalphad.codegen.sympydiff_utils.buildfunctionsresult attribute)": [[4, "pycalphad.codegen.sympydiff_utils.BuildFunctionsResult.hess", false]], "hm (pycalphad.model.model property)": [[3, "pycalphad.model.Model.HM", false]], "hm (pycalphad.models.model_mqmqa.modelmqmqa property)": [[9, "pycalphad.models.model_mqmqa.ModelMQMQA.HM", false]], "hm_mix (pycalphad.model.model property)": [[3, "pycalphad.model.Model.HM_MIX", false]], "hm_mix (pycalphad.models.model_mqmqa.modelmqmqa property)": [[9, "pycalphad.models.model_mqmqa.ModelMQMQA.HM_MIX", false]], "hyperplane() (in module pycalphad.core.hyperplane)": [[5, "pycalphad.core.hyperplane.hyperplane", false]], "hyperplane_coefficients() (in module pycalphad.core.hyperplane)": [[5, "pycalphad.core.hyperplane.hyperplane_coefficients", false]], "ideal_mixing_energy() (pycalphad.model.model method)": [[3, "pycalphad.model.Model.ideal_mixing_energy", false]], "ideal_mixing_energy() (pycalphad.models.model_mqmqa.modelmqmqa method)": [[9, "pycalphad.models.model_mqmqa.ModelMQMQA.ideal_mixing_energy", false]], "ignore_convergence (pycalphad.core.solver.solverbase attribute)": [[5, "pycalphad.core.solver.SolverBase.ignore_convergence", false]], "implementation_units (pycalphad.property_framework.computed_property.janssonderivative property)": [[12, "pycalphad.property_framework.computed_property.JanssonDerivative.implementation_units", false]], "implementation_units (pycalphad.property_framework.computed_property.linearcombination attribute)": [[12, "pycalphad.property_framework.computed_property.LinearCombination.implementation_units", false]], "implementation_units (pycalphad.property_framework.metaproperties.drivingforce attribute)": [[12, "pycalphad.property_framework.metaproperties.DrivingForce.implementation_units", false]], "implementation_units (pycalphad.property_framework.types.computableproperty attribute)": [[12, "pycalphad.property_framework.types.ComputableProperty.implementation_units", false]], "implementation_units (pycalphad.property_framework.tzero.t0 property)": [[12, "pycalphad.property_framework.tzero.T0.implementation_units", false]], "implementation_units (pycalphad.variables.chemicalpotential attribute)": [[3, "pycalphad.variables.ChemicalPotential.implementation_units", false]], "implementation_units (pycalphad.variables.massfraction attribute)": [[3, "pycalphad.variables.MassFraction.implementation_units", false]], "implementation_units (pycalphad.variables.molefraction attribute)": [[3, "pycalphad.variables.MoleFraction.implementation_units", false]], "implementation_units (pycalphad.variables.phasefraction attribute)": [[3, "pycalphad.variables.PhaseFraction.implementation_units", false]], "implementation_units (pycalphad.variables.pressuretype attribute)": [[3, "pycalphad.variables.PressureType.implementation_units", false]], "implementation_units (pycalphad.variables.sitefraction attribute)": [[3, "pycalphad.variables.SiteFraction.implementation_units", false]], "implementation_units (pycalphad.variables.statevariable attribute)": [[3, "pycalphad.variables.StateVariable.implementation_units", false]], "implementation_units (pycalphad.variables.systemmolestype attribute)": [[3, "pycalphad.variables.SystemMolesType.implementation_units", false]], "implementation_units (pycalphad.variables.temperaturetype attribute)": [[3, "pycalphad.variables.TemperatureType.implementation_units", false]], "indep_comp_cond (pycalphad.plot.binary.zpf_boundary_sets.zpfboundarysets attribute)": [[11, "pycalphad.plot.binary.zpf_boundary_sets.ZPFBoundarySets.indep_comp_cond", false]], "independentpotential (class in pycalphad.variables)": [[3, "pycalphad.variables.IndependentPotential", false]], "insert() (pycalphad.io.cs_dat.endmember method)": [[6, "pycalphad.io.cs_dat.Endmember.insert", false]], "insert() (pycalphad.io.cs_dat.endmemberaqueous method)": [[6, "pycalphad.io.cs_dat.EndmemberAqueous.insert", false]], "insert() (pycalphad.io.cs_dat.endmembermagnetic method)": [[6, "pycalphad.io.cs_dat.EndmemberMagnetic.insert", false]], "insert() (pycalphad.io.cs_dat.endmemberqkto method)": [[6, "pycalphad.io.cs_dat.EndmemberQKTO.insert", false]], "insert() (pycalphad.io.cs_dat.endmemberrealgas method)": [[6, "pycalphad.io.cs_dat.EndmemberRealGas.insert", false]], "insert() (pycalphad.io.cs_dat.excessbase method)": [[6, "pycalphad.io.cs_dat.ExcessBase.insert", false]], "insert() (pycalphad.io.cs_dat.excessqkto method)": [[6, "pycalphad.io.cs_dat.ExcessQKTO.insert", false]], "insert() (pycalphad.io.cs_dat.excessrkm method)": [[6, "pycalphad.io.cs_dat.ExcessRKM.insert", false]], "insert() (pycalphad.io.cs_dat.excessrkmmagnetic method)": [[6, "pycalphad.io.cs_dat.ExcessRKMMagnetic.insert", false]], "insert() (pycalphad.io.cs_dat.phase_cef method)": [[6, "pycalphad.io.cs_dat.Phase_CEF.insert", false]], "insert() (pycalphad.io.cs_dat.phase_stoichiometric method)": [[6, "pycalphad.io.cs_dat.Phase_Stoichiometric.insert", false]], "insert() (pycalphad.io.cs_dat.phase_subq method)": [[6, "pycalphad.io.cs_dat.Phase_SUBQ.insert", false]], "insert() (pycalphad.io.cs_dat.phasebase method)": [[6, "pycalphad.io.cs_dat.PhaseBase.insert", false]], "insert() (pycalphad.io.cs_dat.subqexcessquadruplet method)": [[6, "pycalphad.io.cs_dat.SUBQExcessQuadruplet.insert", false]], "insert() (pycalphad.io.cs_dat.subqpair method)": [[6, "pycalphad.io.cs_dat.SUBQPair.insert", false]], "insert() (pycalphad.io.cs_dat.subqquadrupletcoordinations method)": [[6, "pycalphad.io.cs_dat.SUBQQuadrupletCoordinations.insert", false]], "instantiate_models() (in module pycalphad.core.utils)": [[5, "pycalphad.core.utils.instantiate_models", false]], "interacting_species_idxs (pycalphad.io.cs_dat.excessbase attribute)": [[6, "pycalphad.io.cs_dat.ExcessBase.interacting_species_idxs", false]], "internal_cons_func (pycalphad.core.constraints.constrainttuple attribute)": [[5, "pycalphad.core.constraints.ConstraintTuple.internal_cons_func", false]], "internal_cons_func() (pycalphad.core.phase_rec.phaserecord method)": [[5, "pycalphad.core.phase_rec.PhaseRecord.internal_cons_func", false]], "internal_cons_hess (pycalphad.core.constraints.constrainttuple attribute)": [[5, "pycalphad.core.constraints.ConstraintTuple.internal_cons_hess", false]], "internal_cons_hess() (pycalphad.core.phase_rec.phaserecord method)": [[5, "pycalphad.core.phase_rec.PhaseRecord.internal_cons_hess", false]], "internal_cons_jac (pycalphad.core.constraints.constrainttuple attribute)": [[5, "pycalphad.core.constraints.ConstraintTuple.internal_cons_jac", false]], "internal_cons_jac() (pycalphad.core.phase_rec.phaserecord method)": [[5, "pycalphad.core.phase_rec.PhaseRecord.internal_cons_jac", false]], "intersecting_point() (in module pycalphad.core.hyperplane)": [[5, "pycalphad.core.hyperplane.intersecting_point", false]], "intervalbase (class in pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.IntervalBase", false]], "intervalcp (class in pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.IntervalCP", false]], "intervalg (class in pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.IntervalG", false]], "intervals (pycalphad.io.cs_dat.endmember attribute)": [[6, "pycalphad.io.cs_dat.Endmember.intervals", false]], "is_empty() (pycalphad.mapping.primitives.nodequeue method)": [[7, "pycalphad.mapping.primitives.NodeQueue.is_empty", false]], "is_global_property (pycalphad.variables.statevariable property)": [[3, "pycalphad.variables.StateVariable.is_global_property", false]], "is_state_variable() (in module pycalphad.mapping.utils)": [[7, "pycalphad.mapping.utils.is_state_variable", false]], "isolatedphase (class in pycalphad.property_framework.metaproperties)": [[12, "pycalphad.property_framework.metaproperties.IsolatedPhase", false]], "isoplethstrategy (class in pycalphad.mapping.strategy.isopleth_strategy)": [[8, "pycalphad.mapping.strategy.isopleth_strategy.IsoplethStrategy", false]], "items() (pycalphad.codegen.phase_record_factory.phaserecordfactory method)": [[4, "pycalphad.codegen.phase_record_factory.PhaseRecordFactory.items", false]], "items() (pycalphad.core.conditions.conditions method)": [[5, "pycalphad.core.conditions.Conditions.items", false]], "iterate() (pycalphad.mapping.strategy.strategy_base.mapstrategy method)": [[8, "pycalphad.mapping.strategy.strategy_base.MapStrategy.iterate", false]], "iteration (pycalphad.core.minimizer.systemstate attribute)": [[5, "pycalphad.core.minimizer.SystemState.iteration", false]], "jansson_deltas() (pycalphad.property_framework.types.conditionablecomputableproperty method)": [[12, "pycalphad.property_framework.types.ConditionableComputableProperty.jansson_deltas", false]], "jansson_deltas() (pycalphad.variables.chemicalpotential method)": [[3, "pycalphad.variables.ChemicalPotential.jansson_deltas", false]], "jansson_deltas() (pycalphad.variables.molefraction method)": [[3, "pycalphad.variables.MoleFraction.jansson_deltas", false]], "jansson_deltas() (pycalphad.variables.statevariable method)": [[3, "pycalphad.variables.StateVariable.jansson_deltas", false]], "jansson_derivative() (pycalphad.property_framework.computed_property.modelcomputedproperty method)": [[12, "pycalphad.property_framework.computed_property.ModelComputedProperty.jansson_derivative", false]], "jansson_derivative() (pycalphad.property_framework.metaproperties.drivingforce method)": [[12, "pycalphad.property_framework.metaproperties.DrivingForce.jansson_derivative", false]], "jansson_derivative() (pycalphad.property_framework.types.differentiablecomputableproperty method)": [[12, "pycalphad.property_framework.types.DifferentiableComputableProperty.jansson_derivative", false]], "jansson_derivative() (pycalphad.variables.chemicalpotential method)": [[3, "pycalphad.variables.ChemicalPotential.jansson_derivative", false]], "jansson_derivative() (pycalphad.variables.molefraction method)": [[3, "pycalphad.variables.MoleFraction.jansson_derivative", false]], "jansson_derivative() (pycalphad.variables.phasefraction method)": [[3, "pycalphad.variables.PhaseFraction.jansson_derivative", false]], "jansson_derivative() (pycalphad.variables.statevariable method)": [[3, "pycalphad.variables.StateVariable.jansson_derivative", false]], "janssonderivative (class in pycalphad.property_framework.computed_property)": [[12, "pycalphad.property_framework.computed_property.JanssonDerivative", false]], "janssonderivativedeltas (class in pycalphad.property_framework.types)": [[12, "pycalphad.property_framework.types.JanssonDerivativeDeltas", false]], "keys() (pycalphad.codegen.phase_record_factory.phaserecordfactory method)": [[4, "pycalphad.codegen.phase_record_factory.PhaseRecordFactory.keys", false]], "keys() (pycalphad.core.conditions.conditions method)": [[5, "pycalphad.core.conditions.Conditions.keys", false]], "kohler_toop_excess_sum() (pycalphad.model.model method)": [[3, "pycalphad.model.Model.kohler_toop_excess_sum", false]], "lightdataset (class in pycalphad.core.light_dataset)": [[5, "pycalphad.core.light_dataset.LightDataset", false]], "linearcombination (class in pycalphad.property_framework.computed_property)": [[12, "pycalphad.property_framework.computed_property.LinearCombination", false]], "list_soln_species_count (pycalphad.io.cs_dat.header attribute)": [[6, "pycalphad.io.cs_dat.Header.list_soln_species_count", false]], "lower_convex_hull() (in module pycalphad.core.lower_convex_hull)": [[5, "pycalphad.core.lower_convex_hull.lower_convex_hull", false]], "lru_cache() (in module pycalphad.core.cache)": [[5, "pycalphad.core.cache.lru_cache", false]], "lstsq_check_infeasible() (in module pycalphad.core.minimizer)": [[5, "pycalphad.core.minimizer.lstsq_check_infeasible", false]], "magnetic_afm_factor (pycalphad.io.cs_dat.phase_cef attribute)": [[6, "pycalphad.io.cs_dat.Phase_CEF.magnetic_afm_factor", false]], "magnetic_afm_factor (pycalphad.io.cs_dat.phase_stoichiometric attribute)": [[6, "pycalphad.io.cs_dat.Phase_Stoichiometric.magnetic_afm_factor", false]], "magnetic_energy() (pycalphad.model.model method)": [[3, "pycalphad.model.Model.magnetic_energy", false]], "magnetic_moment (pycalphad.io.cs_dat.endmembermagnetic attribute)": [[6, "pycalphad.io.cs_dat.EndmemberMagnetic.magnetic_moment", false]], "magnetic_moment (pycalphad.io.cs_dat.excessrkmmagnetic attribute)": [[6, "pycalphad.io.cs_dat.ExcessRKMMagnetic.magnetic_moment", false]], "magnetic_structure_factor (pycalphad.io.cs_dat.phase_cef attribute)": [[6, "pycalphad.io.cs_dat.Phase_CEF.magnetic_structure_factor", false]], "magnetic_structure_factor (pycalphad.io.cs_dat.phase_stoichiometric attribute)": [[6, "pycalphad.io.cs_dat.Phase_Stoichiometric.magnetic_structure_factor", false]], "map_binary() (in module pycalphad.plot.binary.map)": [[11, "pycalphad.plot.binary.map.map_binary", false]], "mapstrategy (class in pycalphad.mapping.strategy.strategy_base)": [[8, "pycalphad.mapping.strategy.strategy_base.MapStrategy", false]], "mass_obj() (pycalphad.core.phase_rec.phaserecord method)": [[5, "pycalphad.core.phase_rec.PhaseRecord.mass_obj", false]], "mass_obj_2d() (pycalphad.core.phase_rec.phaserecord method)": [[5, "pycalphad.core.phase_rec.PhaseRecord.mass_obj_2d", false]], "massfraction (class in pycalphad.variables)": [[3, "pycalphad.variables.MassFraction", false]], "max_composition (pycalphad.plot.binary.compsets.compsetpair attribute)": [[11, "pycalphad.plot.binary.compsets.CompsetPair.max_composition", false]], "max_iterations (pycalphad.property_framework.metaproperties.dormantphase attribute)": [[12, "pycalphad.property_framework.metaproperties.DormantPhase.max_iterations", false]], "maximum_iterations (pycalphad.property_framework.tzero.t0 attribute)": [[12, "pycalphad.property_framework.tzero.T0.maximum_iterations", false]], "maximum_value (pycalphad.property_framework.tzero.t0 attribute)": [[12, "pycalphad.property_framework.tzero.T0.maximum_value", false]], "mean_composition (pycalphad.plot.binary.compsets.compsetpair attribute)": [[11, "pycalphad.plot.binary.compsets.CompsetPair.mean_composition", false]], "merge() (pycalphad.core.light_dataset.lightdataset method)": [[5, "pycalphad.core.light_dataset.LightDataset.merge", false]], "metadata (pycalphad.io.cs_dat.subqexcessquadruplet attribute)": [[6, "pycalphad.io.cs_dat.SUBQExcessQuadruplet.metadata", false]], "min_composition (pycalphad.plot.binary.compsets.compsetpair attribute)": [[11, "pycalphad.plot.binary.compsets.CompsetPair.min_composition", false]], "minimum_composition (pycalphad.core.conditions.conditions attribute)": [[5, "pycalphad.core.conditions.Conditions.minimum_composition", false]], "minimum_value (pycalphad.property_framework.tzero.t0 attribute)": [[12, "pycalphad.property_framework.tzero.T0.minimum_value", false]], "mixing_code (pycalphad.io.cs_dat.subqexcessquadruplet attribute)": [[6, "pycalphad.io.cs_dat.SUBQExcessQuadruplet.mixing_code", false]], "mixing_const (pycalphad.io.cs_dat.subqexcessquadruplet attribute)": [[6, "pycalphad.io.cs_dat.SUBQExcessQuadruplet.mixing_const", false]], "mixing_energy (pycalphad.model.model property)": [[3, "pycalphad.model.Model.mixing_energy", false]], "mixing_energy (pycalphad.models.model_mqmqa.modelmqmqa property)": [[9, "pycalphad.models.model_mqmqa.ModelMQMQA.mixing_energy", false]], "mixing_enthalpy (pycalphad.model.model property)": [[3, "pycalphad.model.Model.mixing_enthalpy", false]], "mixing_enthalpy (pycalphad.models.model_mqmqa.modelmqmqa property)": [[9, "pycalphad.models.model_mqmqa.ModelMQMQA.mixing_enthalpy", false]], "mixing_entropy (pycalphad.model.model property)": [[3, "pycalphad.model.Model.mixing_entropy", false]], "mixing_entropy (pycalphad.models.model_mqmqa.modelmqmqa property)": [[9, "pycalphad.models.model_mqmqa.ModelMQMQA.mixing_entropy", false]], "mixing_exponents (pycalphad.io.cs_dat.subqexcessquadruplet attribute)": [[6, "pycalphad.io.cs_dat.SUBQExcessQuadruplet.mixing_exponents", false]], "mixing_heat_capacity (pycalphad.model.model property)": [[3, "pycalphad.model.Model.mixing_heat_capacity", false]], "mixing_heat_capacity (pycalphad.models.model_mqmqa.modelmqmqa property)": [[9, "pycalphad.models.model_mqmqa.ModelMQMQA.mixing_heat_capacity", false]], "mixing_type (pycalphad.io.cs_dat.subqexcessquadruplet attribute)": [[6, "pycalphad.io.cs_dat.SUBQExcessQuadruplet.mixing_type", false]], "model (class in pycalphad.model)": [[3, "pycalphad.model.Model", false]], "model_hints (pycalphad.io.database.phase attribute)": [[6, "pycalphad.io.database.Phase.model_hints", false]], "modelcomputedproperty (class in pycalphad.property_framework.computed_property)": [[12, "pycalphad.property_framework.computed_property.ModelComputedProperty", false]], "modelmqmqa (class in pycalphad.models.model_mqmqa)": [[9, "pycalphad.models.model_mqmqa.ModelMQMQA", false]], "models (pycalphad.core.workspace.workspace attribute)": [[5, "pycalphad.core.workspace.Workspace.models", false]], "modelsfield (class in pycalphad.core.workspace)": [[5, "pycalphad.core.workspace.ModelsField", false]], "module": [[3, "module-pycalphad", false], [3, "module-pycalphad.model", false], [3, "module-pycalphad.variables", false], [4, "module-pycalphad.codegen", false], [4, "module-pycalphad.codegen.phase_record_factory", false], [4, "module-pycalphad.codegen.sympydiff_utils", false], [5, "module-pycalphad.core", false], [5, "module-pycalphad.core.cache", false], [5, "module-pycalphad.core.calculate", false], [5, "module-pycalphad.core.composition_set", false], [5, "module-pycalphad.core.conditions", false], [5, "module-pycalphad.core.constants", false], [5, "module-pycalphad.core.constraints", false], [5, "module-pycalphad.core.eqsolver", false], [5, "module-pycalphad.core.equilibrium", false], [5, "module-pycalphad.core.errors", false], [5, "module-pycalphad.core.halton", false], [5, "module-pycalphad.core.hyperplane", false], [5, "module-pycalphad.core.light_dataset", false], [5, "module-pycalphad.core.lower_convex_hull", false], [5, "module-pycalphad.core.minimizer", false], [5, "module-pycalphad.core.phase_rec", false], [5, "module-pycalphad.core.polytope", false], [5, "module-pycalphad.core.solver", false], [5, "module-pycalphad.core.starting_point", false], [5, "module-pycalphad.core.utils", false], [5, "module-pycalphad.core.workspace", false], [6, "module-pycalphad.io", false], [6, "module-pycalphad.io.cs_dat", false], [6, "module-pycalphad.io.database", false], [6, "module-pycalphad.io.grammar", false], [6, "module-pycalphad.io.tdb", false], [6, "module-pycalphad.io.tdb_keywords", false], [7, "module-pycalphad.mapping", false], [7, "module-pycalphad.mapping.compat_api", false], [7, "module-pycalphad.mapping.plotting", false], [7, "module-pycalphad.mapping.primitives", false], [7, "module-pycalphad.mapping.starting_points", false], [7, "module-pycalphad.mapping.utils", false], [7, "module-pycalphad.mapping.zpf_checks", false], [7, "module-pycalphad.mapping.zpf_equilibrium", false], [8, "module-pycalphad.mapping.strategy", false], [8, "module-pycalphad.mapping.strategy.binary_strategy", false], [8, "module-pycalphad.mapping.strategy.isopleth_strategy", false], [8, "module-pycalphad.mapping.strategy.step_strategy", false], [8, "module-pycalphad.mapping.strategy.strategy_base", false], [8, "module-pycalphad.mapping.strategy.strategy_data", false], [8, "module-pycalphad.mapping.strategy.ternary_strategy", false], [9, "module-pycalphad.models", false], [9, "module-pycalphad.models.model_mqmqa", false], [10, "module-pycalphad.plot", false], [10, "module-pycalphad.plot.eqplot", false], [10, "module-pycalphad.plot.ternary", false], [10, "module-pycalphad.plot.triangular", false], [10, "module-pycalphad.plot.utils", false], [11, "module-pycalphad.plot.binary", false], [11, "module-pycalphad.plot.binary.compsets", false], [11, "module-pycalphad.plot.binary.map", false], [11, "module-pycalphad.plot.binary.plot", false], [11, "module-pycalphad.plot.binary.zpf_boundary_sets", false], [12, "module-pycalphad.property_framework", false], [12, "module-pycalphad.property_framework.computed_property", false], [12, "module-pycalphad.property_framework.metaproperties", false], [12, "module-pycalphad.property_framework.types", false], [12, "module-pycalphad.property_framework.tzero", false], [12, "module-pycalphad.property_framework.units", false]], "molar_masses (pycalphad.core.phase_rec.phaserecord attribute)": [[5, "pycalphad.core.phase_rec.PhaseRecord.molar_masses", false]], "molefraction (class in pycalphad.variables)": [[3, "pycalphad.variables.MoleFraction", false]], "moles() (pycalphad.model.model method)": [[3, "pycalphad.model.Model.moles", false]], "moles() (pycalphad.models.model_mqmqa.modelmqmqa method)": [[9, "pycalphad.models.model_mqmqa.ModelMQMQA.moles", false]], "mu (in module pycalphad.variables)": [[3, "pycalphad.variables.MU", false]], "multiplicity (pycalphad.property_framework.computed_property.modelcomputedproperty property)": [[12, "pycalphad.property_framework.computed_property.ModelComputedProperty.multiplicity", false]], "multiplicity (pycalphad.property_framework.metaproperties.drivingforce property)": [[12, "pycalphad.property_framework.metaproperties.DrivingForce.multiplicity", false]], "multiplicity (pycalphad.variables.statevariable property)": [[3, "pycalphad.variables.StateVariable.multiplicity", false]], "name (pycalphad.io.database.phase attribute)": [[6, "pycalphad.io.database.Phase.name", false]], "name (pycalphad.plot.triangular.triangularaxes attribute)": [[10, "pycalphad.plot.triangular.TriangularAxes.name", false]], "name (pycalphad.variables.component attribute)": [[3, "pycalphad.variables.Component.name", false]], "name (pycalphad.variables.species attribute)": [[3, "pycalphad.variables.Species.name", false]], "ndim (pycalphad.core.workspace.workspace property)": [[5, "pycalphad.core.workspace.Workspace.ndim", false]], "neel_temperature (pycalphad.model.model attribute)": [[3, "pycalphad.model.Model.neel_temperature", false]], "neel_temperature (pycalphad.models.model_mqmqa.modelmqmqa attribute)": [[9, "pycalphad.models.model_mqmqa.ModelMQMQA.neel_temperature", false]], "negative (pycalphad.mapping.primitives.direction attribute)": [[7, "pycalphad.mapping.primitives.Direction.NEGATIVE", false]], "new_node_found (pycalphad.mapping.primitives.zpfstate attribute)": [[7, "pycalphad.mapping.primitives.ZPFState.NEW_NODE_FOUND", false]], "node (class in pycalphad.mapping.primitives)": [[7, "pycalphad.mapping.primitives.Node", false]], "nodequeue (class in pycalphad.mapping.primitives)": [[7, "pycalphad.mapping.primitives.NodeQueue", false]], "nodesexhaustederror": [[7, "pycalphad.mapping.primitives.NodesExhaustedError", false]], "nonvacant_elements (pycalphad.core.phase_rec.phaserecord attribute)": [[5, "pycalphad.core.phase_rec.PhaseRecord.nonvacant_elements", false]], "normal (pycalphad.mapping.primitives.exithint attribute)": [[7, "pycalphad.mapping.primitives.ExitHint.NORMAL", false]], "normalization (pycalphad.models.model_mqmqa.modelmqmqa property)": [[9, "pycalphad.models.model_mqmqa.ModelMQMQA.normalization", false]], "normalize_factor() (pycalphad.mapping.strategy.strategy_base.mapstrategy method)": [[8, "pycalphad.mapping.strategy.strategy_base.MapStrategy.normalize_factor", false]], "not_finished (pycalphad.mapping.primitives.zpfstate attribute)": [[7, "pycalphad.mapping.primitives.ZPFState.NOT_FINISHED", false]], "np (in module pycalphad.variables)": [[3, "pycalphad.variables.NP", false]], "np (pycalphad.core.composition_set.compositionset attribute)": [[5, "pycalphad.core.composition_set.CompositionSet.NP", false]], "nt (pycalphad.model.model attribute)": [[3, "pycalphad.model.Model.NT", false]], "nt (pycalphad.models.model_mqmqa.modelmqmqa attribute)": [[9, "pycalphad.models.model_mqmqa.ModelMQMQA.NT", false]], "num_fixed_phases() (pycalphad.mapping.primitives.zpfline method)": [[7, "pycalphad.mapping.primitives.ZPFLine.num_fixed_phases", false]], "num_free_phases() (pycalphad.mapping.primitives.zpfline method)": [[7, "pycalphad.mapping.primitives.ZPFLine.num_free_phases", false]], "num_internal_cons (pycalphad.core.constraints.constrainttuple attribute)": [[5, "pycalphad.core.constraints.ConstraintTuple.num_internal_cons", false]], "num_internal_cons (pycalphad.core.phase_rec.phaserecord attribute)": [[5, "pycalphad.core.phase_rec.PhaseRecord.num_internal_cons", false]], "num_pairs (pycalphad.io.cs_dat.phase_subq attribute)": [[6, "pycalphad.io.cs_dat.Phase_SUBQ.num_pairs", false]], "num_phase_local_conditions (pycalphad.core.composition_set.compositionset attribute)": [[5, "pycalphad.core.composition_set.CompositionSet.num_phase_local_conditions", false]], "num_quadruplets (pycalphad.io.cs_dat.phase_subq attribute)": [[6, "pycalphad.io.cs_dat.Phase_SUBQ.num_quadruplets", false]], "num_statevars (pycalphad.core.phase_rec.phaserecord attribute)": [[5, "pycalphad.core.phase_rec.PhaseRecord.num_statevars", false]], "num_stoich_phases (pycalphad.io.cs_dat.header attribute)": [[6, "pycalphad.io.cs_dat.Header.num_stoich_phases", false]], "num_subl_1_const (pycalphad.io.cs_dat.phase_subq attribute)": [[6, "pycalphad.io.cs_dat.Phase_SUBQ.num_subl_1_const", false]], "num_subl_2_const (pycalphad.io.cs_dat.phase_subq attribute)": [[6, "pycalphad.io.cs_dat.Phase_SUBQ.num_subl_2_const", false]], "number_of_atoms (pycalphad.variables.component property)": [[3, "pycalphad.variables.Component.number_of_atoms", false]], "number_of_atoms (pycalphad.variables.species property)": [[3, "pycalphad.variables.Species.number_of_atoms", false]], "obj() (pycalphad.core.phase_rec.phaserecord method)": [[5, "pycalphad.core.phase_rec.PhaseRecord.obj", false]], "obj_2d() (pycalphad.core.phase_rec.phaserecord method)": [[5, "pycalphad.core.phase_rec.PhaseRecord.obj_2d", false]], "obj_parameters_2d() (pycalphad.core.phase_rec.phaserecord method)": [[5, "pycalphad.core.phase_rec.PhaseRecord.obj_parameters_2d", false]], "on_dependency_update() (pycalphad.core.workspace.componentsfield method)": [[5, "pycalphad.core.workspace.ComponentsField.on_dependency_update", false]], "on_dependency_update() (pycalphad.core.workspace.constituentsfield method)": [[5, "pycalphad.core.workspace.ConstituentsField.on_dependency_update", false]], "on_dependency_update() (pycalphad.core.workspace.equilibriumcalculationfield method)": [[5, "pycalphad.core.workspace.EquilibriumCalculationField.on_dependency_update", false]], "on_dependency_update() (pycalphad.core.workspace.modelsfield method)": [[5, "pycalphad.core.workspace.ModelsField.on_dependency_update", false]], "on_dependency_update() (pycalphad.core.workspace.prffield method)": [[5, "pycalphad.core.workspace.PRFField.on_dependency_update", false]], "on_dependency_update() (pycalphad.core.workspace.solverfield method)": [[5, "pycalphad.core.workspace.SolverField.on_dependency_update", false]], "on_dependency_update() (pycalphad.core.workspace.typedfield method)": [[5, "pycalphad.core.workspace.TypedField.on_dependency_update", false]], "pairwise_xdiscrepancy() (pycalphad.plot.binary.compsets.compsetpair method)": [[11, "pycalphad.plot.binary.compsets.CompsetPair.pairwise_xdiscrepancy", false]], "parameter_order (pycalphad.io.cs_dat.excessrkm attribute)": [[6, "pycalphad.io.cs_dat.ExcessRKM.parameter_order", false]], "parameter_order (pycalphad.io.cs_dat.excessrkmmagnetic attribute)": [[6, "pycalphad.io.cs_dat.ExcessRKMMagnetic.parameter_order", false]], "parameters (pycalphad.core.phase_rec.phaserecord attribute)": [[5, "pycalphad.core.phase_rec.PhaseRecord.parameters", false]], "parameters (pycalphad.core.workspace.workspace attribute)": [[5, "pycalphad.core.workspace.Workspace.parameters", false]], "parent (pycalphad.mapping.primitives.node attribute)": [[7, "pycalphad.mapping.primitives.Node.parent", false]], "parse() (pycalphad.io.cs_dat.tokenparser method)": [[6, "pycalphad.io.cs_dat.TokenParser.parse", false]], "parse_additional_terms() (in module pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.parse_additional_terms", false]], "parse_chemical_formula() (in module pycalphad.io.grammar)": [[6, "pycalphad.io.grammar.parse_chemical_formula", false]], "parse_cs_dat() (in module pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.parse_cs_dat", false]], "parse_endmember() (in module pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.parse_endmember", false]], "parse_endmember_aqueous() (in module pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.parse_endmember_aqueous", false]], "parse_endmember_qkto() (in module pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.parse_endmember_qkto", false]], "parse_endmember_subq() (in module pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.parse_endmember_subq", false]], "parse_excess_magnetic_parameters() (in module pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.parse_excess_magnetic_parameters", false]], "parse_excess_parameters() (in module pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.parse_excess_parameters", false]], "parse_excess_parameters_pitz() (in module pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.parse_excess_parameters_pitz", false]], "parse_excess_qkto() (in module pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.parse_excess_qkto", false]], "parse_header() (in module pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.parse_header", false]], "parse_interval_gibbs() (in module pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.parse_interval_Gibbs", false]], "parse_interval_heat_capacity() (in module pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.parse_interval_heat_capacity", false]], "parse_phase() (in module pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.parse_phase", false]], "parse_phase_aqueous() (in module pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.parse_phase_aqueous", false]], "parse_phase_cef() (in module pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.parse_phase_cef", false]], "parse_phase_real_gas() (in module pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.parse_phase_real_gas", false]], "parse_phase_subq() (in module pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.parse_phase_subq", false]], "parse_ptvm_terms() (in module pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.parse_PTVm_terms", false]], "parse_quadruplet() (in module pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.parse_quadruplet", false]], "parse_stoich_phase() (in module pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.parse_stoich_phase", false]], "parse_subq_excess() (in module pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.parse_subq_excess", false]], "parseimpl() (pycalphad.io.tdb.tccommand method)": [[6, "pycalphad.io.tdb.TCCommand.parseImpl", false]], "parsen() (pycalphad.io.cs_dat.tokenparser method)": [[6, "pycalphad.io.cs_dat.TokenParser.parseN", false]], "pc (pycalphad.io.cs_dat.endmemberrealgas attribute)": [[6, "pycalphad.io.cs_dat.EndmemberRealGas.Pc", false]], "phase (class in pycalphad.io.database)": [[6, "pycalphad.io.database.Phase", false]], "phase (pycalphad.mapping.strategy.strategy_data.singlephasedata attribute)": [[8, "pycalphad.mapping.strategy.strategy_data.SinglePhaseData.phase", false]], "phase_aqueous (class in pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.Phase_Aqueous", false]], "phase_cef (class in pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.Phase_CEF", false]], "phase_dof (pycalphad.core.phase_rec.phaserecord attribute)": [[5, "pycalphad.core.phase_rec.PhaseRecord.phase_dof", false]], "phase_legend() (in module pycalphad.plot.utils)": [[10, "pycalphad.plot.utils.phase_legend", false]], "phase_local_cons_func() (pycalphad.core.phase_rec.phaserecord method)": [[5, "pycalphad.core.phase_rec.PhaseRecord.phase_local_cons_func", false]], "phase_local_cons_jac() (pycalphad.core.phase_rec.phaserecord method)": [[5, "pycalphad.core.phase_rec.PhaseRecord.phase_local_cons_jac", false]], "phase_name (pycalphad.core.phase_rec.phaserecord attribute)": [[5, "pycalphad.core.phase_rec.PhaseRecord.phase_name", false]], "phase_name (pycalphad.io.cs_dat.phasebase attribute)": [[6, "pycalphad.io.cs_dat.PhaseBase.phase_name", false]], "phase_name (pycalphad.model.referencestate attribute)": [[3, "pycalphad.model.ReferenceState.phase_name", false]], "phase_name (pycalphad.property_framework.metaproperties.drivingforce attribute)": [[12, "pycalphad.property_framework.metaproperties.DrivingForce.phase_name", false]], "phase_name_without_suffix (pycalphad.property_framework.metaproperties.drivingforce property)": [[12, "pycalphad.property_framework.metaproperties.DrivingForce.phase_name_without_suffix", false]], "phase_name_without_suffix (pycalphad.variables.statevariable property)": [[3, "pycalphad.variables.StateVariable.phase_name_without_suffix", false]], "phase_realgas (class in pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.Phase_RealGas", false]], "phase_record (pycalphad.core.composition_set.compositionset attribute)": [[5, "pycalphad.core.composition_set.CompositionSet.phase_record", false]], "phase_record_factory (pycalphad.core.phase_rec.phaserecord attribute)": [[5, "pycalphad.core.phase_rec.PhaseRecord.phase_record_factory", false]], "phase_record_factory (pycalphad.core.workspace.workspace attribute)": [[5, "pycalphad.core.workspace.Workspace.phase_record_factory", false]], "phase_stoichiometric (class in pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.Phase_Stoichiometric", false]], "phase_subq (class in pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.Phase_SUBQ", false]], "phase_type (pycalphad.io.cs_dat.phasebase attribute)": [[6, "pycalphad.io.cs_dat.PhaseBase.phase_type", false]], "phasebase (class in pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.PhaseBase", false]], "phasefraction (class in pycalphad.variables)": [[3, "pycalphad.variables.PhaseFraction", false]], "phaselist (class in pycalphad.core.workspace)": [[5, "pycalphad.core.workspace.PhaseList", false]], "phasename (class in pycalphad.core.workspace)": [[5, "pycalphad.core.workspace.PhaseName", false]], "phaserecord (class in pycalphad.core.phase_rec)": [[5, "pycalphad.core.phase_rec.PhaseRecord", false]], "phaserecordfactory (class in pycalphad.codegen.phase_record_factory)": [[4, "pycalphad.codegen.phase_record_factory.PhaseRecordFactory", false]], "phaseregiondata (in module pycalphad.mapping.strategy.strategy_data)": [[8, "pycalphad.mapping.strategy.strategy_data.PhaseRegionData", false]], "phases (pycalphad.core.workspace.workspace attribute)": [[5, "pycalphad.core.workspace.Workspace.phases", false]], "phases (pycalphad.io.database.database attribute)": [[6, "pycalphad.io.database.Database.phases", false]], "phases (pycalphad.mapping.strategy.strategy_data.strategydata property)": [[8, "pycalphad.mapping.strategy.strategy_data.StrategyData.phases", false]], "phases (pycalphad.plot.binary.compsets.compsetpair attribute)": [[11, "pycalphad.plot.binary.compsets.CompsetPair.phases", false]], "phases (pycalphad.plot.binary.zpf_boundary_sets.twophaseregion attribute)": [[11, "pycalphad.plot.binary.zpf_boundary_sets.TwoPhaseRegion.phases", false]], "phasesfield (class in pycalphad.core.workspace)": [[5, "pycalphad.core.workspace.PhasesField", false]], "plot_binary() (in module pycalphad.mapping.plotting)": [[7, "pycalphad.mapping.plotting.plot_binary", false]], "plot_boundaries() (in module pycalphad.plot.binary.plot)": [[11, "pycalphad.plot.binary.plot.plot_boundaries", false]], "plot_invariants() (in module pycalphad.mapping.plotting)": [[7, "pycalphad.mapping.plotting.plot_invariants", false]], "plot_isopleth() (in module pycalphad.mapping.plotting)": [[7, "pycalphad.mapping.plotting.plot_isopleth", false]], "plot_step() (in module pycalphad.mapping.plotting)": [[7, "pycalphad.mapping.plotting.plot_step", false]], "plot_ternary() (in module pycalphad.mapping.plotting)": [[7, "pycalphad.mapping.plotting.plot_ternary", false]], "plot_tielines() (in module pycalphad.mapping.plotting)": [[7, "pycalphad.mapping.plotting.plot_tielines", false]], "point (class in pycalphad.mapping.primitives)": [[7, "pycalphad.mapping.primitives.Point", false]], "point_from_equilibrium() (in module pycalphad.mapping.starting_points)": [[7, "pycalphad.mapping.starting_points.point_from_equilibrium", false]], "point_is_exit (pycalphad.mapping.primitives.exithint attribute)": [[7, "pycalphad.mapping.primitives.ExitHint.POINT_IS_EXIT", false]], "point_sample() (in module pycalphad.core.utils)": [[5, "pycalphad.core.utils.point_sample", false]], "points (pycalphad.mapping.primitives.zpfline attribute)": [[7, "pycalphad.mapping.primitives.ZPFLine.points", false]], "positive (pycalphad.mapping.primitives.direction attribute)": [[7, "pycalphad.mapping.primitives.Direction.POSITIVE", false]], "post_solve_hook() (pycalphad.core.minimizer.systemspecification method)": [[5, "pycalphad.core.minimizer.SystemSpecification.post_solve_hook", false]], "pre_solve_hook() (pycalphad.core.minimizer.systemspecification method)": [[5, "pycalphad.core.minimizer.SystemSpecification.pre_solve_hook", false]], "pressuretype (class in pycalphad.variables)": [[3, "pycalphad.variables.PressureType", false]], "prffield (class in pycalphad.core.workspace)": [[5, "pycalphad.core.workspace.PRFField", false]], "process_parameter_queue() (pycalphad.io.database.database method)": [[6, "pycalphad.io.database.Database.process_parameter_queue", false]], "prop (pycalphad.core.conditions.conditionsentry attribute)": [[5, "pycalphad.core.conditions.ConditionsEntry.prop", false]], "prop() (pycalphad.core.phase_rec.phaserecord method)": [[5, "pycalphad.core.phase_rec.PhaseRecord.prop", false]], "prop_2d() (pycalphad.core.phase_rec.phaserecord method)": [[5, "pycalphad.core.phase_rec.PhaseRecord.prop_2d", false]], "prop_grad() (pycalphad.core.phase_rec.phaserecord method)": [[5, "pycalphad.core.phase_rec.PhaseRecord.prop_grad", false]], "prop_parameters_2d() (pycalphad.core.phase_rec.phaserecord method)": [[5, "pycalphad.core.phase_rec.PhaseRecord.prop_parameters_2d", false]], "property_to_optimize (pycalphad.property_framework.tzero.t0 attribute)": [[12, "pycalphad.property_framework.tzero.T0.property_to_optimize", false]], "ptvm_terms (pycalphad.io.cs_dat.intervalcp attribute)": [[6, "pycalphad.io.cs_dat.IntervalCP.PTVm_terms", false]], "ptvm_terms (pycalphad.io.cs_dat.intervalg attribute)": [[6, "pycalphad.io.cs_dat.IntervalG.PTVm_terms", false]], "ptvmterms (class in pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.PTVmTerms", false]], "pure_elements (pycalphad.core.phase_rec.phaserecord attribute)": [[5, "pycalphad.core.phase_rec.PhaseRecord.pure_elements", false]], "pure_elements (pycalphad.io.cs_dat.header attribute)": [[6, "pycalphad.io.cs_dat.Header.pure_elements", false]], "pure_elements_mass (pycalphad.io.cs_dat.header attribute)": [[6, "pycalphad.io.cs_dat.Header.pure_elements_mass", false]], "pycalphad": [[3, "module-pycalphad", false]], "pycalphad.codegen": [[4, "module-pycalphad.codegen", false]], "pycalphad.codegen.phase_record_factory": [[4, "module-pycalphad.codegen.phase_record_factory", false]], "pycalphad.codegen.sympydiff_utils": [[4, "module-pycalphad.codegen.sympydiff_utils", false]], "pycalphad.core": [[5, "module-pycalphad.core", false]], "pycalphad.core.cache": [[5, "module-pycalphad.core.cache", false]], "pycalphad.core.calculate": [[5, "module-pycalphad.core.calculate", false]], "pycalphad.core.composition_set": [[5, "module-pycalphad.core.composition_set", false]], "pycalphad.core.conditions": [[5, "module-pycalphad.core.conditions", false]], "pycalphad.core.constants": [[5, "module-pycalphad.core.constants", false]], "pycalphad.core.constraints": [[5, "module-pycalphad.core.constraints", false]], "pycalphad.core.eqsolver": [[5, "module-pycalphad.core.eqsolver", false]], "pycalphad.core.equilibrium": [[5, "module-pycalphad.core.equilibrium", false]], "pycalphad.core.errors": [[5, "module-pycalphad.core.errors", false]], "pycalphad.core.halton": [[5, "module-pycalphad.core.halton", false]], "pycalphad.core.hyperplane": [[5, "module-pycalphad.core.hyperplane", false]], "pycalphad.core.light_dataset": [[5, "module-pycalphad.core.light_dataset", false]], "pycalphad.core.lower_convex_hull": [[5, "module-pycalphad.core.lower_convex_hull", false]], "pycalphad.core.minimizer": [[5, "module-pycalphad.core.minimizer", false]], "pycalphad.core.phase_rec": [[5, "module-pycalphad.core.phase_rec", false]], "pycalphad.core.polytope": [[5, "module-pycalphad.core.polytope", false]], "pycalphad.core.solver": [[5, "module-pycalphad.core.solver", false]], "pycalphad.core.starting_point": [[5, "module-pycalphad.core.starting_point", false]], "pycalphad.core.utils": [[5, "module-pycalphad.core.utils", false]], "pycalphad.core.workspace": [[5, "module-pycalphad.core.workspace", false]], "pycalphad.io": [[6, "module-pycalphad.io", false]], "pycalphad.io.cs_dat": [[6, "module-pycalphad.io.cs_dat", false]], "pycalphad.io.database": [[6, "module-pycalphad.io.database", false]], "pycalphad.io.grammar": [[6, "module-pycalphad.io.grammar", false]], "pycalphad.io.tdb": [[6, "module-pycalphad.io.tdb", false]], "pycalphad.io.tdb_keywords": [[6, "module-pycalphad.io.tdb_keywords", false]], "pycalphad.mapping": [[7, "module-pycalphad.mapping", false]], "pycalphad.mapping.compat_api": [[7, "module-pycalphad.mapping.compat_api", false]], "pycalphad.mapping.plotting": [[7, "module-pycalphad.mapping.plotting", false]], "pycalphad.mapping.primitives": [[7, "module-pycalphad.mapping.primitives", false]], "pycalphad.mapping.starting_points": [[7, "module-pycalphad.mapping.starting_points", false]], "pycalphad.mapping.strategy": [[8, "module-pycalphad.mapping.strategy", false]], "pycalphad.mapping.strategy.binary_strategy": [[8, "module-pycalphad.mapping.strategy.binary_strategy", false]], "pycalphad.mapping.strategy.isopleth_strategy": [[8, "module-pycalphad.mapping.strategy.isopleth_strategy", false]], "pycalphad.mapping.strategy.step_strategy": [[8, "module-pycalphad.mapping.strategy.step_strategy", false]], "pycalphad.mapping.strategy.strategy_base": [[8, "module-pycalphad.mapping.strategy.strategy_base", false]], "pycalphad.mapping.strategy.strategy_data": [[8, "module-pycalphad.mapping.strategy.strategy_data", false]], "pycalphad.mapping.strategy.ternary_strategy": [[8, "module-pycalphad.mapping.strategy.ternary_strategy", false]], "pycalphad.mapping.utils": [[7, "module-pycalphad.mapping.utils", false]], "pycalphad.mapping.zpf_checks": [[7, "module-pycalphad.mapping.zpf_checks", false]], "pycalphad.mapping.zpf_equilibrium": [[7, "module-pycalphad.mapping.zpf_equilibrium", false]], "pycalphad.model": [[3, "module-pycalphad.model", false]], "pycalphad.models": [[9, "module-pycalphad.models", false]], "pycalphad.models.model_mqmqa": [[9, "module-pycalphad.models.model_mqmqa", false]], "pycalphad.plot": [[10, "module-pycalphad.plot", false]], "pycalphad.plot.binary": [[11, "module-pycalphad.plot.binary", false]], "pycalphad.plot.binary.compsets": [[11, "module-pycalphad.plot.binary.compsets", false]], "pycalphad.plot.binary.map": [[11, "module-pycalphad.plot.binary.map", false]], "pycalphad.plot.binary.plot": [[11, "module-pycalphad.plot.binary.plot", false]], "pycalphad.plot.binary.zpf_boundary_sets": [[11, "module-pycalphad.plot.binary.zpf_boundary_sets", false]], "pycalphad.plot.eqplot": [[10, "module-pycalphad.plot.eqplot", false]], "pycalphad.plot.ternary": [[10, "module-pycalphad.plot.ternary", false]], "pycalphad.plot.triangular": [[10, "module-pycalphad.plot.triangular", false]], "pycalphad.plot.utils": [[10, "module-pycalphad.plot.utils", false]], "pycalphad.property_framework": [[12, "module-pycalphad.property_framework", false]], "pycalphad.property_framework.computed_property": [[12, "module-pycalphad.property_framework.computed_property", false]], "pycalphad.property_framework.metaproperties": [[12, "module-pycalphad.property_framework.metaproperties", false]], "pycalphad.property_framework.types": [[12, "module-pycalphad.property_framework.types", false]], "pycalphad.property_framework.tzero": [[12, "module-pycalphad.property_framework.tzero", false]], "pycalphad.property_framework.units": [[12, "module-pycalphad.property_framework.units", false]], "pycalphad.variables": [[3, "module-pycalphad.variables", false]], "quadruplet_coordinations (pycalphad.io.cs_dat.subqquadrupletcoordinations attribute)": [[6, "pycalphad.io.cs_dat.SUBQQuadrupletCoordinations.quadruplet_coordinations", false]], "quadruplet_idxs (pycalphad.io.cs_dat.subqquadrupletcoordinations attribute)": [[6, "pycalphad.io.cs_dat.SUBQQuadrupletCoordinations.quadruplet_idxs", false]], "quadruplets (pycalphad.io.cs_dat.phase_subq attribute)": [[6, "pycalphad.io.cs_dat.Phase_SUBQ.quadruplets", false]], "reached_limit (pycalphad.mapping.primitives.zpfstate attribute)": [[7, "pycalphad.mapping.primitives.ZPFState.REACHED_LIMIT", false]], "read (pycalphad.io.database.databaseformat attribute)": [[6, "pycalphad.io.database.DatabaseFormat.read", false]], "read_cs_dat() (in module pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.read_cs_dat", false]], "read_tdb() (in module pycalphad.io.tdb)": [[6, "pycalphad.io.tdb.read_tdb", false]], "rebuild_two_phase_regions() (pycalphad.plot.binary.zpf_boundary_sets.zpfboundarysets method)": [[11, "pycalphad.plot.binary.zpf_boundary_sets.ZPFBoundarySets.rebuild_two_phase_regions", false]], "recompute() (pycalphad.core.minimizer.systemstate method)": [[5, "pycalphad.core.minimizer.SystemState.recompute", false]], "recompute() (pycalphad.core.workspace.workspace method)": [[5, "pycalphad.core.workspace.Workspace.recompute", false]], "recursive_tuplify() (in module pycalphad.core.utils)": [[5, "pycalphad.core.utils.recursive_tuplify", false]], "redlich_kister_sum() (pycalphad.model.model method)": [[3, "pycalphad.model.Model.redlich_kister_sum", false]], "reference_energy() (pycalphad.model.model method)": [[3, "pycalphad.model.Model.reference_energy", false]], "reference_energy() (pycalphad.models.model_mqmqa.modelmqmqa method)": [[9, "pycalphad.models.model_mqmqa.ModelMQMQA.reference_energy", false]], "reference_model (pycalphad.models.model_mqmqa.modelmqmqa property)": [[9, "pycalphad.models.model_mqmqa.ModelMQMQA.reference_model", false]], "references (pycalphad.io.database.database attribute)": [[6, "pycalphad.io.database.Database.references", false]], "referencestate (class in pycalphad.model)": [[3, "pycalphad.model.ReferenceState", false]], "referencestate (class in pycalphad.property_framework.metaproperties)": [[12, "pycalphad.property_framework.metaproperties.ReferenceState", false]], "reflow_text() (in module pycalphad.io.tdb)": [[6, "pycalphad.io.tdb.reflow_text", false]], "register_format() (pycalphad.io.database.database static method)": [[6, "pycalphad.io.database.Database.register_format", false]], "remove() (pycalphad.core.light_dataset.lightdataset method)": [[5, "pycalphad.core.light_dataset.LightDataset.remove", false]], "rename_element_charge() (in module pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.rename_element_charge", false]], "residual_tol (pycalphad.property_framework.tzero.t0 attribute)": [[12, "pycalphad.property_framework.tzero.T0.residual_tol", false]], "run_loop() (pycalphad.core.minimizer.systemspecification method)": [[5, "pycalphad.core.minimizer.SystemSpecification.run_loop", false]], "s298 (pycalphad.io.cs_dat.intervalcp attribute)": [[6, "pycalphad.io.cs_dat.IntervalCP.S298", false]], "same_phase (pycalphad.plot.binary.compsets.compsetpair attribute)": [[11, "pycalphad.plot.binary.compsets.CompsetPair.same_phase", false]], "sample() (in module pycalphad.core.polytope)": [[5, "pycalphad.core.polytope.sample", false]], "search() (pycalphad.io.database.database method)": [[6, "pycalphad.io.database.Database.search", false]], "set() (pycalphad.plot.triangular.triangularaxes method)": [[10, "pycalphad.plot.triangular.TriangularAxes.set", false]], "set_local_conditions() (pycalphad.core.composition_set.compositionset method)": [[5, "pycalphad.core.composition_set.CompositionSet.set_local_conditions", false]], "set_ylabel() (pycalphad.plot.triangular.triangularaxes method)": [[10, "pycalphad.plot.triangular.TriangularAxes.set_ylabel", false]], "shape (pycalphad.property_framework.computed_property.janssonderivative property)": [[12, "pycalphad.property_framework.computed_property.JanssonDerivative.shape", false]], "shape (pycalphad.property_framework.computed_property.linearcombination property)": [[12, "pycalphad.property_framework.computed_property.LinearCombination.shape", false]], "shape (pycalphad.property_framework.computed_property.modelcomputedproperty property)": [[12, "pycalphad.property_framework.computed_property.ModelComputedProperty.shape", false]], "shape (pycalphad.property_framework.metaproperties.drivingforce property)": [[12, "pycalphad.property_framework.metaproperties.DrivingForce.shape", false]], "shape (pycalphad.property_framework.types.computableproperty property)": [[12, "pycalphad.property_framework.types.ComputableProperty.shape", false]], "shape (pycalphad.property_framework.tzero.t0 property)": [[12, "pycalphad.property_framework.tzero.T0.shape", false]], "shape (pycalphad.variables.statevariable property)": [[3, "pycalphad.variables.StateVariable.shape", false]], "shift_reference_state() (pycalphad.model.model method)": [[3, "pycalphad.model.Model.shift_reference_state", false]], "shift_reference_state() (pycalphad.models.model_mqmqa.modelmqmqa method)": [[9, "pycalphad.models.model_mqmqa.ModelMQMQA.shift_reference_state", false]], "simple_check_change_in_phases() (in module pycalphad.mapping.zpf_checks)": [[7, "pycalphad.mapping.zpf_checks.simple_check_change_in_phases", false]], "simple_check_global_min() (in module pycalphad.mapping.zpf_checks)": [[7, "pycalphad.mapping.zpf_checks.simple_check_global_min", false]], "simple_check_valid_point() (in module pycalphad.mapping.zpf_checks)": [[7, "pycalphad.mapping.zpf_checks.simple_check_valid_point", false]], "singlephasedata (class in pycalphad.mapping.strategy.strategy_data)": [[8, "pycalphad.mapping.strategy.strategy_data.SinglePhaseData", false]], "site_frac_atol (pycalphad.plot.binary.compsets.binarycompset attribute)": [[11, "pycalphad.plot.binary.compsets.BinaryCompset.SITE_FRAC_ATOL", false]], "site_fraction (in module pycalphad.variables)": [[3, "pycalphad.variables.site_fraction", false]], "site_fraction_differential() (in module pycalphad.core.minimizer)": [[5, "pycalphad.core.minimizer.site_fraction_differential", false]], "site_fractions (pycalphad.models.model_mqmqa.modelmqmqa property)": [[9, "pycalphad.models.model_mqmqa.ModelMQMQA.site_fractions", false]], "sitefraction (class in pycalphad.variables)": [[3, "pycalphad.variables.SiteFraction", false]], "size() (pycalphad.mapping.primitives.nodequeue method)": [[7, "pycalphad.mapping.primitives.NodeQueue.size", false]], "sizeof_fmt() (in module pycalphad.core.utils)": [[5, "pycalphad.core.utils.sizeof_fmt", false]], "sm (pycalphad.model.model property)": [[3, "pycalphad.model.Model.SM", false]], "sm (pycalphad.models.model_mqmqa.modelmqmqa property)": [[9, "pycalphad.models.model_mqmqa.ModelMQMQA.SM", false]], "sm_mix (pycalphad.model.model property)": [[3, "pycalphad.model.Model.SM_MIX", false]], "sm_mix (pycalphad.models.model_mqmqa.modelmqmqa property)": [[9, "pycalphad.models.model_mqmqa.ModelMQMQA.SM_MIX", false]], "solve() (pycalphad.core.solver.solver method)": [[5, "pycalphad.core.solver.Solver.solve", false]], "solve() (pycalphad.core.solver.solverbase method)": [[5, "pycalphad.core.solver.SolverBase.solve", false]], "solve_state() (in module pycalphad.core.minimizer)": [[5, "pycalphad.core.minimizer.solve_state", false]], "solver (class in pycalphad.core.solver)": [[5, "pycalphad.core.solver.Solver", false]], "solver (pycalphad.core.workspace.workspace attribute)": [[5, "pycalphad.core.workspace.Workspace.solver", false]], "solver (pycalphad.property_framework.tzero.t0 attribute)": [[12, "pycalphad.property_framework.tzero.T0.solver", false]], "solverbase (class in pycalphad.core.solver)": [[5, "pycalphad.core.solver.SolverBase", false]], "solverfield (class in pycalphad.core.workspace)": [[5, "pycalphad.core.workspace.SolverField", false]], "solverresult (class in pycalphad.core.solver)": [[5, "pycalphad.core.solver.SolverResult", false]], "species (class in pycalphad.variables)": [[3, "pycalphad.variables.Species", false]], "species (pycalphad.io.database.database attribute)": [[6, "pycalphad.io.database.Database.species", false]], "species (pycalphad.model.referencestate attribute)": [[3, "pycalphad.model.ReferenceState.species", false]], "species() (pycalphad.io.cs_dat.endmember method)": [[6, "pycalphad.io.cs_dat.Endmember.species", false]], "species_name (pycalphad.io.cs_dat.endmember attribute)": [[6, "pycalphad.io.cs_dat.Endmember.species_name", false]], "stable_composition_sets (pycalphad.mapping.primitives.point property)": [[7, "pycalphad.mapping.primitives.Point.stable_composition_sets", false]], "stable_composition_sets_flipped (pycalphad.mapping.primitives.point property)": [[7, "pycalphad.mapping.primitives.Point.stable_composition_sets_flipped", false]], "stable_phases (pycalphad.mapping.primitives.point property)": [[7, "pycalphad.mapping.primitives.Point.stable_phases", false]], "stable_phases (pycalphad.mapping.primitives.zpfline property)": [[7, "pycalphad.mapping.primitives.ZPFLine.stable_phases", false]], "stable_phases_with_multiplicity (pycalphad.mapping.primitives.point property)": [[7, "pycalphad.mapping.primitives.Point.stable_phases_with_multiplicity", false]], "stable_phases_with_multiplicity (pycalphad.mapping.primitives.zpfline property)": [[7, "pycalphad.mapping.primitives.ZPFLine.stable_phases_with_multiplicity", false]], "start_pan() (pycalphad.plot.triangular.triangularaxes method)": [[10, "pycalphad.plot.triangular.TriangularAxes.start_pan", false]], "starting_point() (in module pycalphad.core.starting_point)": [[5, "pycalphad.core.starting_point.starting_point", false]], "state_variable_differential() (in module pycalphad.core.minimizer)": [[5, "pycalphad.core.minimizer.state_variable_differential", false]], "state_variables (pycalphad.core.phase_rec.phaserecord attribute)": [[5, "pycalphad.core.phase_rec.PhaseRecord.state_variables", false]], "state_variables (pycalphad.models.model_mqmqa.modelmqmqa property)": [[9, "pycalphad.models.model_mqmqa.ModelMQMQA.state_variables", false]], "statevariable (class in pycalphad.variables)": [[3, "pycalphad.variables.StateVariable", false]], "status (pycalphad.mapping.primitives.zpfline attribute)": [[7, "pycalphad.mapping.primitives.ZPFLine.status", false]], "stepstrategy (class in pycalphad.mapping.strategy.step_strategy)": [[8, "pycalphad.mapping.strategy.step_strategy.StepStrategy", false]], "stoichiometric_factor (pycalphad.io.cs_dat.endmemberqkto attribute)": [[6, "pycalphad.io.cs_dat.EndmemberQKTO.stoichiometric_factor", false]], "stoichiometry_pure_elements (pycalphad.io.cs_dat.endmember attribute)": [[6, "pycalphad.io.cs_dat.Endmember.stoichiometry_pure_elements", false]], "stoichiometry_quadruplet (pycalphad.io.cs_dat.subqpair attribute)": [[6, "pycalphad.io.cs_dat.SUBQPair.stoichiometry_quadruplet", false]], "str_keys() (pycalphad.core.conditions.conditions method)": [[5, "pycalphad.core.conditions.Conditions.str_keys", false]], "strategydata (class in pycalphad.mapping.strategy.strategy_data)": [[8, "pycalphad.mapping.strategy.strategy_data.StrategyData", false]], "subl_1_charges (pycalphad.io.cs_dat.phase_subq attribute)": [[6, "pycalphad.io.cs_dat.Phase_SUBQ.subl_1_charges", false]], "subl_1_chemical_groups (pycalphad.io.cs_dat.phase_subq attribute)": [[6, "pycalphad.io.cs_dat.Phase_SUBQ.subl_1_chemical_groups", false]], "subl_1_const (pycalphad.io.cs_dat.phase_subq attribute)": [[6, "pycalphad.io.cs_dat.Phase_SUBQ.subl_1_const", false]], "subl_2_charges (pycalphad.io.cs_dat.phase_subq attribute)": [[6, "pycalphad.io.cs_dat.Phase_SUBQ.subl_2_charges", false]], "subl_2_chemical_groups (pycalphad.io.cs_dat.phase_subq attribute)": [[6, "pycalphad.io.cs_dat.Phase_SUBQ.subl_2_chemical_groups", false]], "subl_2_const (pycalphad.io.cs_dat.phase_subq attribute)": [[6, "pycalphad.io.cs_dat.Phase_SUBQ.subl_2_const", false]], "subl_const_idx_pairs (pycalphad.io.cs_dat.phase_subq attribute)": [[6, "pycalphad.io.cs_dat.Phase_SUBQ.subl_const_idx_pairs", false]], "subl_ratios (pycalphad.io.cs_dat.phase_cef attribute)": [[6, "pycalphad.io.cs_dat.Phase_CEF.subl_ratios", false]], "sublattices (pycalphad.io.database.phase attribute)": [[6, "pycalphad.io.database.Phase.sublattices", false]], "subqexcessquadruplet (class in pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.SUBQExcessQuadruplet", false]], "subqpair (class in pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.SUBQPair", false]], "subqquadrupletcoordinations (class in pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.SUBQQuadrupletCoordinations", false]], "symbol_replace() (pycalphad.model.model class method)": [[3, "pycalphad.model.Model.symbol_replace", false]], "symbol_replace() (pycalphad.models.model_mqmqa.modelmqmqa static method)": [[9, "pycalphad.models.model_mqmqa.ModelMQMQA.symbol_replace", false]], "symbols (pycalphad.io.database.database attribute)": [[6, "pycalphad.io.database.Database.symbols", false]], "systemmolestype (class in pycalphad.variables)": [[3, "pycalphad.variables.SystemMolesType", false]], "systemspecification (class in pycalphad.core.minimizer)": [[5, "pycalphad.core.minimizer.SystemSpecification", false]], "systemstate (class in pycalphad.core.minimizer)": [[5, "pycalphad.core.minimizer.SystemState", false]], "t0 (class in pycalphad.property_framework.tzero)": [[12, "pycalphad.property_framework.tzero.T0", false]], "t_max (pycalphad.io.cs_dat.intervalbase attribute)": [[6, "pycalphad.io.cs_dat.IntervalBase.T_max", false]], "tc (pycalphad.io.cs_dat.endmemberrealgas attribute)": [[6, "pycalphad.io.cs_dat.EndmemberRealGas.Tc", false]], "tc (pycalphad.model.model attribute)": [[3, "pycalphad.model.Model.TC", false]], "tc (pycalphad.models.model_mqmqa.modelmqmqa attribute)": [[9, "pycalphad.models.model_mqmqa.ModelMQMQA.TC", false]], "tccommand (class in pycalphad.io.tdb)": [[6, "pycalphad.io.tdb.TCCommand", false]], "tcprinter (class in pycalphad.io.tdb)": [[6, "pycalphad.io.tdb.TCPrinter", false]], "tdiscrepancy() (pycalphad.plot.binary.compsets.compsetpair method)": [[11, "pycalphad.plot.binary.compsets.CompsetPair.Tdiscrepancy", false]], "temperature (pycalphad.plot.binary.compsets.compsetpair attribute)": [[11, "pycalphad.plot.binary.compsets.CompsetPair.temperature", false]], "temperature_atol (pycalphad.plot.binary.compsets.binarycompset attribute)": [[11, "pycalphad.plot.binary.compsets.BinaryCompset.TEMPERATURE_ATOL", false]], "temperaturetype (class in pycalphad.variables)": [[3, "pycalphad.variables.TemperatureType", false]], "terms (pycalphad.io.cs_dat.ptvmterms attribute)": [[6, "pycalphad.io.cs_dat.PTVmTerms.terms", false]], "ternarystrategy (class in pycalphad.mapping.strategy.ternary_strategy)": [[8, "pycalphad.mapping.strategy.ternary_strategy.TernaryStrategy", false]], "ternplot() (in module pycalphad.mapping.compat_api)": [[7, "pycalphad.mapping.compat_api.ternplot", false]], "ternplot() (in module pycalphad.plot.ternary)": [[10, "pycalphad.plot.ternary.ternplot", false]], "testmodel (class in pycalphad.model)": [[3, "pycalphad.model.TestModel", false]], "to_file() (pycalphad.io.database.database method)": [[6, "pycalphad.io.database.Database.to_file", false]], "to_interval() (in module pycalphad.io.tdb)": [[6, "pycalphad.io.tdb.to_interval", false]], "to_string() (pycalphad.io.database.database method)": [[6, "pycalphad.io.database.Database.to_string", false]], "tokenize() (in module pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.tokenize", false]], "tokenparser (class in pycalphad.io.cs_dat)": [[6, "pycalphad.io.cs_dat.TokenParser", false]], "tokenparsererror": [[6, "pycalphad.io.cs_dat.TokenParserError", false]], "triangularaxes (class in pycalphad.plot.triangular)": [[10, "pycalphad.plot.triangular.TriangularAxes", false]], "two_phase_regions (pycalphad.plot.binary.zpf_boundary_sets.zpfboundarysets attribute)": [[11, "pycalphad.plot.binary.zpf_boundary_sets.ZPFBoundarySets.two_phase_regions", false]], "twophaseregion (class in pycalphad.plot.binary.zpf_boundary_sets)": [[11, "pycalphad.plot.binary.zpf_boundary_sets.TwoPhaseRegion", false]], "twostate_energy() (pycalphad.model.model method)": [[3, "pycalphad.model.Model.twostate_energy", false]], "typedfield (class in pycalphad.core.workspace)": [[5, "pycalphad.core.workspace.TypedField", false]], "unique_phases (pycalphad.plot.binary.compsets.compsetpair attribute)": [[11, "pycalphad.plot.binary.compsets.CompsetPair.unique_phases", false]], "unit_conversion_context() (in module pycalphad.property_framework.units)": [[12, "pycalphad.property_framework.units.unit_conversion_context", false]], "unpack_components() (in module pycalphad.variables)": [[3, "pycalphad.variables.unpack_components", false]], "unpack_condition() (in module pycalphad.core.conditions)": [[5, "pycalphad.core.conditions.unpack_condition", false]], "unpack_condition() (in module pycalphad.core.utils)": [[5, "pycalphad.core.utils.unpack_condition", false]], "unpack_kwarg() (in module pycalphad.core.utils)": [[5, "pycalphad.core.utils.unpack_kwarg", false]], "unpack_phases() (in module pycalphad.core.utils)": [[5, "pycalphad.core.utils.unpack_phases", false]], "unpack_species() (in module pycalphad.core.utils)": [[5, "pycalphad.core.utils.unpack_species", false]], "unwrap_piecewise() (pycalphad.model.model class method)": [[3, "pycalphad.model.Model.unwrap_piecewise", false]], "update() (pycalphad.core.composition_set.compositionset method)": [[5, "pycalphad.core.composition_set.CompositionSet.update", false]], "update() (pycalphad.core.conditions.conditions method)": [[5, "pycalphad.core.conditions.Conditions.update", false]], "update_cs_phase_frac() (in module pycalphad.mapping.utils)": [[7, "pycalphad.mapping.utils.update_cs_phase_frac", false]], "update_equilibrium_with_new_conditions() (in module pycalphad.mapping.zpf_equilibrium)": [[7, "pycalphad.mapping.zpf_equilibrium.update_equilibrium_with_new_conditions", false]], "update_parameters() (pycalphad.codegen.phase_record_factory.phaserecordfactory method)": [[4, "pycalphad.codegen.phase_record_factory.PhaseRecordFactory.update_parameters", false]], "value (pycalphad.core.conditions.conditionsentry attribute)": [[5, "pycalphad.core.conditions.ConditionsEntry.value", false]], "values() (pycalphad.codegen.phase_record_factory.phaserecordfactory method)": [[4, "pycalphad.codegen.phase_record_factory.PhaseRecordFactory.values", false]], "values() (pycalphad.core.conditions.conditions method)": [[5, "pycalphad.core.conditions.Conditions.values", false]], "variables (pycalphad.core.phase_rec.phaserecord attribute)": [[5, "pycalphad.core.phase_rec.PhaseRecord.variables", false]], "variables (pycalphad.model.model property)": [[3, "pycalphad.model.Model.variables", false]], "vc (pycalphad.io.cs_dat.endmemberrealgas attribute)": [[6, "pycalphad.io.cs_dat.EndmemberRealGas.Vc", false]], "verbose (pycalphad.core.workspace.workspace attribute)": [[5, "pycalphad.core.workspace.Workspace.verbose", false]], "volume_energy() (pycalphad.model.model method)": [[3, "pycalphad.model.Model.volume_energy", false]], "w (in module pycalphad.variables)": [[3, "pycalphad.variables.W", false]], "weight (pycalphad.variables.species property)": [[3, "pycalphad.variables.Species.weight", false]], "with_copy() (pycalphad.mapping.primitives.point class method)": [[7, "pycalphad.mapping.primitives.Point.with_copy", false]], "workspace (class in pycalphad.core.workspace)": [[5, "pycalphad.core.workspace.Workspace", false]], "wrap_symbol() (in module pycalphad.core.utils)": [[5, "pycalphad.core.utils.wrap_symbol", false]], "write (pycalphad.io.database.databaseformat attribute)": [[6, "pycalphad.io.database.DatabaseFormat.write", false]], "write_tdb() (in module pycalphad.io.tdb)": [[6, "pycalphad.io.tdb.write_tdb", false]], "x (in module pycalphad.variables)": [[3, "pycalphad.variables.X", false]], "x (pycalphad.core.composition_set.compositionset attribute)": [[5, "pycalphad.core.composition_set.CompositionSet.X", false]], "x (pycalphad.core.solver.solverresult attribute)": [[5, "pycalphad.core.solver.SolverResult.x", false]], "x (pycalphad.mapping.strategy.strategy_data.singlephasedata attribute)": [[8, "pycalphad.mapping.strategy.strategy_data.SinglePhaseData.x", false]], "x (pycalphad.mapping.strategy.strategy_data.strategydata property)": [[8, "pycalphad.mapping.strategy.strategy_data.StrategyData.x", false]], "xdiscrepancy() (pycalphad.plot.binary.compsets.compsetpair method)": [[11, "pycalphad.plot.binary.compsets.CompsetPair.xdiscrepancy", false]], "xiong_magnetic_energy() (pycalphad.model.model method)": [[3, "pycalphad.model.Model.xiong_magnetic_energy", false]], "xlim (pycalphad.mapping.strategy.strategy_data.strategydata attribute)": [[8, "pycalphad.mapping.strategy.strategy_data.StrategyData.xlim", false]], "y (in module pycalphad.variables)": [[3, "pycalphad.variables.Y", false]], "y (pycalphad.mapping.strategy.strategy_data.singlephasedata attribute)": [[8, "pycalphad.mapping.strategy.strategy_data.SinglePhaseData.y", false]], "y (pycalphad.mapping.strategy.strategy_data.strategydata property)": [[8, "pycalphad.mapping.strategy.strategy_data.StrategyData.y", false]], "ydiscrepancy() (pycalphad.plot.binary.compsets.compsetpair method)": [[11, "pycalphad.plot.binary.compsets.CompsetPair.ydiscrepancy", false]], "ydiscrepancy_max() (pycalphad.plot.binary.compsets.compsetpair method)": [[11, "pycalphad.plot.binary.compsets.CompsetPair.ydiscrepancy_max", false]], "ylim (pycalphad.mapping.strategy.strategy_data.strategydata attribute)": [[8, "pycalphad.mapping.strategy.strategy_data.StrategyData.ylim", false]], "z() (pycalphad.models.model_mqmqa.modelmqmqa method)": [[9, "pycalphad.models.model_mqmqa.ModelMQMQA.Z", false]], "zeta (pycalphad.io.cs_dat.subqpair attribute)": [[6, "pycalphad.io.cs_dat.SUBQPair.zeta", false]], "zpfboundarysets (class in pycalphad.plot.binary.zpf_boundary_sets)": [[11, "pycalphad.plot.binary.zpf_boundary_sets.ZPFBoundarySets", false]], "zpfline (class in pycalphad.mapping.primitives)": [[7, "pycalphad.mapping.primitives.ZPFLine", false]], "zpfstate (class in pycalphad.mapping.primitives)": [[7, "pycalphad.mapping.primitives.ZPFState", false]]}, "objects": {"": [[3, 0, 0, "-", "pycalphad"]], "pycalphad": [[4, 0, 0, "-", "codegen"], [5, 0, 0, "-", "core"], [6, 0, 0, "-", "io"], [7, 0, 0, "-", "mapping"], [3, 0, 0, "-", "model"], [9, 0, 0, "-", "models"], [10, 0, 0, "-", "plot"], [12, 0, 0, "-", "property_framework"], [3, 0, 0, "-", "variables"]], "pycalphad.codegen": [[4, 0, 0, "-", "phase_record_factory"], [4, 0, 0, "-", "sympydiff_utils"]], "pycalphad.codegen.phase_record_factory": [[4, 1, 1, "", "PhaseRecordFactory"]], "pycalphad.codegen.phase_record_factory.PhaseRecordFactory": [[4, 2, 1, "", "get"], [4, 2, 1, "", "get_phase_constraints"], [4, 2, 1, "", "get_phase_formula_energy"], [4, 2, 1, "", "get_phase_formula_moles_element"], [4, 2, 1, "", "get_phase_property"], [4, 2, 1, "", "items"], [4, 2, 1, "", "keys"], [4, 2, 1, "", "update_parameters"], [4, 2, 1, "", "values"]], "pycalphad.codegen.sympydiff_utils": [[4, 1, 1, "", "BuildFunctionsResult"], [4, 1, 1, "", "ConstraintFunctions"], [4, 4, 1, "", "build_constraint_functions"], [4, 4, 1, "", "build_functions"]], "pycalphad.codegen.sympydiff_utils.BuildFunctionsResult": [[4, 3, 1, "", "func"], [4, 3, 1, "", "grad"], [4, 3, 1, "", "hess"]], "pycalphad.codegen.sympydiff_utils.ConstraintFunctions": [[4, 3, 1, "", "cons_func"], [4, 3, 1, "", "cons_hess"], [4, 3, 1, "", "cons_jac"]], "pycalphad.core": [[5, 0, 0, "-", "cache"], [5, 0, 0, "-", "calculate"], [5, 0, 0, "-", "composition_set"], [5, 0, 0, "-", "conditions"], [5, 0, 0, "-", "constants"], [5, 0, 0, "-", "constraints"], [5, 0, 0, "-", "eqsolver"], [5, 0, 0, "-", "equilibrium"], [5, 0, 0, "-", "errors"], [5, 0, 0, "-", "halton"], [5, 0, 0, "-", "hyperplane"], [5, 0, 0, "-", "light_dataset"], [5, 0, 0, "-", "lower_convex_hull"], [5, 0, 0, "-", "minimizer"], [5, 0, 0, "-", "phase_rec"], [5, 0, 0, "-", "polytope"], [5, 0, 0, "-", "solver"], [5, 0, 0, "-", "starting_point"], [5, 0, 0, "-", "utils"], [5, 0, 0, "-", "workspace"]], "pycalphad.core.cache": [[5, 4, 1, "", "cacheit"], [5, 4, 1, "", "fhash"], [5, 4, 1, "", "lru_cache"]], "pycalphad.core.calculate": [[5, 4, 1, "", "calculate"]], "pycalphad.core.composition_set": [[5, 1, 1, "", "CompositionSet"]], "pycalphad.core.composition_set.CompositionSet": [[5, 3, 1, "", "NP"], [5, 3, 1, "", "X"], [5, 3, 1, "", "dof"], [5, 3, 1, "", "energy"], [5, 3, 1, "", "fixed"], [5, 3, 1, "", "num_phase_local_conditions"], [5, 3, 1, "", "phase_record"], [5, 2, 1, "", "set_local_conditions"], [5, 2, 1, "", "update"]], "pycalphad.core.conditions": [[5, 1, 1, "", "Conditions"], [5, 1, 1, "", "ConditionsEntry"], [5, 4, 1, "", "unpack_condition"]], "pycalphad.core.conditions.Conditions": [[5, 2, 1, "", "cast_from"], [5, 2, 1, "", "from_dict"], [5, 2, 1, "", "get"], [5, 2, 1, "", "items"], [5, 2, 1, "", "keys"], [5, 3, 1, "", "minimum_composition"], [5, 2, 1, "", "str_keys"], [5, 2, 1, "", "update"], [5, 2, 1, "", "values"]], "pycalphad.core.conditions.ConditionsEntry": [[5, 3, 1, "", "prop"], [5, 3, 1, "", "value"]], "pycalphad.core.constraints": [[5, 1, 1, "", "ConstraintTuple"], [5, 4, 1, "", "build_constraints"], [5, 4, 1, "", "build_phase_local_constraints"]], "pycalphad.core.constraints.ConstraintTuple": [[5, 3, 1, "", "internal_cons_func"], [5, 3, 1, "", "internal_cons_hess"], [5, 3, 1, "", "internal_cons_jac"], [5, 3, 1, "", "num_internal_cons"]], "pycalphad.core.eqsolver": [[5, 4, 1, "", "add_nearly_stable"], [5, 4, 1, "", "add_new_phases"]], "pycalphad.core.equilibrium": [[5, 4, 1, "", "equilibrium"]], "pycalphad.core.errors": [[5, 5, 1, "", "CalculateError"], [5, 5, 1, "", "ConditionError"], [5, 5, 1, "", "DofError"], [5, 5, 1, "", "EquilibriumError"]], "pycalphad.core.halton": [[5, 4, 1, "", "halton"]], "pycalphad.core.hyperplane": [[5, 4, 1, "", "hyperplane"], [5, 4, 1, "", "hyperplane_coefficients"], [5, 4, 1, "", "intersecting_point"]], "pycalphad.core.light_dataset": [[5, 1, 1, "", "LightDataset"]], "pycalphad.core.light_dataset.LightDataset": [[5, 2, 1, "", "add_variable"], [5, 3, 1, "", "attrs"], [5, 3, 1, "", "coords"], [5, 3, 1, "", "data_vars"], [5, 2, 1, "", "get_dataset"], [5, 2, 1, "", "merge"], [5, 2, 1, "", "remove"]], "pycalphad.core.lower_convex_hull": [[5, 4, 1, "", "lower_convex_hull"]], "pycalphad.core.minimizer": [[5, 1, 1, "", "CompsetState"], [5, 1, 1, "", "SystemSpecification"], [5, 1, 1, "", "SystemState"], [5, 4, 1, "", "advance_state"], [5, 4, 1, "", "chemical_potential_differential"], [5, 4, 1, "", "construct_equilibrium_system"], [5, 4, 1, "", "fixed_component_differential"], [5, 4, 1, "", "lstsq_check_infeasible"], [5, 4, 1, "", "site_fraction_differential"], [5, 4, 1, "", "solve_state"], [5, 4, 1, "", "state_variable_differential"]], "pycalphad.core.minimizer.SystemSpecification": [[5, 2, 1, "", "check_convergence"], [5, 2, 1, "", "get_new_state"], [5, 2, 1, "", "post_solve_hook"], [5, 2, 1, "", "pre_solve_hook"], [5, 2, 1, "", "run_loop"]], "pycalphad.core.minimizer.SystemState": [[5, 3, 1, "", "chemical_potentials"], [5, 3, 1, "", "compsets"], [5, 3, 1, "", "cs_states"], [5, 3, 1, "", "iteration"], [5, 2, 1, "", "recompute"]], "pycalphad.core.phase_rec": [[5, 1, 1, "", "FastFunction"], [5, 1, 1, "", "FastFunctionFactory"], [5, 1, 1, "", "PhaseRecord"]], "pycalphad.core.phase_rec.FastFunctionFactory": [[5, 2, 1, "", "get_cons_func"], [5, 2, 1, "", "get_cons_hess"], [5, 2, 1, "", "get_cons_jac"], [5, 2, 1, "", "get_cons_len"], [5, 2, 1, "", "get_mole_formula_func"], [5, 2, 1, "", "get_mole_formula_grad"], [5, 2, 1, "", "get_mole_formula_hess"], [5, 2, 1, "", "get_mole_fraction_func"], [5, 2, 1, "", "get_mole_fraction_grad"], [5, 2, 1, "", "get_mole_fraction_hess"]], "pycalphad.core.phase_rec.PhaseRecord": [[5, 3, 1, "", "components"], [5, 2, 1, "", "formulagrad"], [5, 2, 1, "", "formulahess"], [5, 2, 1, "", "formulamole_grad"], [5, 2, 1, "", "formulamole_hess"], [5, 2, 1, "", "formulamole_obj"], [5, 2, 1, "", "formulaobj"], [5, 3, 1, "", "function_factory"], [5, 2, 1, "", "internal_cons_func"], [5, 2, 1, "", "internal_cons_hess"], [5, 2, 1, "", "internal_cons_jac"], [5, 2, 1, "", "mass_obj"], [5, 2, 1, "", "mass_obj_2d"], [5, 3, 1, "", "molar_masses"], [5, 3, 1, "", "nonvacant_elements"], [5, 3, 1, "", "num_internal_cons"], [5, 3, 1, "", "num_statevars"], [5, 2, 1, "", "obj"], [5, 2, 1, "", "obj_2d"], [5, 2, 1, "", "obj_parameters_2d"], [5, 3, 1, "", "parameters"], [5, 3, 1, "", "phase_dof"], [5, 2, 1, "", "phase_local_cons_func"], [5, 2, 1, "", "phase_local_cons_jac"], [5, 3, 1, "", "phase_name"], [5, 3, 1, "", "phase_record_factory"], [5, 2, 1, "", "prop"], [5, 2, 1, "", "prop_2d"], [5, 2, 1, "", "prop_grad"], [5, 2, 1, "", "prop_parameters_2d"], [5, 3, 1, "", "pure_elements"], [5, 3, 1, "", "state_variables"], [5, 3, 1, "", "variables"]], "pycalphad.core.polytope": [[5, 4, 1, "", "affine_subspace"], [5, 4, 1, "", "chebyshev_center"], [5, 4, 1, "", "check_Ab"], [5, 4, 1, "", "constraints_from_bounds"], [5, 4, 1, "", "sample"]], "pycalphad.core.solver": [[5, 1, 1, "", "Solver"], [5, 1, 1, "", "SolverBase"], [5, 1, 1, "", "SolverResult"]], "pycalphad.core.solver.Solver": [[5, 2, 1, "", "get_system_spec"], [5, 2, 1, "", "solve"]], "pycalphad.core.solver.SolverBase": [[5, 3, 1, "", "ignore_convergence"], [5, 2, 1, "", "solve"]], "pycalphad.core.solver.SolverResult": [[5, 3, 1, "", "chemical_potentials"], [5, 3, 1, "", "converged"], [5, 3, 1, "", "x"]], "pycalphad.core.starting_point": [[5, 4, 1, "", "global_min_is_possible"], [5, 4, 1, "", "starting_point"]], "pycalphad.core.utils": [[5, 4, 1, "", "canonical_sort_key"], [5, 4, 1, "", "endmember_matrix"], [5, 4, 1, "", "extract_parameters"], [5, 4, 1, "", "filter_phases"], [5, 4, 1, "", "generate_dof"], [5, 4, 1, "", "generate_symmetric_group"], [5, 4, 1, "", "get_pure_elements"], [5, 4, 1, "", "get_state_variables"], [5, 4, 1, "", "instantiate_models"], [5, 4, 1, "", "point_sample"], [5, 4, 1, "", "recursive_tuplify"], [5, 4, 1, "", "sizeof_fmt"], [5, 4, 1, "", "unpack_condition"], [5, 4, 1, "", "unpack_kwarg"], [5, 4, 1, "", "unpack_phases"], [5, 4, 1, "", "unpack_species"], [5, 4, 1, "", "wrap_symbol"]], "pycalphad.core.workspace": [[5, 1, 1, "", "ComponentList"], [5, 1, 1, "", "ComponentsField"], [5, 1, 1, "", "ConditionKey"], [5, 1, 1, "", "ConditionValue"], [5, 1, 1, "", "ConditionsField"], [5, 1, 1, "", "ConstituentsField"], [5, 1, 1, "", "ConstituentsList"], [5, 1, 1, "", "DictField"], [5, 1, 1, "", "EquilibriumCalculationField"], [5, 1, 1, "", "ModelsField"], [5, 1, 1, "", "PRFField"], [5, 1, 1, "", "PhaseList"], [5, 1, 1, "", "PhaseName"], [5, 1, 1, "", "PhasesField"], [5, 1, 1, "", "SolverField"], [5, 1, 1, "", "TypedField"], [5, 1, 1, "", "Workspace"]], "pycalphad.core.workspace.ComponentList": [[5, 2, 1, "", "cast_from"]], "pycalphad.core.workspace.ComponentsField": [[5, 2, 1, "", "on_dependency_update"]], "pycalphad.core.workspace.ConditionKey": [[5, 2, 1, "", "cast_from"]], "pycalphad.core.workspace.ConditionValue": [[5, 2, 1, "", "cast_from"]], "pycalphad.core.workspace.ConstituentsField": [[5, 2, 1, "", "on_dependency_update"]], "pycalphad.core.workspace.ConstituentsList": [[5, 2, 1, "", "cast_from"]], "pycalphad.core.workspace.DictField": [[5, 2, 1, "", "get_proxy"]], "pycalphad.core.workspace.EquilibriumCalculationField": [[5, 2, 1, "", "on_dependency_update"]], "pycalphad.core.workspace.ModelsField": [[5, 2, 1, "", "on_dependency_update"]], "pycalphad.core.workspace.PRFField": [[5, 2, 1, "", "on_dependency_update"]], "pycalphad.core.workspace.PhaseList": [[5, 2, 1, "", "cast_from"]], "pycalphad.core.workspace.PhaseName": [[5, 2, 1, "", "cast_from"]], "pycalphad.core.workspace.SolverField": [[5, 2, 1, "", "on_dependency_update"]], "pycalphad.core.workspace.TypedField": [[5, 2, 1, "", "on_dependency_update"]], "pycalphad.core.workspace.Workspace": [[5, 3, 1, "", "calc_opts"], [5, 3, 1, "", "components"], [5, 6, 1, "", "condition_axis_order"], [5, 3, 1, "", "conditions"], [5, 3, 1, "", "constituents"], [5, 2, 1, "", "copy"], [5, 3, 1, "", "database"], [5, 2, 1, "", "enumerate_composition_sets"], [5, 3, 1, "", "eq"], [5, 2, 1, "", "get"], [5, 2, 1, "", "get_composition_sets"], [5, 2, 1, "", "get_dict"], [5, 3, 1, "", "models"], [5, 6, 1, "", "ndim"], [5, 3, 1, "", "parameters"], [5, 3, 1, "", "phase_record_factory"], [5, 3, 1, "", "phases"], [5, 2, 1, "", "recompute"], [5, 3, 1, "", "solver"], [5, 3, 1, "", "verbose"]], "pycalphad.io": [[6, 0, 0, "-", "cs_dat"], [6, 0, 0, "-", "database"], [6, 0, 0, "-", "grammar"], [6, 0, 0, "-", "tdb"], [6, 0, 0, "-", "tdb_keywords"]], "pycalphad.io.cs_dat": [[6, 1, 1, "", "AdditionalCoefficientPair"], [6, 1, 1, "", "Endmember"], [6, 1, 1, "", "EndmemberAqueous"], [6, 1, 1, "", "EndmemberMagnetic"], [6, 1, 1, "", "EndmemberQKTO"], [6, 1, 1, "", "EndmemberRealGas"], [6, 1, 1, "", "ExcessBase"], [6, 1, 1, "", "ExcessQKTO"], [6, 1, 1, "", "ExcessRKM"], [6, 1, 1, "", "ExcessRKMMagnetic"], [6, 1, 1, "", "Header"], [6, 1, 1, "", "IntervalBase"], [6, 1, 1, "", "IntervalCP"], [6, 1, 1, "", "IntervalG"], [6, 1, 1, "", "PTVmTerms"], [6, 1, 1, "", "PhaseBase"], [6, 1, 1, "", "Phase_Aqueous"], [6, 1, 1, "", "Phase_CEF"], [6, 1, 1, "", "Phase_RealGas"], [6, 1, 1, "", "Phase_SUBQ"], [6, 1, 1, "", "Phase_Stoichiometric"], [6, 1, 1, "", "SUBQExcessQuadruplet"], [6, 1, 1, "", "SUBQPair"], [6, 1, 1, "", "SUBQQuadrupletCoordinations"], [6, 1, 1, "", "TokenParser"], [6, 5, 1, "", "TokenParserError"], [6, 4, 1, "", "parse_PTVm_terms"], [6, 4, 1, "", "parse_additional_terms"], [6, 4, 1, "", "parse_cs_dat"], [6, 4, 1, "", "parse_endmember"], [6, 4, 1, "", "parse_endmember_aqueous"], [6, 4, 1, "", "parse_endmember_qkto"], [6, 4, 1, "", "parse_endmember_subq"], [6, 4, 1, "", "parse_excess_magnetic_parameters"], [6, 4, 1, "", "parse_excess_parameters"], [6, 4, 1, "", "parse_excess_parameters_pitz"], [6, 4, 1, "", "parse_excess_qkto"], [6, 4, 1, "", "parse_header"], [6, 4, 1, "", "parse_interval_Gibbs"], [6, 4, 1, "", "parse_interval_heat_capacity"], [6, 4, 1, "", "parse_phase"], [6, 4, 1, "", "parse_phase_aqueous"], [6, 4, 1, "", "parse_phase_cef"], [6, 4, 1, "", "parse_phase_real_gas"], [6, 4, 1, "", "parse_phase_subq"], [6, 4, 1, "", "parse_quadruplet"], [6, 4, 1, "", "parse_stoich_phase"], [6, 4, 1, "", "parse_subq_excess"], [6, 4, 1, "", "read_cs_dat"], [6, 4, 1, "", "rename_element_charge"], [6, 4, 1, "", "tokenize"]], "pycalphad.io.cs_dat.AdditionalCoefficientPair": [[6, 3, 1, "", "coefficient"], [6, 3, 1, "", "exponent"], [6, 2, 1, "", "expr"]], "pycalphad.io.cs_dat.Endmember": [[6, 2, 1, "", "constituent_array"], [6, 2, 1, "", "constituents"], [6, 2, 1, "", "expr"], [6, 3, 1, "", "gibbs_eq_type"], [6, 2, 1, "", "insert"], [6, 3, 1, "", "intervals"], [6, 2, 1, "", "species"], [6, 3, 1, "", "species_name"], [6, 3, 1, "", "stoichiometry_pure_elements"]], "pycalphad.io.cs_dat.EndmemberAqueous": [[6, 3, 1, "", "charge"], [6, 2, 1, "", "insert"]], "pycalphad.io.cs_dat.EndmemberMagnetic": [[6, 3, 1, "", "curie_temperature"], [6, 2, 1, "", "insert"], [6, 3, 1, "", "magnetic_moment"]], "pycalphad.io.cs_dat.EndmemberQKTO": [[6, 3, 1, "", "chemical_group"], [6, 2, 1, "", "insert"], [6, 3, 1, "", "stoichiometric_factor"]], "pycalphad.io.cs_dat.EndmemberRealGas": [[6, 3, 1, "", "Pc"], [6, 3, 1, "", "Tc"], [6, 3, 1, "", "Vc"], [6, 3, 1, "", "acentric_factor"], [6, 3, 1, "", "dipole_moment"], [6, 2, 1, "", "insert"]], "pycalphad.io.cs_dat.ExcessBase": [[6, 2, 1, "", "constituent_array"], [6, 2, 1, "", "insert"], [6, 3, 1, "", "interacting_species_idxs"]], "pycalphad.io.cs_dat.ExcessQKTO": [[6, 3, 1, "", "coefficients"], [6, 3, 1, "", "exponents"], [6, 2, 1, "", "expr"], [6, 2, 1, "", "insert"]], "pycalphad.io.cs_dat.ExcessRKM": [[6, 3, 1, "", "coefficients"], [6, 2, 1, "", "expr"], [6, 2, 1, "", "insert"], [6, 3, 1, "", "parameter_order"]], "pycalphad.io.cs_dat.ExcessRKMMagnetic": [[6, 3, 1, "", "curie_temperature"], [6, 2, 1, "", "insert"], [6, 3, 1, "", "magnetic_moment"], [6, 3, 1, "", "parameter_order"]], "pycalphad.io.cs_dat.Header": [[6, 3, 1, "", "excess_coefficient_idxs"], [6, 3, 1, "", "gibbs_coefficient_idxs"], [6, 3, 1, "", "list_soln_species_count"], [6, 3, 1, "", "num_stoich_phases"], [6, 3, 1, "", "pure_elements"], [6, 3, 1, "", "pure_elements_mass"]], "pycalphad.io.cs_dat.IntervalBase": [[6, 3, 1, "", "T_max"], [6, 2, 1, "", "cond"], [6, 2, 1, "", "expr"], [6, 2, 1, "", "expr_cond_pair"]], "pycalphad.io.cs_dat.IntervalCP": [[6, 3, 1, "", "CP_coefficients"], [6, 3, 1, "", "H298"], [6, 3, 1, "", "H_trans"], [6, 3, 1, "", "PTVm_terms"], [6, 3, 1, "", "S298"], [6, 3, 1, "", "additional_coeff_pairs"], [6, 2, 1, "", "expr"]], "pycalphad.io.cs_dat.IntervalG": [[6, 3, 1, "", "PTVm_terms"], [6, 3, 1, "", "additional_coeff_pairs"], [6, 3, 1, "", "coefficients"], [6, 2, 1, "", "expr"]], "pycalphad.io.cs_dat.PTVmTerms": [[6, 3, 1, "", "terms"]], "pycalphad.io.cs_dat.PhaseBase": [[6, 3, 1, "", "endmembers"], [6, 2, 1, "", "insert"], [6, 3, 1, "", "phase_name"], [6, 3, 1, "", "phase_type"]], "pycalphad.io.cs_dat.Phase_Aqueous": [[6, 3, 1, "", "endmembers"]], "pycalphad.io.cs_dat.Phase_CEF": [[6, 3, 1, "", "constituent_array"], [6, 3, 1, "", "endmember_constituent_idxs"], [6, 3, 1, "", "excess_parameters"], [6, 2, 1, "", "insert"], [6, 3, 1, "", "magnetic_afm_factor"], [6, 3, 1, "", "magnetic_structure_factor"], [6, 3, 1, "", "subl_ratios"]], "pycalphad.io.cs_dat.Phase_RealGas": [[6, 3, 1, "", "endmembers"]], "pycalphad.io.cs_dat.Phase_SUBQ": [[6, 3, 1, "", "chemical_group_overrides"], [6, 3, 1, "", "excess_parameters"], [6, 2, 1, "", "insert"], [6, 3, 1, "", "num_pairs"], [6, 3, 1, "", "num_quadruplets"], [6, 3, 1, "", "num_subl_1_const"], [6, 3, 1, "", "num_subl_2_const"], [6, 3, 1, "", "quadruplets"], [6, 3, 1, "", "subl_1_charges"], [6, 3, 1, "", "subl_1_chemical_groups"], [6, 3, 1, "", "subl_1_const"], [6, 3, 1, "", "subl_2_charges"], [6, 3, 1, "", "subl_2_chemical_groups"], [6, 3, 1, "", "subl_2_const"], [6, 3, 1, "", "subl_const_idx_pairs"]], "pycalphad.io.cs_dat.Phase_Stoichiometric": [[6, 2, 1, "", "insert"], [6, 3, 1, "", "magnetic_afm_factor"], [6, 3, 1, "", "magnetic_structure_factor"]], "pycalphad.io.cs_dat.SUBQExcessQuadruplet": [[6, 3, 1, "", "additional_anion_mixing_const"], [6, 3, 1, "", "additional_cation_mixing_const"], [6, 3, 1, "", "excess_coeffs"], [6, 2, 1, "", "expr"], [6, 2, 1, "", "insert"], [6, 3, 1, "", "metadata"], [6, 3, 1, "", "mixing_code"], [6, 3, 1, "", "mixing_const"], [6, 3, 1, "", "mixing_exponents"], [6, 3, 1, "", "mixing_type"]], "pycalphad.io.cs_dat.SUBQPair": [[6, 2, 1, "", "insert"], [6, 3, 1, "", "stoichiometry_quadruplet"], [6, 3, 1, "", "zeta"]], "pycalphad.io.cs_dat.SUBQQuadrupletCoordinations": [[6, 2, 1, "", "insert"], [6, 3, 1, "", "quadruplet_coordinations"], [6, 3, 1, "", "quadruplet_idxs"]], "pycalphad.io.cs_dat.TokenParser": [[6, 2, 1, "", "parse"], [6, 2, 1, "", "parseN"]], "pycalphad.io.database": [[6, 1, 1, "", "Database"], [6, 5, 1, "", "DatabaseExportError"], [6, 1, 1, "", "DatabaseFormat"], [6, 1, 1, "", "Phase"]], "pycalphad.io.database.Database": [[6, 2, 1, "", "add_parameter"], [6, 2, 1, "", "add_phase"], [6, 2, 1, "", "add_phase_constituents"], [6, 2, 1, "", "add_structure_entry"], [6, 2, 1, "", "cast_from"], [6, 3, 1, "", "elements"], [6, 2, 1, "", "from_file"], [6, 2, 1, "", "from_string"], [6, 3, 1, "", "phases"], [6, 2, 1, "", "process_parameter_queue"], [6, 3, 1, "", "references"], [6, 2, 1, "", "register_format"], [6, 2, 1, "", "search"], [6, 3, 1, "", "species"], [6, 3, 1, "", "symbols"], [6, 2, 1, "", "to_file"], [6, 2, 1, "", "to_string"]], "pycalphad.io.database.DatabaseFormat": [[6, 3, 1, "", "read"], [6, 3, 1, "", "write"]], "pycalphad.io.database.Phase": [[6, 3, 1, "", "constituents"], [6, 3, 1, "", "model_hints"], [6, 3, 1, "", "name"], [6, 3, 1, "", "sublattices"]], "pycalphad.io.grammar": [[6, 4, 1, "", "parse_chemical_formula"]], "pycalphad.io.tdb": [[6, 1, 1, "", "TCCommand"], [6, 1, 1, "", "TCPrinter"], [6, 4, 1, "", "add_phase_symmetry_ordering_parameters"], [6, 4, 1, "", "get_supported_variables"], [6, 4, 1, "", "read_tdb"], [6, 4, 1, "", "reflow_text"], [6, 4, 1, "", "to_interval"], [6, 4, 1, "", "write_tdb"]], "pycalphad.io.tdb.TCCommand": [[6, 2, 1, "", "parseImpl"]], "pycalphad.io.tdb.TCPrinter": [[6, 2, 1, "", "doprint"]], "pycalphad.io.tdb_keywords": [[6, 4, 1, "", "expand_keyword"]], "pycalphad.mapping": [[7, 0, 0, "-", "compat_api"], [7, 0, 0, "-", "plotting"], [7, 0, 0, "-", "primitives"], [7, 0, 0, "-", "starting_points"], [8, 0, 0, "-", "strategy"], [7, 0, 0, "-", "utils"], [7, 0, 0, "-", "zpf_checks"], [7, 0, 0, "-", "zpf_equilibrium"]], "pycalphad.mapping.compat_api": [[7, 4, 1, "", "binplot"], [7, 4, 1, "", "ternplot"]], "pycalphad.mapping.plotting": [[7, 4, 1, "", "get_label"], [7, 4, 1, "", "plot_binary"], [7, 4, 1, "", "plot_invariants"], [7, 4, 1, "", "plot_isopleth"], [7, 4, 1, "", "plot_step"], [7, 4, 1, "", "plot_ternary"], [7, 4, 1, "", "plot_tielines"]], "pycalphad.mapping.primitives": [[7, 1, 1, "", "Direction"], [7, 1, 1, "", "ExitHint"], [7, 1, 1, "", "Node"], [7, 1, 1, "", "NodeQueue"], [7, 5, 1, "", "NodesExhaustedError"], [7, 1, 1, "", "Point"], [7, 1, 1, "", "ZPFLine"], [7, 1, 1, "", "ZPFState"]], "pycalphad.mapping.primitives.Direction": [[7, 3, 1, "", "NEGATIVE"], [7, 3, 1, "", "POSITIVE"]], "pycalphad.mapping.primitives.ExitHint": [[7, 3, 1, "", "NORMAL"], [7, 3, 1, "", "POINT_IS_EXIT"]], "pycalphad.mapping.primitives.Node": [[7, 3, 1, "", "axis_direction"], [7, 3, 1, "", "axis_var"], [7, 3, 1, "", "exit_hint"], [7, 2, 1, "", "has_point_been_encountered"], [7, 3, 1, "", "parent"]], "pycalphad.mapping.primitives.NodeQueue": [[7, 2, 1, "", "add_node"], [7, 2, 1, "", "get_next_node"], [7, 2, 1, "", "is_empty"], [7, 2, 1, "", "size"]], "pycalphad.mapping.primitives.Point": [[7, 3, 1, "", "chemical_potentials"], [7, 2, 1, "", "compare_consider_fixed_cs"], [7, 2, 1, "", "create_copy"], [7, 6, 1, "", "fixed_composition_sets"], [7, 6, 1, "", "fixed_phases"], [7, 6, 1, "", "fixed_phases_with_multiplicity"], [7, 6, 1, "", "free_composition_sets"], [7, 6, 1, "", "free_phases"], [7, 6, 1, "", "free_phases_with_multiplicity"], [7, 2, 1, "", "get_local_property"], [7, 2, 1, "", "get_property"], [7, 3, 1, "", "global_conditions"], [7, 6, 1, "", "stable_composition_sets"], [7, 6, 1, "", "stable_composition_sets_flipped"], [7, 6, 1, "", "stable_phases"], [7, 6, 1, "", "stable_phases_with_multiplicity"], [7, 2, 1, "", "with_copy"]], "pycalphad.mapping.primitives.ZPFLine": [[7, 2, 1, "", "append"], [7, 3, 1, "", "axis_direction"], [7, 3, 1, "", "axis_var"], [7, 3, 1, "", "current_delta"], [7, 3, 1, "", "fixed_phases"], [7, 6, 1, "", "fixed_phases_with_multiplicity"], [7, 3, 1, "", "free_phases"], [7, 6, 1, "", "free_phases_with_multiplicity"], [7, 2, 1, "", "get_var_list"], [7, 2, 1, "", "num_fixed_phases"], [7, 2, 1, "", "num_free_phases"], [7, 3, 1, "", "points"], [7, 6, 1, "", "stable_phases"], [7, 6, 1, "", "stable_phases_with_multiplicity"], [7, 3, 1, "", "status"]], "pycalphad.mapping.primitives.ZPFState": [[7, 3, 1, "", "ATTEMPT_NEW_STEP"], [7, 3, 1, "", "FAILED"], [7, 3, 1, "", "NEW_NODE_FOUND"], [7, 3, 1, "", "NOT_FINISHED"], [7, 3, 1, "", "REACHED_LIMIT"]], "pycalphad.mapping.starting_points": [[7, 4, 1, "", "point_from_equilibrium"]], "pycalphad.mapping.strategy": [[8, 0, 0, "-", "binary_strategy"], [8, 0, 0, "-", "isopleth_strategy"], [8, 0, 0, "-", "step_strategy"], [8, 0, 0, "-", "strategy_base"], [8, 0, 0, "-", "strategy_data"], [8, 0, 0, "-", "ternary_strategy"]], "pycalphad.mapping.strategy.binary_strategy": [[8, 1, 1, "", "BinaryStrategy"]], "pycalphad.mapping.strategy.binary_strategy.BinaryStrategy": [[8, 2, 1, "", "add_starting_points_from_step"], [8, 2, 1, "", "generate_automatic_starting_points"], [8, 2, 1, "", "get_invariant_data"], [8, 2, 1, "", "get_tieline_data"]], "pycalphad.mapping.strategy.isopleth_strategy": [[8, 1, 1, "", "IsoplethStrategy"]], "pycalphad.mapping.strategy.isopleth_strategy.IsoplethStrategy": [[8, 2, 1, "", "add_starting_points_from_step"], [8, 2, 1, "", "generate_automatic_starting_points"], [8, 2, 1, "", "get_invariant_data"], [8, 2, 1, "", "get_zpf_data"]], "pycalphad.mapping.strategy.step_strategy": [[8, 1, 1, "", "StepStrategy"]], "pycalphad.mapping.strategy.step_strategy.StepStrategy": [[8, 2, 1, "", "generate_automatic_starting_points"], [8, 2, 1, "", "get_data"]], "pycalphad.mapping.strategy.strategy_base": [[8, 1, 1, "", "MapStrategy"]], "pycalphad.mapping.strategy.strategy_base.MapStrategy": [[8, 2, 1, "", "add_nodes_from_conditions"], [8, 2, 1, "", "do_map"], [8, 2, 1, "", "generate_automatic_starting_points"], [8, 2, 1, "", "get_all_phases"], [8, 2, 1, "", "iterate"], [8, 2, 1, "", "normalize_factor"]], "pycalphad.mapping.strategy.strategy_data": [[8, 3, 1, "", "PhaseRegionData"], [8, 1, 1, "", "SinglePhaseData"], [8, 1, 1, "", "StrategyData"], [8, 4, 1, "", "get_invariant_data_from_tieline_strategy"], [8, 4, 1, "", "get_tieline_data_from_tieline_strategy"]], "pycalphad.mapping.strategy.strategy_data.SinglePhaseData": [[8, 3, 1, "", "phase"], [8, 3, 1, "", "x"], [8, 3, 1, "", "y"]], "pycalphad.mapping.strategy.strategy_data.StrategyData": [[8, 3, 1, "", "data"], [8, 6, 1, "", "phases"], [8, 6, 1, "", "x"], [8, 3, 1, "", "xlim"], [8, 6, 1, "", "y"], [8, 3, 1, "", "ylim"]], "pycalphad.mapping.strategy.ternary_strategy": [[8, 1, 1, "", "TernaryStrategy"]], "pycalphad.mapping.strategy.ternary_strategy.TernaryStrategy": [[8, 2, 1, "", "add_starting_points_from_step"], [8, 2, 1, "", "generate_automatic_starting_points"], [8, 2, 1, "", "get_invariant_data"], [8, 2, 1, "", "get_tieline_data"]], "pycalphad.mapping.utils": [[7, 4, 1, "", "degrees_of_freedom"], [7, 4, 1, "", "get_statevars_array"], [7, 4, 1, "", "is_state_variable"], [7, 4, 1, "", "update_cs_phase_frac"]], "pycalphad.mapping.zpf_checks": [[7, 4, 1, "", "check_axis_values"], [7, 4, 1, "", "check_change_in_phases"], [7, 4, 1, "", "check_global_min"], [7, 4, 1, "", "check_similar_phase_composition"], [7, 4, 1, "", "check_valid_point"], [7, 4, 1, "", "simple_check_change_in_phases"], [7, 4, 1, "", "simple_check_global_min"], [7, 4, 1, "", "simple_check_valid_point"]], "pycalphad.mapping.zpf_equilibrium": [[7, 4, 1, "", "compute_derivative"], [7, 4, 1, "", "create_node_from_different_points"], [7, 4, 1, "", "find_global_min_point"], [7, 4, 1, "", "update_equilibrium_with_new_conditions"]], "pycalphad.model": [[3, 1, 1, "", "Model"], [3, 1, 1, "", "ReferenceState"], [3, 1, 1, "", "TestModel"], [3, 1, 1, "", "classproperty"]], "pycalphad.model.Model": [[3, 3, 1, "", "BMAG"], [3, 6, 1, "", "CPM"], [3, 6, 1, "", "CPM_MIX"], [3, 6, 1, "", "DOO"], [3, 6, 1, "", "G"], [3, 6, 1, "", "GM"], [3, 6, 1, "", "GM_MIX"], [3, 6, 1, "", "H"], [3, 6, 1, "", "HM"], [3, 6, 1, "", "HM_MIX"], [3, 3, 1, "", "NT"], [3, 6, 1, "", "SM"], [3, 6, 1, "", "SM_MIX"], [3, 3, 1, "", "TC"], [3, 6, 1, "", "ast"], [3, 2, 1, "", "atomic_ordering_energy"], [3, 3, 1, "", "beta"], [3, 2, 1, "", "build_phase"], [3, 3, 1, "", "constituents"], [3, 3, 1, "", "contributions"], [3, 3, 1, "", "curie_temperature"], [3, 6, 1, "", "degree_of_ordering"], [3, 2, 1, "", "einstein_energy"], [3, 6, 1, "", "endmember_reference_model"], [3, 6, 1, "", "energy"], [3, 6, 1, "", "enthalpy"], [3, 6, 1, "", "entropy"], [3, 2, 1, "", "excess_mixing_energy"], [3, 3, 1, "", "extrapolate_temperature_bounds"], [3, 6, 1, "", "formulaenergy"], [3, 6, 1, "", "formulaenthalpy"], [3, 2, 1, "", "get_internal_constraints"], [3, 3, 1, "", "gradient"], [3, 6, 1, "", "heat_capacity"], [3, 2, 1, "", "ideal_mixing_energy"], [3, 2, 1, "", "kohler_toop_excess_sum"], [3, 2, 1, "", "magnetic_energy"], [3, 6, 1, "", "mixing_energy"], [3, 6, 1, "", "mixing_enthalpy"], [3, 6, 1, "", "mixing_entropy"], [3, 6, 1, "", "mixing_heat_capacity"], [3, 2, 1, "", "moles"], [3, 3, 1, "", "neel_temperature"], [3, 2, 1, "", "redlich_kister_sum"], [3, 2, 1, "", "reference_energy"], [3, 2, 1, "", "shift_reference_state"], [3, 2, 1, "", "symbol_replace"], [3, 2, 1, "", "twostate_energy"], [3, 2, 1, "", "unwrap_piecewise"], [3, 6, 1, "", "variables"], [3, 2, 1, "", "volume_energy"], [3, 2, 1, "", "xiong_magnetic_energy"]], "pycalphad.model.ReferenceState": [[3, 3, 1, "", "fixed_statevars"], [3, 3, 1, "", "phase_name"], [3, 3, 1, "", "species"]], "pycalphad.models": [[9, 0, 0, "-", "model_mqmqa"]], "pycalphad.models.model_mqmqa": [[9, 1, 1, "", "ModelMQMQA"]], "pycalphad.models.model_mqmqa.ModelMQMQA": [[9, 3, 1, "", "BMAG"], [9, 6, 1, "", "CPM"], [9, 6, 1, "", "CPM_MIX"], [9, 3, 1, "", "DOO"], [9, 6, 1, "", "G"], [9, 6, 1, "", "GM"], [9, 6, 1, "", "GM_MIX"], [9, 6, 1, "", "HM"], [9, 6, 1, "", "HM_MIX"], [9, 3, 1, "", "NT"], [9, 6, 1, "", "SM"], [9, 6, 1, "", "SM_MIX"], [9, 3, 1, "", "TC"], [9, 2, 1, "", "Z"], [9, 6, 1, "", "ast"], [9, 3, 1, "", "beta"], [9, 2, 1, "", "build_phase"], [9, 3, 1, "", "contributions"], [9, 3, 1, "", "curie_temperature"], [9, 3, 1, "", "degree_of_ordering"], [9, 6, 1, "", "energy"], [9, 6, 1, "", "enthalpy"], [9, 6, 1, "", "entropy"], [9, 2, 1, "", "excess_mixing_energy"], [9, 2, 1, "", "get_internal_constraints"], [9, 6, 1, "", "heat_capacity"], [9, 2, 1, "", "ideal_mixing_energy"], [9, 6, 1, "", "mixing_energy"], [9, 6, 1, "", "mixing_enthalpy"], [9, 6, 1, "", "mixing_entropy"], [9, 6, 1, "", "mixing_heat_capacity"], [9, 2, 1, "", "moles"], [9, 3, 1, "", "neel_temperature"], [9, 6, 1, "", "normalization"], [9, 2, 1, "", "reference_energy"], [9, 6, 1, "", "reference_model"], [9, 2, 1, "", "shift_reference_state"], [9, 6, 1, "", "site_fractions"], [9, 6, 1, "", "state_variables"], [9, 2, 1, "", "symbol_replace"]], "pycalphad.plot": [[11, 0, 0, "-", "binary"], [10, 0, 0, "-", "eqplot"], [10, 0, 0, "-", "ternary"], [10, 0, 0, "-", "triangular"], [10, 0, 0, "-", "utils"]], "pycalphad.plot.binary": [[11, 0, 0, "-", "compsets"], [11, 0, 0, "-", "map"], [11, 0, 0, "-", "plot"], [11, 0, 0, "-", "zpf_boundary_sets"]], "pycalphad.plot.binary.compsets": [[11, 1, 1, "", "BinaryCompset"], [11, 1, 1, "", "CompsetPair"], [11, 4, 1, "", "find_two_phase_region_compsets"], [11, 4, 1, "", "get_compsets"]], "pycalphad.plot.binary.compsets.BinaryCompset": [[11, 3, 1, "", "SITE_FRAC_ATOL"], [11, 3, 1, "", "TEMPERATURE_ATOL"], [11, 2, 1, "", "from_dataset_vertices"]], "pycalphad.plot.binary.compsets.CompsetPair": [[11, 2, 1, "", "Tdiscrepancy"], [11, 3, 1, "", "a"], [11, 3, 1, "", "b"], [11, 3, 1, "", "compositions"], [11, 3, 1, "", "compsets"], [11, 3, 1, "", "max_composition"], [11, 3, 1, "", "mean_composition"], [11, 3, 1, "", "min_composition"], [11, 2, 1, "", "pairwise_xdiscrepancy"], [11, 3, 1, "", "phases"], [11, 3, 1, "", "same_phase"], [11, 3, 1, "", "temperature"], [11, 3, 1, "", "unique_phases"], [11, 2, 1, "", "xdiscrepancy"], [11, 2, 1, "", "ydiscrepancy"], [11, 2, 1, "", "ydiscrepancy_max"]], "pycalphad.plot.binary.map": [[11, 4, 1, "", "map_binary"]], "pycalphad.plot.binary.plot": [[11, 4, 1, "", "binplot"], [11, 4, 1, "", "plot_boundaries"]], "pycalphad.plot.binary.zpf_boundary_sets": [[11, 1, 1, "", "TwoPhaseRegion"], [11, 1, 1, "", "ZPFBoundarySets"]], "pycalphad.plot.binary.zpf_boundary_sets.TwoPhaseRegion": [[11, 2, 1, "", "add_compsets"], [11, 3, 1, "", "compsets"], [11, 2, 1, "", "compsets_belong_in_region"], [11, 3, 1, "", "phases"]], "pycalphad.plot.binary.zpf_boundary_sets.ZPFBoundarySets": [[11, 2, 1, "", "add_compsets"], [11, 3, 1, "", "all_compsets"], [11, 3, 1, "", "components"], [11, 2, 1, "", "get_line_plot_boundaries"], [11, 2, 1, "", "get_phases"], [11, 2, 1, "", "get_scatter_plot_boundaries"], [11, 3, 1, "", "indep_comp_cond"], [11, 2, 1, "", "rebuild_two_phase_regions"], [11, 3, 1, "", "two_phase_regions"]], "pycalphad.plot.eqplot": [[10, 4, 1, "", "eqplot"]], "pycalphad.plot.ternary": [[10, 4, 1, "", "ternplot"]], "pycalphad.plot.triangular": [[10, 1, 1, "", "TriangularAxes"]], "pycalphad.plot.triangular.TriangularAxes": [[10, 2, 1, "", "can_zoom"], [10, 2, 1, "", "clear"], [10, 2, 1, "", "drag_pan"], [10, 2, 1, "", "end_pan"], [10, 2, 1, "", "get_xaxis_text1_transform"], [10, 2, 1, "", "get_xaxis_text2_transform"], [10, 2, 1, "", "get_xaxis_transform"], [10, 2, 1, "", "get_yaxis_text1_transform"], [10, 2, 1, "", "get_yaxis_text2_transform"], [10, 2, 1, "", "get_yaxis_transform"], [10, 3, 1, "", "name"], [10, 2, 1, "", "set"], [10, 2, 1, "", "set_ylabel"], [10, 2, 1, "", "start_pan"]], "pycalphad.plot.utils": [[10, 4, 1, "", "phase_legend"]], "pycalphad.property_framework": [[12, 0, 0, "-", "computed_property"], [12, 0, 0, "-", "metaproperties"], [12, 0, 0, "-", "types"], [12, 0, 0, "-", "tzero"], [12, 0, 0, "-", "units"]], "pycalphad.property_framework.computed_property": [[12, 1, 1, "", "JanssonDerivative"], [12, 1, 1, "", "LinearCombination"], [12, 1, 1, "", "ModelComputedProperty"], [12, 4, 1, "", "as_property"]], "pycalphad.property_framework.computed_property.JanssonDerivative": [[12, 2, 1, "", "compute_property"], [12, 6, 1, "", "display_name"], [12, 6, 1, "", "display_units"], [12, 6, 1, "", "implementation_units"], [12, 6, 1, "", "shape"]], "pycalphad.property_framework.computed_property.LinearCombination": [[12, 2, 1, "", "compute_property"], [12, 3, 1, "", "display_units"], [12, 3, 1, "", "implementation_units"], [12, 6, 1, "", "shape"]], "pycalphad.property_framework.computed_property.ModelComputedProperty": [[12, 2, 1, "", "compute_property"], [12, 2, 1, "", "expand_wildcard"], [12, 2, 1, "", "jansson_derivative"], [12, 6, 1, "", "multiplicity"], [12, 6, 1, "", "shape"]], "pycalphad.property_framework.metaproperties": [[12, 1, 1, "", "DormantPhase"], [12, 1, 1, "", "DrivingForce"], [12, 1, 1, "", "IsolatedPhase"], [12, 1, 1, "", "ReferenceState"], [12, 4, 1, "", "find_first_compset"]], "pycalphad.property_framework.metaproperties.DormantPhase": [[12, 6, 1, "", "driving_force"], [12, 3, 1, "", "max_iterations"]], "pycalphad.property_framework.metaproperties.DrivingForce": [[12, 2, 1, "", "compute_property"], [12, 3, 1, "", "display_name"], [12, 3, 1, "", "display_units"], [12, 2, 1, "", "expand_wildcard"], [12, 2, 1, "", "filtered"], [12, 3, 1, "", "implementation_units"], [12, 2, 1, "", "jansson_derivative"], [12, 6, 1, "", "multiplicity"], [12, 3, 1, "", "phase_name"], [12, 6, 1, "", "phase_name_without_suffix"], [12, 6, 1, "", "shape"]], "pycalphad.property_framework.metaproperties.IsolatedPhase": [[12, 6, 1, "", "driving_force"]], "pycalphad.property_framework.types": [[12, 1, 1, "", "ComputableProperty"], [12, 1, 1, "", "ConditionableComputableProperty"], [12, 1, 1, "", "DifferentiableComputableProperty"], [12, 1, 1, "", "JanssonDerivativeDeltas"]], "pycalphad.property_framework.types.ComputableProperty": [[12, 2, 1, "", "compute_property"], [12, 3, 1, "", "display_units"], [12, 3, 1, "", "implementation_units"], [12, 6, 1, "", "shape"]], "pycalphad.property_framework.types.ConditionableComputableProperty": [[12, 2, 1, "", "jansson_deltas"]], "pycalphad.property_framework.types.DifferentiableComputableProperty": [[12, 2, 1, "", "jansson_derivative"]], "pycalphad.property_framework.types.JanssonDerivativeDeltas": [[12, 3, 1, "", "delta_chemical_potentials"], [12, 3, 1, "", "delta_parameters"], [12, 3, 1, "", "delta_phase_amounts"], [12, 3, 1, "", "delta_sitefracs"], [12, 3, 1, "", "delta_statevars"]], "pycalphad.property_framework.tzero": [[12, 1, 1, "", "T0"], [12, 4, 1, "", "find_first_compset"]], "pycalphad.property_framework.tzero.T0": [[12, 2, 1, "", "compute_property"], [12, 6, 1, "", "display_units"], [12, 6, 1, "", "implementation_units"], [12, 3, 1, "", "maximum_iterations"], [12, 3, 1, "", "maximum_value"], [12, 3, 1, "", "minimum_value"], [12, 3, 1, "", "property_to_optimize"], [12, 3, 1, "", "residual_tol"], [12, 6, 1, "", "shape"], [12, 3, 1, "", "solver"]], "pycalphad.property_framework.units": [[12, 4, 1, "", "as_quantity"], [12, 4, 1, "", "unit_conversion_context"]], "pycalphad.variables": [[3, 1, 1, "", "ChemicalPotential"], [3, 1, 1, "", "Component"], [3, 1, 1, "", "IndependentPotential"], [3, 3, 1, "", "MU"], [3, 1, 1, "", "MassFraction"], [3, 1, 1, "", "MoleFraction"], [3, 3, 1, "", "NP"], [3, 1, 1, "", "PhaseFraction"], [3, 1, 1, "", "PressureType"], [3, 1, 1, "", "SiteFraction"], [3, 1, 1, "", "Species"], [3, 1, 1, "", "StateVariable"], [3, 1, 1, "", "SystemMolesType"], [3, 1, 1, "", "TemperatureType"], [3, 3, 1, "", "W"], [3, 3, 1, "", "X"], [3, 3, 1, "", "Y"], [3, 4, 1, "", "get_mass_fractions"], [3, 4, 1, "", "get_mole_fractions"], [3, 3, 1, "", "site_fraction"], [3, 4, 1, "", "unpack_components"]], "pycalphad.variables.ChemicalPotential": [[3, 2, 1, "", "compute_property"], [3, 6, 1, "", "display_name"], [3, 3, 1, "", "display_units"], [3, 2, 1, "", "expand_wildcard"], [3, 3, 1, "", "implementation_units"], [3, 2, 1, "", "jansson_deltas"], [3, 2, 1, "", "jansson_derivative"]], "pycalphad.variables.Component": [[3, 2, 1, "", "cast_from"], [3, 3, 1, "", "constituents"], [3, 6, 1, "", "escaped_name"], [3, 3, 1, "", "name"], [3, 6, 1, "", "number_of_atoms"]], "pycalphad.variables.MassFraction": [[3, 2, 1, "", "compute_property"], [3, 3, 1, "", "display_units"], [3, 2, 1, "", "expand_wildcard"], [3, 3, 1, "", "implementation_units"]], "pycalphad.variables.MoleFraction": [[3, 2, 1, "", "compute_per_phase_property"], [3, 2, 1, "", "compute_property"], [3, 2, 1, "", "compute_property_gradient"], [3, 3, 1, "", "display_units"], [3, 2, 1, "", "expand_wildcard"], [3, 3, 1, "", "implementation_units"], [3, 2, 1, "", "jansson_deltas"], [3, 2, 1, "", "jansson_derivative"]], "pycalphad.variables.PhaseFraction": [[3, 2, 1, "", "compute_property"], [3, 3, 1, "", "display_units"], [3, 2, 1, "", "expand_wildcard"], [3, 3, 1, "", "implementation_units"], [3, 2, 1, "", "jansson_derivative"]], "pycalphad.variables.PressureType": [[3, 3, 1, "", "display_name"], [3, 3, 1, "", "display_units"], [3, 3, 1, "", "implementation_units"]], "pycalphad.variables.SiteFraction": [[3, 2, 1, "", "compute_property"], [3, 3, 1, "", "display_units"], [3, 2, 1, "", "expand_wildcard"], [3, 3, 1, "", "implementation_units"]], "pycalphad.variables.Species": [[3, 2, 1, "", "cast_from"], [3, 3, 1, "", "charge"], [3, 3, 1, "", "constituents"], [3, 6, 1, "", "escaped_name"], [3, 3, 1, "", "name"], [3, 6, 1, "", "number_of_atoms"], [3, 6, 1, "", "weight"]], "pycalphad.variables.StateVariable": [[3, 2, 1, "", "compute_property"], [3, 6, 1, "", "display_name"], [3, 3, 1, "", "display_units"], [3, 2, 1, "", "filtered"], [3, 3, 1, "", "implementation_units"], [3, 6, 1, "", "is_global_property"], [3, 2, 1, "", "jansson_deltas"], [3, 2, 1, "", "jansson_derivative"], [3, 6, 1, "", "multiplicity"], [3, 6, 1, "", "phase_name_without_suffix"], [3, 6, 1, "", "shape"]], "pycalphad.variables.SystemMolesType": [[3, 3, 1, "", "display_name"], [3, 3, 1, "", "display_units"], [3, 3, 1, "", "implementation_units"]], "pycalphad.variables.TemperatureType": [[3, 3, 1, "", "display_name"], [3, 3, 1, "", "display_units"], [3, 3, 1, "", "implementation_units"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "property", "Python property"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:property"}, "terms": {"": [3, 5, 14, 15, 16, 17, 18, 21, 23, 24, 25, 28, 29, 30], "0": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30], "00": [14, 18, 20, 24], "00000000e": 24, "000000e": 20, "00000e": 25, "000281": 25, "00049": 13, "000657": 25, "0007": 14, "001": [3, 9, 11], "00165358": 24, "002": 3, "004": [13, 14], "00474": 25, "005": [11, 21, 22], "006": 13, "007": 25, "008": 14, "00e": 18, "01": [3, 6, 12, 13, 14, 15, 16, 18, 19, 20, 24, 28], "011": 14, "013": [23, 25], "013e": 24, "015": 23, "01e": 24, "02": [13, 19, 20, 25, 28, 29], "0230": 9, "029": 0, "03": [18, 24, 25, 28], "031": 25, "0364": 14, "037243": 20, "04": [3, 20, 23, 24, 28], "0482": 21, "05": [7, 11, 24, 28], "06": [20, 25, 28], "065e": 24, "068e": 24, "07": [24, 28], "07t15": 24, "08": [13, 20, 28], "08165": 5, "09": [11, 25, 28], "0x1f44ba92120": 15, "0x7f0d36725d80": 20, "0x7f4b451cf820": 21, "0x7f7c66b33940": 16, "0x7f7c66b6ceb0": 16, "1": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30], "10": [3, 5, 8, 9, 10, 11, 13, 14, 15, 16, 19, 20, 21, 23, 24, 25, 28], "100": [5, 24], "1000": [8, 13, 19, 20, 24, 25], "1000k": 24, "1001": 18, "1007": 9, "101": 0, "101325": [3, 5, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "1013325": 21, "1016": [0, 3, 9, 11, 13, 14, 23, 25], "10195": 14, "1023": 21, "102330": 19, "102341": 9, "102934": 29, "104": 0, "1043": [16, 20], "105": [25, 29], "1054": 14, "1073": 21, "1073k": 21, "108": 0, "109": 3, "1094841": 5, "11": [16, 17, 21, 23, 28], "111": 0, "11363636": 23, "11369": 14, "1154": 21, "116": [0, 19], "11622": 14, "117": 0, "118": 14, "119": [3, 13, 25], "12": [14, 17, 18, 28], "12072782e": 24, "12300": 25, "124": 0, "1250": [16, 20], "127": [0, 13], "128": 25, "128kb": 24, "129": 14, "1296": 5, "13": [16, 25, 28, 29], "1300": 25, "1308": 5, "1323": 23, "133": 14, "135": 0, "136": 0, "1360": 23, "1360k": 23, "137": 0, "1394": [4, 20], "14": [1, 24, 28, 29], "140": [0, 28], "1400": 16, "1409": 9, "140x7": 5, "141": 0, "1416": 9, "144": 0, "145": 0, "146": 0, "15": [3, 12, 14, 15, 22, 23, 24], "150": 15, "1519": 20, "160b": 24, "161": 0, "163": 14, "1633": 20, "166": 0, "16b": 24, "17": [25, 28], "1700": 20, "170949": 5, "1710": 5, "171542": 20, "175": 0, "177": 0, "1770": 23, "18": [3, 11, 21, 25, 28], "180": 0, "1800": 16, "18080271": 24, "180921": 20, "184": 0, "187": 0, "19": [5, 28], "191596": 20, "192": 0, "192kb": 24, "193": 0, "194e": 24, "196": 0, "1970": 21, "1984": 5, "1990": 21, "1991": [0, 3], "1993": 21, "1d": [0, 5, 11, 13, 17], "1e": [5, 7, 8, 13, 18, 19, 24], "1e5": [14, 15], "1k": 14, "1m": 5, "2": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30], "20": [5, 8, 13, 16, 24, 28], "200": [0, 5], "2000": [5, 6, 13, 14, 15, 16, 19], "200000e": 20, "2000k": 14, "2001": 9, "2002": 3, "2005": 3, "2007": 3, "2008": 3, "200m": 27, "2010": 14, "2011": 23, "2012": [0, 3], "2013": 25, "2014": [11, 25], "2015": [11, 28], "2016": [23, 25, 28], "2017": [25, 28], "2018": [5, 28], "2019": 28, "2020": [4, 28], "2021": [9, 19, 28], "2021b": 0, "2022": 28, "2023": 28, "2024": [24, 28], "2025": 28, "205": 0, "208": 29, "209": 0, "21": 28, "2100": 25, "2128": 25, "214": 0, "21500": 25, "217": 0, "22": 28, "220": 0, "223": 0, "23": 28, "2320": 21, "234": 0, "237": 0, "239": 0, "23kb": 24, "24": [0, 6], "240": 0, "240543628600637": 25, "241": 0, "242": 0, "248": 0, "249": 0, "24b": 24, "25": [13, 14, 16, 28], "2500": 16, "251": 0, "254": 0, "2561": 24, "257": 0, "258": 0, "2585": 25, "26": [11, 19, 28], "262": 0, "263": 0, "264": 0, "266": 0, "267": 0, "269": 0, "27": 14, "270": [0, 25], "272": 0, "273": [0, 15], "274": 0, "275310": 20, "27565": 14, "279": 13, "2797": 14, "28": [14, 23, 28], "2800": [17, 18, 22], "281": 0, "282": 0, "288": 0, "289": 0, "289523": 20, "29": [3, 13, 28], "292": 0, "294": 4, "295": 0, "297": 0, "298": [0, 3, 12, 13, 22], "2d": [0, 5, 11, 18], "2kb": 24, "2st": 3, "3": [3, 5, 6, 7, 8, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 28, 29], "30": [0, 5], "300": [13, 15, 16, 19, 20], "303": 13, "306318": 20, "308": 0, "31": 28, "311": [0, 13], "312": 0, "3121": 25, "3145": 25, "315": 21, "316": 0, "31818182": 23, "32": [0, 3, 5, 9, 24], "325": 0, "327": 0, "328": 0, "329": 0, "33": [5, 23], "330": 0, "331": 0, "332": 0, "333": 0, "333e": 14, "334": 0, "335": 0, "336": 0, "339": 0, "34": [14, 19, 29], "340": 0, "341": 0, "343": 0, "344": 0, "346": 0, "348": 0, "3495": 20, "3496": 20, "3497": 20, "3498": 20, "3499": 20, "35": 23, "3500": [13, 20], "351": 0, "3550": 21, "3555": 20, "357": 0, "358": 0, "35995184": 24, "36": 25, "360": 0, "361": [0, 3], "362": 0, "364": 0, "365": 0, "367": 0, "3674": 20, "368": 0, "37": 0, "370": [0, 3], "373": 0, "3733": 20, "374": 0, "376": 0, "376195": 20, "3765": 21, "3774": 20, "3798": 25, "38": 0, "3808": 20, "386": 0, "389": 0, "39": [14, 15, 16, 20, 23, 24, 25], "392": [0, 25], "395316": 20, "397": 0, "3a": 3, "4": [3, 5, 6, 7, 8, 13, 14, 15, 16, 19, 20, 21, 23, 24, 25, 28], "40": 0, "400": [0, 16], "400000e": 20, "4002": 24, "405": 0, "406": 0, "40b": 24, "41": 13, "410": 0, "411": 21, "412": 0, "415": 0, "416": 0, "418": 21, "419738": 20, "419774": 20, "421": 25, "424": 0, "428": 0, "43": [0, 14, 29], "43004350e": 24, "431": 0, "432": 0, "43933641e": 24, "44": 25, "4489": 14, "45": 24, "451": [13, 21], "455": [13, 21], "456": 0, "46": 0, "461": 25, "466": 0, "468476": 20, "47": [0, 25], "470": 0, "476": 0, "47637": 14, "478971": 20, "479": 0, "48": [11, 25], "480b": 24, "485": 14, "49": 24, "495": 0, "498": 0, "5": [3, 5, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 28], "50": [5, 12, 16], "500": [5, 7, 8, 16, 19, 24], "5000": 17, "501": 0, "504407": 20, "5045": 21, "507": 0, "508": 0, "50th": 24, "51": 25, "512kb": 24, "516": 0, "517": 0, "518": 0, "522": 0, "523": 0, "523829": 20, "528e": 24, "530": 0, "5305": 25, "531": 0, "533": 0, "5334": [0, 28], "534": 0, "536": 0, "537": 0, "53768": 20, "537709263": 14, "538": 0, "53910096": 24, "53989": 20, "54": 23, "541": 0, "5411": 21, "54123": 20, "54199": 20, "54233": 20, "543": 0, "545": 0, "546": 0, "54769": 20, "54895": 20, "54986": 20, "54991": 20, "55": [5, 14, 15], "550": 0, "55028": 20, "552": 0, "554": 0, "558": 0, "559e": 24, "560": 0, "56066359e": 24, "563": 0, "564": 0, "56818182": 23, "56995650e": 24, "57": 0, "578078": 5, "581": 0, "58262": 20, "58354": 20, "58385": 20, "584": 0, "58409": 20, "58424": 20, "59": 14, "590527": 14, "5916": [13, 14], "595": 0, "599": 0, "599856": 24, "5kb": 24, "6": [3, 5, 6, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 28], "60": [10, 17, 25], "600": [20, 24], "6000": [12, 14], "600000e": 20, "602": 0, "605": 0, "605675": 20, "61": 23, "6125": 25, "615": 0, "615e": 24, "616338": 20, "62": 0, "622": 0, "627": 0, "63": 0, "630291": 20, "64": 0, "641259263": 14, "6433": 21, "647246": 14, "6488": 25, "64kb": 24, "6549": 21, "670187": 20, "685094": 20, "690": 14, "693811": 20, "7": [5, 9, 13, 15, 16, 24, 25, 27, 28, 29], "70": 29, "700": [15, 16, 24], "717990": 20, "71825009": 24, "71828182845905": 25, "73": 23, "7352": 21, "7423": 14, "74232": 14, "74e": 25, "75": [9, 16, 19, 25], "750": 16, "752790": 20, "760080": 20, "761325": 20, "766288": 20, "78": 6, "795230": 20, "7kb": 24, "8": [3, 5, 6, 14, 16, 19, 20, 21, 23, 24, 25, 27, 28], "80": [0, 6], "800": [15, 24], "8000": 29, "800000e": 20, "800b": 24, "8070": 21, "81e": 24, "830": [17, 23], "830k": 17, "8384": 21, "84": [13, 21], "84400745685": 25, "847": 14, "8485": 25, "8496": 20, "85": [0, 24], "8512": 25, "854312": 20, "8549": 20, "8564": 20, "8573": 20, "859e": 24, "86": [5, 23], "860754": 14, "87927218e": 24, "895": 25, "89739922": 24, "8b": 24, "9": [13, 15, 16, 17, 18, 20, 22, 23, 24, 25, 28], "90": 0, "900": 24, "91": 0, "92": 20, "937746": 14, "94": 20, "949887637": 14, "95": 24, "9531": 21, "955825": 20, "9569": 21, "96": 20, "97648824": 24, "97e": 25, "98": [0, 20], "98150e": 25, "98e": 18, "990": 20, "99e": 18, "9a": 25, "A": [0, 1, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 18, 21, 24, 25, 28], "As": [6, 7, 13, 29], "At": 29, "By": [1, 4, 7, 10, 11, 19, 22, 23, 24], "For": [0, 3, 5, 7, 8, 10, 11, 16, 19, 20, 24, 25], "IF": 0, "If": [0, 1, 3, 4, 5, 6, 7, 8, 10, 11, 13, 18, 28, 29, 30], "In": [0, 3, 5, 8, 9, 11, 14, 16, 18, 21, 24, 29], "It": [0, 1, 3, 5, 7, 9, 17, 24], "NOT": 30, "No": [3, 7, 22], "Not": 7, "ONE": 12, "One": 7, "THEN": 0, "THESE": 30, "That": [3, 5], "The": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30], "Then": [1, 5, 17, 29], "There": [0, 8, 16, 24], "These": [0, 4, 5, 13, 30], "To": [1, 3, 5, 7, 13, 16, 18, 29, 30], "Will": 5, "_": [6, 9], "__repr__": 0, "__wrapped__": 5, "_array_valid": [0, 25], "_build": 29, "_check_change_in_phas": 7, "_check_global_min": 7, "_compute_phase_valu": 0, "_eqcalcul": 0, "_et": 9, "_fixed_composition_set": 7, "_free_composition_set": 7, "_get_lambdify_opt": 4, "_hashedseq": 5, "_latex": 15, "_map_const_idxs_to_subl_idx": 6, "_mix": [0, 3, 26, 28], "_nestedsequ": 12, "_sample_phase_constitut": 0, "_supportsarrai": 12, "a1": 5, "a2": [5, 16], "ab": [5, 9, 15], "abbrevi": [0, 6], "abil": 25, "abl": [8, 29], "about": [5, 11, 16, 25, 28], "abov": [0, 5, 16, 18, 29], "abrupt": 16, "abruptli": 16, "absenc": 24, "absolut": [0, 11, 22], "abspath": 13, "abstract": [3, 6, 9], "academ": 3, "accept": 5, "access": [0, 5, 12, 24, 25, 29], "accommod": 0, "accord": 0, "account": [6, 7], "accuraci": 0, "acentric_factor": [3, 6], "achiev": 5, "acknowledg": 0, "acr": 21, "acr_zn": 21, "across": 18, "action": [0, 29, 30], "activ": [0, 1, 5, 13, 15, 26, 28], "activategit": 1, "activatepip": 1, "active_comp": 5, "activest": 5, "actual": [3, 8, 24, 29], "ad": [0, 6, 7, 8, 11, 23, 27], "add": [0, 3, 5, 6, 7, 8, 9, 10, 11, 21, 23, 25, 29, 30], "add_collect": 11, "add_compset": [10, 11], "add_nearly_st": [3, 5], "add_new_phas": [3, 5], "add_nod": [3, 7], "add_nodes_from_condit": [7, 8, 23], "add_paramet": [3, 6], "add_phas": [3, 6], "add_phase_constitu": [3, 6], "add_phase_symmetry_ordering_paramet": [3, 6], "add_refer": [0, 25], "add_starting_points_from_step": [7, 8], "add_structure_entri": [3, 6], "add_subplot": [15, 16, 17, 20], "add_vari": [3, 5], "addit": [0, 5, 6, 7, 11, 12, 14, 17, 19, 24, 29], "additional_anion_mixing_const": [3, 6], "additional_cation_mixing_const": [3, 6], "additional_coeff_pair": [3, 6], "additionalcoefficientpair": [3, 6], "address": [0, 28], "adjust": [0, 3, 6, 8, 9], "advanc": [0, 28], "advance_st": [3, 5], "affect": [7, 18], "affin": 5, "affine_subspac": [3, 5], "after": [0, 3, 5, 7, 9, 25, 29, 30], "again": [0, 5, 7], "against": [5, 6], "al": [0, 3, 5, 9, 11, 17, 19, 20, 21, 23, 24, 25, 26, 28], "al13fe4": 13, "al2f": 13, "al5fe2": 13, "al5fe4": 13, "alcuzr": 25, "alexei": 14, "alfe_sei": [13, 16], "algorithm": [0, 5, 11, 19], "ali": 0, "alia": [3, 4, 5, 6, 8], "align": [5, 10], "all": [0, 3, 4, 5, 6, 7, 8, 9, 11, 13, 14, 15, 16, 17, 21, 22, 24, 25, 27, 29, 30], "all_compset": [10, 11], "alloi": [21, 25], "allow": [0, 5, 7, 12, 17, 19, 22], "along": [0, 5, 7, 8, 11, 18, 19, 23], "alpha": [0, 8], "alphabet": [0, 18], "alreadi": [1, 3, 6, 8, 23, 29, 30], "also": [0, 1, 3, 5, 7, 8, 13, 16, 18, 24, 25], "altern": [10, 15, 19, 23], "aluminum": 21, "alwai": [0, 5, 8, 18, 24], "alzn_mei": [13, 19, 20, 21, 24], "ambigu": 3, "amend_phase_descript": 14, "among": 3, "amorph": [0, 3], "amount": [5, 11, 16], "amp": 25, "an": [0, 1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 21, 23, 24, 25, 28, 29, 30], "anaconda": [0, 1], "analog": [22, 24], "analogi": 0, "analysi": 0, "ani": [0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 22, 24, 28, 29, 30], "anoth": [1, 7, 8, 11, 23, 29], "ansara": 13, "anyth": 3, "anywai": [6, 7], "api": [0, 3, 5, 7, 9, 11, 15, 17, 23, 26, 28, 30], "apidoc": 30, "appear": [3, 10, 11], "appen": 14, "append": [3, 6, 7, 20, 25], "appli": [7, 8], "applic": [3, 12, 29], "approach": 3, "appropri": 30, "approxim": [0, 5, 9], "ar": [0, 1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 24, 25, 27, 29], "arbitrari": [3, 5, 9, 22], "aregu": 0, "arg": [3, 5, 6, 7, 9, 10, 12], "argument": [0, 5, 6, 7, 10, 11, 13, 15, 18, 28], "aris": 3, "arithmet": 3, "ariti": [3, 9], "around": [0, 5, 7, 10, 11, 16, 19, 23], "arrai": [0, 3, 5, 6, 7, 11, 13, 17, 18, 23, 24], "arrow": 29, "articl": [14, 29], "artifact": 30, "arxiv": 5, "as_properti": [3, 12, 14, 16, 22], "as_quant": [3, 12], "assert": 6, "assess": [23, 25], "assessed_system": 25, "associ": [0, 5, 6], "assum": [3, 5, 7, 8, 11, 15, 30], "assumpt": [0, 3, 7], "ast": [0, 2, 3, 9], "atm": 22, "atom": [0, 3, 9], "atomic_ordering_energi": [2, 3], "attempt": [0, 5, 6, 7, 23], "attempt_new_step": [3, 7], "attr": [0, 3, 5], "attribut": [0, 3, 5, 9, 24, 25], "auto": 6, "autograd": 0, "autom": [0, 1], "automat": [0, 5, 6, 8, 13, 17, 19, 23, 24, 30], "av": 8, "avail": [0, 1, 13, 17, 19, 28, 30], "averag": 3, "avoid": [0, 6, 7], "awai": 7, "ax": [0, 5, 7, 8, 10, 11, 13, 15, 16, 17, 18, 19, 20, 22, 25, 26, 28], "axessubplot": 10, "axi": [0, 7, 8, 10, 19, 22, 23, 27], "axis_data": 7, "axis_direct": [3, 7], "axis_var": [3, 7], "b": [0, 5, 6, 9, 10, 11, 13, 19, 29], "b1": 5, "b2": [5, 16], "b2_bcc": [13, 16], "back": [0, 4], "backend": [0, 4], "background": 3, "backport": 5, "bajpai": 9, "balanc": [3, 5], "bar": [0, 29], "barrier": 20, "base": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 25, 28, 29], "baselin": 10, "bash": 29, "basi": [3, 5, 9], "basic": [4, 12, 24], "bbox": 27, "bbox_inch": 27, "bbox_to_anchor": [15, 17], "bcc": 16, "bcc_a2": [10, 14], "bcc_b2": 5, "bcc_renb": [13, 17, 22], "becam": 7, "becaus": [0, 3, 5, 7, 16, 21, 24, 25, 29], "becom": 12, "been": [0, 3, 5, 7, 28], "befor": [0, 1, 7, 8, 18, 24], "begin": [0, 8, 16], "behavior": [0, 4, 5], "being": [3, 7], "belong": 11, "below": [0, 11, 13, 16, 17, 18, 19, 20, 22, 24, 29], "bengt": 14, "best": [1, 8], "beta": [0, 2, 3, 8, 9], "better": [0, 4, 8], "between": [0, 5, 6, 7, 10, 11, 18], "beyond": 0, "big": 0, "biggest": 0, "bin": 1, "binari": [0, 3, 7, 8, 9, 10, 25, 26, 28], "binary_strategi": [3, 7], "binarycompset": [10, 11], "binarystrategi": [7, 8, 19], "binplot": [0, 3, 7, 10, 11, 15, 19, 26, 27, 28], "bit": 0, "blank": 30, "bld": 0, "bmag": [0, 2, 3, 9], "bmagn": [6, 14, 25], "bmh": 16, "bookkeep": 7, "bool": [4, 5, 6, 7, 8, 10, 11], "boolean": [0, 5], "boston": 3, "both": [5, 7, 10, 22], "bottom": [10, 11, 29], "bound": [5, 7, 8, 10], "boundari": [0, 7, 11, 19], "boundary_collect": 11, "boundary_set": 11, "box": [10, 27, 30], "bracket": 1, "branch": [0, 1, 29, 30], "branch_nam": 29, "break": [0, 6], "brk": 0, "broadcast": [0, 5], "broadcast_lik": 15, "broken": [0, 11, 30], "buffer": [7, 12], "bug": [0, 27, 28], "bugfix": 0, "build": [0, 1, 3, 4, 5, 9, 10, 30], "build_constraint": [3, 5], "build_constraint_funct": [3, 4], "build_ext": [1, 30], "build_funct": [3, 4], "build_phas": [2, 3, 9, 25], "build_phase_local_constraint": [3, 5], "build_viscos": 25, "buildfunctionsresult": [3, 4], "built": [3, 29], "bump": 0, "bundl": 1, "button": [10, 29], "byte": [5, 12], "c": [0, 1, 6, 7, 13, 14, 17, 19, 29], "cach": [0, 2, 3], "cache_algorithm": 5, "cache_clear": 5, "cache_info": 5, "cacheit": [3, 5], "calc": [0, 6, 8, 13], "calc_kwarg": 11, "calc_opt": [3, 5], "calc_result": 24, "calcul": [0, 2, 3, 7, 8, 9, 10, 11, 12, 13, 16, 23, 26, 28], "calculateerror": [3, 5], "call": [0, 1, 3, 4, 5, 6, 9, 10, 11, 20, 24, 27, 29], "callabl": [0, 4, 5, 6, 10, 11], "callback": 5, "caller": [3, 5], "calphad": [0, 3, 9, 11, 13, 14, 17, 19, 23, 25, 28, 29], "calucl": 25, "cambridg": 3, "can": [0, 1, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 18, 19, 20, 23, 24, 25, 27, 28, 29, 30], "can_zoom": [3, 10], "candid": [5, 6, 7, 8], "candidate_nod": 7, "candidate_phas": 5, "cannot": [0, 4, 5, 6, 7, 29], "canonical_sort_kei": [3, 5], "capabl": 19, "capac": [0, 19, 26, 28], "care": [5, 11], "carlo": 5, "case": [0, 3, 5, 7, 8, 23, 29], "caselesskeyword": 6, "cast_from": [2, 3, 5, 6], "catch": 0, "cation": 3, "caus": [0, 3, 7], "caution": 8, "caveat": 0, "cd": [1, 29], "cef": 9, "cell": 13, "celsiu": 15, "cementit": [0, 26, 28], "cementite_d011": 14, "center": [5, 10, 15, 17, 23], "center_baselin": 10, "certain": [0, 6], "chanc": 7, "chang": [0, 1, 5, 6, 7, 10, 11, 16, 29, 30], "changrong": 25, "channel": [0, 28], "char": 25, "charact": [0, 6], "charg": [0, 2, 3, 6, 26, 28], "chartrand": 9, "chat": 28, "chebyshev": 5, "chebyshev_cent": [3, 5], "check": [5, 7, 8, 9, 11, 13, 29, 30], "check_ab": [3, 5], "check_axis_valu": [3, 7], "check_change_in_phas": [3, 7], "check_converg": [3, 5], "check_global_min": [3, 7], "check_par": 7, "check_similar_phase_composit": [3, 7], "check_valid_point": [3, 7], "checkout": [1, 30], "chemic": [0, 3, 5, 7, 9, 24], "chemical_group": [3, 6], "chemical_group_overrid": [3, 6], "chemical_potenti": [3, 5, 7, 12], "chemical_potential_differenti": [3, 5], "chemicalpotenti": [2, 3], "chempot": 21, "chempot_ref": 21, "chemsag": [0, 6], "chen": 5, "chen2018": 5, "chenyang": 25, "chi": [17, 18], "chi_renb": [13, 17, 18, 22], "choos": [3, 6, 13, 15, 17, 21], "ci": 0, "cl": [3, 6], "clarifi": 8, "clariti": [0, 23], "clash": 0, "class": [0, 3, 4, 5, 6, 7, 9, 10, 11, 12, 25], "classmethod": [3, 5, 6, 7, 11], "classproperti": [2, 3], "clean": 0, "cleanup": 0, "clear": [3, 5, 10], "click": [29, 30], "clip": 10, "clone": [1, 29], "close": [7, 11], "close_miscibility_gap": 11, "cm": 17, "cmap": 17, "coars": 27, "code": [0, 1, 5, 7, 10, 23, 28, 29], "codebas": [9, 29], "codegen": [2, 3], "coeffici": [3, 6], "coercion": 5, "coincid": 16, "col": 25, "cold": 0, "collect": 0, "colloqui": 6, "color": [0, 7, 10, 11, 15, 17, 30], "color_dict": 17, "colorbar": 17, "column": [0, 5, 20], "com": [1, 4, 5, 14, 29, 30], "combin": 3, "come": [0, 1], "comma": 0, "command": [0, 6, 24, 29], "commatsci": 0, "commit": 30, "common": [0, 4, 5, 6, 17, 24], "comp": [3, 4, 5, 7, 10, 11, 13, 17, 18, 19, 21, 23, 24], "comp_count": 5, "comp_idx": 5, "comp_set": 7, "companion": 0, "compar": [3, 7, 8, 11, 21, 25], "compare_consider_fixed_c": [3, 7], "comparison": [0, 5], "compat": [0, 3, 5, 6, 14], "compat_api": [2, 3], "compil": [0, 1, 4, 29], "compiledmodel": 0, "complet": [0, 6, 10, 13, 16, 29], "complex": [0, 3, 11, 12], "compon": [0, 2, 3, 5, 7, 8, 10, 11, 13, 17, 18, 19, 21, 23, 24, 25], "componentlist": [3, 5], "componentsfield": [3, 5], "composit": [0, 3, 5, 7, 8, 10, 11, 12, 16, 17, 19, 21, 22, 24, 26, 27, 28], "composition_set": [2, 3], "compositionset": [0, 3, 5, 7, 12], "compound": [3, 8], "comprehens": 0, "compset": [3, 5, 10, 12], "compset2d": 11, "compset_pair": 11, "compsetpair": [10, 11], "compsets_belong_in_region": [10, 11], "compsetst": [3, 5], "compur": 7, "comput": [0, 3, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 19, 24, 25, 29], "computableproperti": [3, 5, 12], "compute_deriv": [3, 7], "compute_per_phase_properti": [2, 3], "compute_properti": [2, 3, 12], "compute_property_gradi": [2, 3], "computed_properti": [2, 3], "cond": [3, 5, 6, 7, 10, 11, 13, 19, 23], "conda": [0, 28], "condit": [0, 2, 3, 7, 8, 10, 11, 12, 13, 19, 20, 22, 24, 27], "condition_axis_ord": [3, 5], "conditionablecomputableproperti": [3, 12], "conditionerror": [3, 5], "conditionkei": [3, 5], "conditionsentri": [3, 5], "conditionsfield": [3, 5], "conditionvalu": [3, 5], "conds_kei": 5, "configur": [0, 1, 5, 6, 12, 24, 29, 30], "conform": [0, 6], "congratul": 29, "connect": [11, 23], "connet": 3, "cons_func": [3, 4], "cons_hess": [3, 4], "cons_jac": [3, 4], "conserv": 7, "consid": [3, 5, 7, 10, 11, 13, 15, 28], "consist": [0, 8, 21], "constant": [0, 2, 3, 4, 7, 11, 25], "constitu": [0, 2, 3, 5, 6, 7, 14, 15, 17, 25], "constituent_arrai": [3, 6, 25], "constituentsfield": [3, 5], "constituentslist": [3, 5], "constitut": 5, "constrain": 0, "constraint": [0, 2, 3, 4], "constraintfunct": [3, 4], "constraints_from_bound": [3, 5], "constrainttupl": [3, 5], "construct": [0, 3, 5, 6, 8, 11, 18, 19, 25, 27], "construct_equilibrium_system": [3, 5], "constructor": [0, 3, 5], "consumpt": 0, "contact": 0, "contain": [0, 1, 3, 5, 7, 8, 9, 10, 11, 13, 25], "content": 2, "context": 0, "continu": [0, 7, 8, 16, 30], "contour": 17, "contrast": 8, "contrib_mod": [3, 9], "contribut": [0, 2, 3, 9, 18, 25, 29], "control": [0, 4, 10], "conveni": [10, 11], "convent": [0, 4, 9], "converg": [0, 3, 5, 7], "convergencefailuresolv": 0, "convers": 0, "convert": [0, 3, 5, 9], "convex": [5, 11], "convieni": 9, "coolwarm": 17, "coord": [3, 5, 10], "coordin": [5, 7, 8, 10, 11, 24], "copi": [3, 5, 20, 29], "core": [0, 2, 3, 19, 30], "corner": 29, "correct": [0, 6, 7, 21, 23, 29], "correctli": [0, 1, 29, 30], "correspond": [4, 5, 7, 9, 10, 11, 15, 16], "could": [0, 5, 7, 8, 11, 16, 17], "couldn": 7, "count": 3, "counter": 7, "counterpart": 6, "cover": 5, "coverag": 0, "cp_coeffici": [3, 6], "cpm": [2, 3, 5, 8, 9, 19], "cpm_mix": [0, 2, 3, 9, 18], "cpu": 23, "cr": [23, 25], "crash": 0, "creat": [0, 1, 5, 6, 7, 8, 9, 11, 13, 15, 18, 22, 24, 25], "create_copi": [3, 7], "create_label": 15, "create_node_from_different_point": [3, 7], "creation": 0, "crfenb_jacob2016": 23, "crfeni_mi": 6, "cross": 7, "crystallin": 25, "crystallograph": 6, "cs_dat": [2, 3], "cs_state": [3, 5], "cse": 4, "csst": 5, "cu": [17, 19, 23, 25], "cuip": 25, "cur_cond": [3, 12], "curdir": 13, "curi": 16, "curie_temperatur": [0, 2, 3, 6, 9], "current": [0, 1, 3, 6, 7, 9, 11, 12, 13, 29], "current_delta": [3, 7], "current_grid": 5, "current_idx": 5, "currsiz": 5, "curv": [16, 26, 28], "custom": [0, 5, 10, 17, 18, 23, 26, 28], "cut": 28, "cycl": 0, "cyipopt": 0, "cython": [0, 1], "d": [5, 7, 11, 18], "d20240707": 24, "d3jppb": 3, "dask": [0, 27], "dat": [0, 6], "data": [0, 5, 6, 7, 8, 10, 11, 15, 17, 20, 21, 24], "data_var": [3, 5], "dataarrai": [5, 24], "databas": [0, 2, 3, 5, 7, 8, 9, 10, 11, 13, 15, 16, 17, 18, 19, 22, 23, 24, 25], "database_info": [0, 25], "databaseexporterror": [3, 6], "databaseformat": [3, 6], "datafram": [0, 20, 24], "dataset": [0, 5, 10, 11, 21, 26, 28], "date": 6, "davidwalz": 5, "db": [6, 16], "db_al_cu_i": [17, 23], "db_alf": 13, "db_alni": 16, "db_alzn": 13, "db_cr_fe_nb": 23, "db_nbre": [13, 17], "dbe": [3, 9, 25], "dbf": [0, 3, 4, 5, 6, 7, 8, 10, 11, 13, 15, 16, 18, 19, 21, 24, 25], "dbf_nbre": 22, "deal": [0, 6], "debug": 5, "decid": 7, "decim": 12, "deciph": 7, "decor": [5, 30], "decreas": 16, "def": [15, 25], "default": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 19, 22, 23, 24, 25], "default_arg": 5, "default_command": 25, "default_factori": 5, "defaultdict": 5, "defer": 30, "defin": [0, 3, 4, 5, 6, 7, 9, 11, 13, 14, 22, 25], "define_system_default": 25, "definit": [0, 9], "defualt": 7, "degener": 5, "degrad": 8, "degre": [0, 3, 5, 7, 10, 12, 17, 18, 24], "degree_of_ord": [0, 2, 3, 9, 16], "degrees_of_freedom": [3, 7], "dejan": 14, "del": [25, 30], "delai": [0, 6], "delimit": 0, "delta": [3, 7, 8, 12], "delta_chemical_potenti": [3, 12], "delta_chempot": 5, "delta_paramet": [3, 12], "delta_phase_amount": [3, 12], "delta_scal": 8, "delta_sitefrac": [3, 12], "delta_statevar": [3, 5, 12], "deni": 29, "denomin": [0, 7, 12], "dens": 27, "densiti": [0, 5, 7, 8, 25], "dep": 29, "depart": 28, "depend": [0, 3, 5, 6, 7, 30], "dependent_speci": 3, "depends_on": 5, "deploi": 0, "deploy": [0, 30], "deprec": 0, "depth": [0, 24], "deriv": [0, 3, 7, 9, 12, 14], "describ": [0, 5, 11, 24, 25], "descript": 30, "descriptor": [5, 6], "design": [5, 16], "desir": [6, 14], "desired_phas": 15, "destroi": 5, "detail": [5, 25], "deteciton": 5, "detect": [0, 6, 13, 30], "determin": [5, 7, 11, 30], "dev": [1, 29], "dev240": 24, "develop": [0, 9, 30], "df": 25, "di": 3, "diagram": [0, 7, 8, 10, 11, 15, 16, 17, 26, 27, 28], "dick": 14, "dict": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "dictfield": [3, 5], "dictionari": [0, 3, 5, 6, 7, 8, 11, 13, 24], "diff": 25, "differ": [0, 1, 3, 5, 6, 7, 8, 10, 11, 14, 24], "differenti": 4, "differentiablecomputableproperti": [3, 12], "difficult": 0, "diffus": [0, 6, 20, 25], "diffusing_speci": 6, "digtiz": 21, "dill": 0, "dilut": 0, "dim": 5, "dimens": [5, 24], "dimension": [5, 20, 23, 24], "dipole_mo": [3, 6], "dir": 29, "direct": [3, 7, 8, 10], "directli": [0, 3, 5, 10, 16, 17, 23], "directori": [1, 13, 29], "dirti": 30, "dis_degree_of_ord": 16, "disabl": [0, 5], "disappear": 16, "discov": 0, "discrep": 11, "discuss": [0, 24], "disord": [0, 3, 5, 16], "dispatch": 6, "displai": [10, 29], "display_nam": [2, 3, 12, 14, 16, 20, 22], "display_unit": [2, 3, 5, 12, 14, 16, 20], "disregard": 0, "dist": 30, "distanc": 7, "distinct": [5, 11], "distinguish": [0, 8], "distribut": [0, 1, 5, 15, 30], "divid": [0, 9], "djurov": 14, "do": [0, 3, 8, 9, 11, 14, 21, 24, 25, 30], "do_map": [7, 8, 15, 19, 23], "doaction": 6, "doc": [0, 29, 30], "docstr": [0, 5], "document": [0, 10, 19, 24, 28, 29, 30], "doe": [0, 4, 6, 7, 8, 11, 16, 28, 29], "doesn": [5, 6, 7], "dof": [3, 5, 7, 8], "doferror": [3, 5], "doi": [0, 3, 9, 11, 13, 14, 21, 23, 25, 28], "domain": 0, "don": [1, 7], "done": [3, 8, 9, 19, 29], "doo": [0, 2, 3, 9], "doprint": [3, 6], "dordrecht": 3, "dormant": 12, "dormantphas": [3, 12, 20], "dot": 7, "doubl": [5, 7], "down": [8, 29], "download": [0, 1, 29], "dpi": 15, "dq": 25, "drag_pan": [3, 10], "dramat": 0, "draw": 10, "drawn": 13, "drive": [0, 5, 7, 8, 12, 26, 28], "driving_forc": [3, 12, 20], "drivingforc": [3, 12], "dronskowski": 14, "drop": [0, 3, 29], "dtype": 12, "du": 25, "due": [0, 5], "dupin": 19, "duplic": [0, 5], "dure": [0, 10, 28], "dwivedi": 5, "dx": 14, "e": [0, 1, 3, 5, 6, 8, 9, 12, 16, 18, 22, 24, 25, 27], "each": [0, 3, 5, 6, 7, 8, 10, 11, 13, 16, 18, 19, 24], "earli": 0, "earlier": [0, 25], "easi": 7, "easier": 0, "easili": [0, 16], "ed": 3, "edit": [1, 29, 30], "ee": 25, "effect": [1, 3, 5, 9, 16], "effici": [0, 5], "eid": 6, "ein": 3, "einstein": [0, 3], "einstein_energi": [2, 3], "either": [3, 7, 24, 29], "el": 15, "electr": [26, 28], "element": [0, 3, 5, 6, 9, 10, 11, 14, 21, 22, 24, 25], "element_nam": [4, 5], "elif": 15, "elimin": [0, 4], "ellipsi": 0, "elr": 25, "els": [15, 30], "emb": 3, "emelianenko": 11, "empti": [0, 7, 8], "en": 5, "enabl": [0, 5, 10], "encapsul": 5, "encount": 7, "end": [0, 5, 7, 8, 16, 29], "end_pan": [3, 10], "endmemb": [0, 3, 5, 6, 18], "endmember_constituent_idx": [3, 6], "endmember_matrix": [3, 5], "endmember_reference_model": [2, 3], "endmemberaqu": [3, 6], "endmembermagnet": [3, 6], "endmemberqkto": [3, 6], "endmemberrealga": [3, 6], "energet": [0, 3], "energi": [0, 2, 3, 5, 6, 7, 9, 11, 12, 18, 24, 26, 27, 28], "energy_surf": 0, "enforc": 0, "engin": [0, 24, 28], "enh": 0, "enhanc": 0, "enough": [7, 24], "ensur": [0, 1, 5, 6, 7, 14, 29, 30], "enter": [6, 16], "enthalpi": [2, 3, 9, 14, 17, 18], "enthalpy_of_form": 22, "enthlapi": 17, "entir": [0, 6, 15], "entribut": 0, "entropi": [2, 3, 9, 25], "enum": 7, "enumer": 15, "enumerate_composition_set": [3, 5], "env": 1, "envconda": 1, "environ": 1, "envpycalphad": 1, "envsourc": 1, "eq": [0, 3, 5, 8, 10, 15, 21, 22], "eq_dataset": 11, "eq_kwarg": [7, 10, 11], "eq_result": 24, "eqplot": [0, 2, 3, 23], "eqresult": 0, "eqsolv": [0, 2, 3], "equal": [0, 5, 7, 8, 12], "equat": [3, 5, 9, 25], "equilibria": [0, 5, 7, 11, 23, 24, 25], "equilibrium": [0, 2, 3, 7, 8, 10, 11, 15, 17, 19, 21, 22, 23, 26, 28], "equilibrium_compset": 12, "equilibrium_soln": 5, "equilibriumcalculationfield": [3, 5], "equilibriumerror": [3, 5], "equilibriumresult": [5, 11], "equival": [0, 5], "eriksson": 9, "error": [0, 2, 3, 6, 7, 25], "escaped_nam": [2, 3], "especi": 0, "essenti": [24, 29], "et": [0, 3, 11, 23, 25], "eta_i": 25, "eta_param_queri": 25, "etc": [0, 1, 5, 7, 22, 24], "evalu": 0, "even": [8, 11], "evenli": 5, "everi": [0, 1, 5, 7, 8], "everyth": [1, 7, 29], "everywher": [0, 7], "ex": [6, 23, 25], "exact": 0, "exactli": [7, 30], "examin": 17, "exampl": [0, 3, 5, 6, 8, 10, 11, 13, 18, 23, 28], "exce": 6, "except": [0, 5, 6, 7, 14, 16, 24, 25], "excess": [18, 25], "excess_coeff": [3, 6], "excess_coeff_indic": 6, "excess_coefficient_idx": [3, 6], "excess_energi": 25, "excess_entropi": 25, "excess_mixing_energi": [2, 3, 9], "excess_paramet": [3, 6], "excessbas": [3, 6], "excessqkto": [3, 6], "excessrkm": [3, 6], "excessrkmmagnet": [3, 6], "exclud": [0, 5, 16], "execut": 29, "exist": [6, 11, 13, 15, 21, 29], "exit": [7, 8], "exit_hint": [3, 7], "exithint": [3, 7, 8], "exp": [3, 21, 25], "exp_acr_zn": 21, "exp_x_zn": 21, "expand": [0, 6], "expand_keyword": [3, 6], "expand_wildcard": [2, 3, 12], "expect": [0, 9, 25], "expens": [5, 6], "experiment": 0, "explictli": [0, 13], "explor": [26, 28], "expon": [0, 3, 6], "exponenti": 0, "export": [0, 20], "expos": 5, "expr": [3, 6, 12], "expr_cond_pair": [3, 6], "express": [0, 3, 4, 6, 23, 25], "extend": 0, "extens": [1, 3, 9, 29], "extern": 4, "extra": 7, "extract": [5, 18], "extract_paramet": [3, 5], "extrapol": 0, "extrapolate_temperature_bound": [2, 3], "f": [0, 3, 4, 5, 6, 14, 15, 16, 20, 21, 22, 30], "face": 11, "factor": [8, 9], "fail": [0, 3, 7, 25], "failur": 0, "fake_point": 5, "fall": 4, "fals": [3, 4, 5, 6, 7, 8, 9, 11, 13], "faq": 28, "far": [7, 8], "fashion": 0, "fast": [4, 5], "faster": 0, "fastfunct": [3, 5], "fastfunctionfactori": [0, 3, 5], "favor": [0, 20], "fcc": [13, 16, 17], "fcc_a1": [5, 10, 12, 13, 17, 20, 24], "fcc_l12": 16, "fcc_renb": [13, 17], "fd": 6, "fe": [0, 14, 15, 23, 26, 28], "fe_3c": [26, 28], "feasibl": 0, "featur": [0, 1, 5, 15, 29], "februari": 4, "feedstock": 30, "fellowship": 28, "fetch": [0, 29], "few": [3, 5, 13, 29], "fewer": 24, "fhash": [3, 5], "fictiti": 5, "field": [4, 5, 6, 7, 30], "fifo": 7, "fig": [13, 15, 16, 17, 18, 19, 20, 21, 22, 25], "figsiz": [13, 15, 17, 18, 19, 22, 25], "figur": [10, 11, 13, 15, 16, 17, 18, 20, 22, 25, 28, 29], "file": [0, 1, 5, 6, 14, 27, 29, 30], "file_descriptor": 6, "fileexistserror": 6, "filenam": 6, "filter": [2, 3, 5, 12, 19], "filter_phas": [0, 3, 5], "final": [0, 25], "find": [0, 1, 5, 7, 8, 11, 22, 24, 29], "find_first_compset": [3, 12], "find_global_min_point": [3, 7], "find_two_phase_region_compset": [10, 11], "fine": 0, "finish": [7, 8, 30], "first": [0, 3, 5, 16, 18, 30], "fit": [0, 7], "fitzpatrick": 9, "five": 24, "fivethirtyeight": 14, "fix": [0, 3, 5, 6, 7, 8, 16, 18, 22, 23, 27], "fixed_chempot_indic": 5, "fixed_component_differenti": [3, 5], "fixed_composition_set": [3, 7], "fixed_lincomb_molefrac_coef": 5, "fixed_lincomb_molefrac_rh": 5, "fixed_phas": [3, 7], "fixed_phases_with_multipl": [3, 7], "fixed_statevar": [2, 3], "flatten": 15, "flexibl": 0, "float": [0, 3, 5, 6, 7, 8, 10, 11, 12], "float64": [11, 24], "flow": 0, "fluid": 25, "fmt": [0, 6], "fmt_str": [3, 9], "fname": 6, "focu": 0, "follow": [0, 3, 4, 8, 9, 11, 23, 28, 29, 30], "fontdict": 10, "forc": [0, 5, 7, 8, 12, 26, 28], "force_add": 8, "force_insert": 6, "force_upp": 6, "forg": [0, 1, 29], "fork": 30, "forknam": 29, "form": [3, 9, 25], "formal": [3, 9], "format": [0, 3, 6, 9, 13, 15, 17, 18, 25], "formul": [3, 9], "formula": [3, 6, 9], "formulaenergi": [2, 3], "formulaenthalpi": [2, 3], "formulagrad": [3, 5], "formulahess": [3, 5], "formulamole_grad": [3, 5], "formulamole_hess": [3, 5], "formulamole_obj": [3, 5], "formulaobj": [3, 5], "found": [0, 5, 7, 11, 13, 23, 25, 28], "four": [5, 13, 18, 24, 25], "frac": 25, "fraction": [0, 3, 5, 7, 8, 9, 11, 12, 15, 16, 19, 20, 23, 24, 25, 26, 27, 28], "framework": [0, 11], "free": [4, 7, 8], "free_composition_set": [3, 7], "free_den": 7, "free_phas": [3, 7], "free_phases_with_multipl": [3, 7], "free_var": 7, "freed": 7, "freedom": [0, 3, 5, 7, 10, 12, 17, 18, 24], "fri": 3, "fritz": 14, "from": [0, 1, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 29], "from_dataset_vertic": [10, 11], "from_dict": [3, 5], "from_fil": [0, 3, 6], "from_str": [0, 3, 6], "frozenset": [6, 11], "full": [3, 9], "fulli": [6, 24], "func": [3, 4, 5], "func_opt": 4, "function": [0, 3, 4, 5, 6, 7, 8, 10, 11, 14, 16, 17, 24, 25, 26, 27, 28], "function_factori": [3, 5], "fund": 0, "further": 0, "futur": [0, 3, 11], "f\u00fcr": 13, "g": [1, 2, 3, 4, 5, 6, 8, 9, 14, 16, 18, 22, 24, 25, 27], "g48541ab8": 24, "ga": [0, 25], "gamma": 16, "gancarz": 25, "gap": [0, 5, 7, 8, 11, 13, 16], "garbag": 0, "gca": [10, 13, 15, 17, 18, 21, 22, 25], "gd": 25, "ge": 14, "gener": [0, 3, 5, 7, 8, 9, 10, 12, 23, 30], "generate_automatic_starting_point": [7, 8, 23], "generate_dof": [3, 5], "generate_symmetric_group": [3, 5], "geometr": 5, "get": [0, 3, 4, 5, 7, 8, 10, 11, 13, 14, 15, 16, 17, 20, 22, 23, 24, 25, 29], "get_all_phas": [7, 8], "get_composition_set": [3, 5], "get_compset": [10, 11], "get_cons_func": [3, 5], "get_cons_hess": [3, 5], "get_cons_jac": [3, 5], "get_cons_len": [3, 5], "get_data": [7, 8, 15], "get_dataset": [3, 5], "get_dict": [3, 5, 20], "get_internal_constraint": [2, 3, 9], "get_invariant_data": [7, 8], "get_invariant_data_from_tieline_strategi": [7, 8], "get_label": [3, 7], "get_line_plot_boundari": [10, 11], "get_local_properti": [3, 7], "get_mass_fract": [2, 3], "get_mole_formula_func": [3, 5], "get_mole_formula_grad": [3, 5], "get_mole_formula_hess": [3, 5], "get_mole_fract": [2, 3], "get_mole_fraction_func": [3, 5], "get_mole_fraction_grad": [3, 5], "get_mole_fraction_hess": [3, 5], "get_new_st": [3, 5], "get_next_nod": [3, 7], "get_phas": [10, 11], "get_phase_constraint": [3, 4], "get_phase_formula_energi": [3, 4], "get_phase_formula_moles_el": [3, 4], "get_phase_properti": [3, 4], "get_properti": [3, 7], "get_proxi": [3, 5], "get_pure_el": [3, 5], "get_scatter_plot_boundari": [10, 11], "get_state_vari": [3, 5], "get_statevars_arrai": [3, 7], "get_supported_vari": [3, 6], "get_system_spec": [3, 5], "get_tieline_data": [7, 8], "get_tieline_data_from_tieline_strategi": [7, 8], "get_var_list": [3, 7], "get_xaxis_text1_transform": [3, 10], "get_xaxis_text2_transform": [3, 10], "get_xaxis_transform": [3, 10], "get_yaxis_text1_transform": [3, 10], "get_yaxis_text2_transform": [3, 10], "get_yaxis_transform": [3, 10], "get_zpf_data": [7, 8], "getattr": 5, "getdataset": 5, "getfunc": 0, "getitem": 5, "gfecem": 14, "gibb": [0, 3, 5, 7, 11, 17, 20, 24], "gibbs_coefficient_idx": [3, 6], "gibbs_eq_typ": [3, 6], "git": [1, 29, 30], "github": [0, 1, 4, 5, 28, 29, 30], "gitter": 28, "give": [0, 5, 11, 14, 24, 29], "given": [0, 3, 5, 7, 8, 12, 17, 21, 24, 29], "glass": 25, "global": [0, 3, 5, 6, 7, 8], "global_check_interv": 8, "global_condit": [3, 7], "global_grid": 5, "global_i": 8, "global_min_is_poss": [3, 5], "global_min_num_candid": 8, "global_min_pden": 8, "global_min_tol": 8, "global_nam": 6, "global_x": 8, "gm": [2, 3, 5, 8, 9, 12, 17, 20, 22, 24, 25], "gm_mix": [2, 3, 9, 18], "gmr": [3, 9], "go": [6, 7, 21, 25, 29, 30], "goal": 6, "goe": 8, "googl": 28, "grab": 8, "grace": 7, "grad": [3, 4], "grad_opt": 4, "gradient": [2, 3, 4], "gram": 3, "grammar": [0, 2, 3], "grant": 28, "graph": 3, "graphit": 14, "great": 25, "green": [10, 11, 29], "grid": [0, 5, 10, 11, 27], "grid_point": 5, "gridlin": [10, 11], "griva": 11, "group": [6, 11, 22, 25, 28], "groupbi": [0, 6], "grow": 5, "gt": [15, 16, 20, 21, 23, 24, 25], "guarante": [0, 5], "guess": 5, "guid": 0, "guo": 25, "g\u0105sior": 25, "h": [2, 3, 4, 30], "h298": [3, 6], "h2o": 3, "h_tran": [3, 6], "ha": [0, 3, 5, 7, 8, 10, 11, 13, 16, 17, 24, 25, 27, 28, 29], "hadn": 7, "halign": 10, "hallstedt": [14, 19], "halton": [0, 2, 3], "hand": [5, 24], "handbook": 3, "handl": [0, 3, 5, 6, 7, 10, 11, 17], "happen": 16, "hard": 10, "hargath": 13, "has_additional_term": 6, "has_h_tran": 6, "has_point_been_encount": [3, 7], "has_ptvm_term": 6, "hash": [5, 30], "hashabl": [0, 5], "have": [0, 1, 3, 5, 6, 7, 8, 10, 11, 16, 18, 20, 23, 24, 25, 29], "haven": 30, "hcp_a3": [13, 20, 24], "hcp_renb": [13, 17, 22], "header": [3, 6], "heat": [0, 19, 26, 28], "heat_capac": [2, 3, 9, 14, 16], "help": [0, 7, 8, 29], "helper": 5, "here": [1, 3, 5, 6, 7, 8, 9, 14, 16, 17, 23, 29], "hess": [3, 4], "hess_opt": 4, "hessian": [0, 4], "hetting": 5, "hex": [10, 11], "hickel": 14, "hierarchi": 8, "high": [3, 7, 8, 10], "higher": [3, 9, 11, 23], "hillert": 3, "hint": [6, 7], "hit": [5, 6], "hitandrun": 5, "hm": [2, 3, 5, 8, 9, 14, 16, 22, 24], "hm_mix": [2, 3, 9, 17, 18], "hmr": 18, "hold": [8, 11], "hope": 7, "horizont": 10, "horizontalalign": 10, "how": [0, 4, 7, 8, 13, 17, 18, 19, 23, 25, 28], "howev": [3, 7, 9, 19, 23, 24, 25, 27], "html": 29, "http": [0, 1, 3, 4, 5, 14, 21, 23, 28, 29, 30], "hull": [5, 11], "human": [5, 30], "hyperplan": [0, 2, 3], "hyperplane_coeffici": [3, 5], "i": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 28, 29, 30], "id": 29, "idea": 5, "ideal": [3, 9], "ideal_mixing_energi": [2, 3, 9], "ident_char": 6, "identchar": 6, "identifi": 6, "idmix": [3, 9, 25], "if_exist": 6, "if_incompat": 6, "ignor": [0, 3, 6, 7], "ignore_converg": [3, 5], "ignore_phas": 11, "igorjrd": 0, "ij": 9, "ill": 7, "imag": 27, "imagin": 18, "immedi": 6, "immut": 5, "implement": [0, 3, 5, 7, 9, 25], "implementation_unit": [2, 3, 12, 22], "implementent": 0, "impli": [5, 24], "import": [0, 3, 4, 5, 6, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27], "improperli": 7, "improv": [0, 11], "inact": 0, "inc": 1, "includ": [0, 3, 5, 6, 7, 8, 9, 10, 13, 14, 16, 18], "include_grad": 4, "include_hess": 4, "include_obj": 4, "incompat": [0, 6], "incorrect": 0, "incorrectli": 0, "increas": [0, 7, 8, 11, 16], "inde": 16, "inden": 3, "indep_comp": 11, "indep_comp_cond": [10, 11], "indep_comp_idx": 11, "indep_comp_index": 11, "indep_composition_condit": 11, "independ": [3, 7, 10, 11], "independentpotenti": [2, 3, 6], "index": [0, 6, 7, 11, 13, 15, 18, 24, 28], "indic": [5, 6, 7, 8, 12, 15, 16, 22, 24], "inequ": 5, "inf": 5, "infin": 0, "infinit": 11, "influenc": 0, "inform": [0, 5, 7], "infrastructur": 0, "inher": 24, "initi": [0, 5, 8, 14, 25], "initial_compset": 11, "inlin": [13, 14, 15, 16, 17, 21, 22, 23, 24, 25], "inp": 12, "inplac": [1, 5, 30], "input": [0, 8], "input_compset": [3, 12], "insert": [3, 6], "insid": 0, "inst": 21, "instabl": 0, "instal": [0, 28, 29, 30], "instanc": [0, 4, 5, 7, 10, 25], "instanti": [0, 3, 10], "instantiate_model": [3, 5], "instead": [0, 7, 10], "instr": 6, "instruct": 0, "int": [3, 5, 6, 7, 8, 12], "int64": 24, "integ": [3, 24], "integr": 30, "intend": 10, "interact": [0, 3, 5, 6, 9, 18], "interacting_species_idx": [3, 6], "interchang": 5, "interchangebl": 5, "interest": [5, 16, 18], "interfac": [0, 5], "intern": [0, 5, 12, 17, 18, 24], "internal_cons_func": [3, 5], "internal_cons_hess": [3, 5], "internal_cons_jac": [3, 5], "internal_dof": [15, 24], "interpret": 29, "intersect": 8, "intersecting_point": [3, 5], "interstiti": [0, 3, 5], "interv": [3, 6, 8], "intervalbas": [3, 6], "intervalcp": [3, 6], "intervalg": [3, 6], "introduc": 0, "invalid": [0, 7, 24], "invari": [7, 8, 13], "involv": [0, 3, 9, 12], "io": [2, 3, 9, 25], "ionic": [0, 3], "ipopt": 0, "is_empti": [3, 7], "is_global_properti": [2, 3], "is_state_vari": [3, 7], "is_stoichiometr": 6, "isel": [15, 24], "ish": 5, "isinst": 9, "isn": [0, 5, 7], "iso": 19, "isobar": [0, 7, 10, 11, 14, 26, 28], "isol": [0, 1, 12, 29], "isolatedphas": [0, 3, 12, 20], "isopleth": [0, 7, 8], "isopleth_strategi": [3, 7], "isoplethstrategi": [7, 8, 19], "isotherm": [0, 7, 10, 23], "issn": 14, "issu": [0, 4, 6, 7, 10, 14, 28, 30], "item": [3, 4, 5, 15, 20, 29], "iter": [0, 3, 5, 7, 8, 9, 10, 11], "its": [4, 6, 7], "itself": 12, "iv": 9, "ix_const_arr": 6, "j": [0, 3, 9, 11, 12, 13, 14, 16, 20, 23, 25, 27], "jac_func": 5, "jac_opt": 4, "jacob": 23, "jacobian": 4, "jansson": [0, 3, 12, 14], "jansson_delta": [2, 3, 12], "jansson_deriv": [2, 3, 12], "janssonderiv": [3, 12], "janssonderivativedelta": [3, 12], "japan": 21, "jarl": 3, "jit": 0, "jmlr": 5, "jnoncrysol": 25, "join": [15, 22], "jor": [0, 28], "journal": [25, 28], "joyc": 0, "jstor": 5, "jump": 16, "jupyt": [1, 13, 14, 16, 29], "jupyterlab": 1, "jupyterlabconda": 1, "jupyterlabgit": 1, "jupyterlabpip": 1, "jupyterlabpython": 1, "just": [0, 7, 8, 16], "jwsiegel2150": 0, "j\u00f6rg": 14, "k": [0, 13, 14, 16, 17, 18, 21, 22, 24, 25, 28], "k1cl1": 3, "keep": [0, 5, 7], "kei": [3, 4, 5, 7, 10, 13, 15, 16, 20, 21, 22, 23, 24], "kelvin": [3, 20], "kernel": 29, "keword": 13, "keyword": [0, 5, 6, 7, 10, 11, 13, 15, 24, 27], "kind": [5, 10], "kinet": [0, 6], "kister": [0, 3, 9], "kl": 9, "kluwer": 3, "know": [5, 16, 24], "known": [0, 6], "kohler_toop_excess_sum": [2, 3], "kui": 28, "kwarg": [0, 3, 5, 6, 7, 8, 9, 10, 12], "kwarg_obj": 5, "k\u00f6rmann": 14, "l": [6, 13, 25], "l12_degree_of_ord": 16, "lab": 1, "label": [0, 7, 8, 10, 11, 15, 16, 17, 18, 20, 21, 22, 23, 24], "label_end_point": 7, "label_nam": 15, "label_nod": [7, 23], "labelloc": 10, "labelpad": 10, "lambda": [0, 4, 5, 15], "lambdifi": [0, 4], "lambdify_default_backend": 4, "lambdify_default_cs": 4, "lambdify_default_llvm_opt_level": 4, "larg": [0, 8, 9, 24], "largest": 5, "last": [0, 3, 7, 30], "later": [3, 7, 27], "latest": [1, 28, 29, 30], "latter": 5, "lazili": [0, 3], "lead": [0, 7, 10], "leak": 0, "learn": 0, "least": [5, 11, 24], "least_recently_us": 5, "leav": [16, 30], "led": 0, "lee": 21, "left": [0, 5, 7, 10, 15, 17, 29], "legaci": [26, 28], "legend": [0, 7, 10, 11, 15, 16, 17, 18, 20, 21, 22, 27], "legend_gener": [7, 10, 11], "legend_handl": [10, 11, 17], "legibl": 14, "len": [5, 7, 24], "length": [0, 3, 5, 6, 7, 8], "less": 11, "let": 5, "level": [0, 1, 10], "lf": 25, "li": 25, "librari": [0, 5, 28], "licens": 5, "life": 0, "light_dataset": [2, 3], "lightdataset": [3, 5], "lightweight": 5, "like": [0, 5, 6, 8, 11, 18, 21, 22, 29], "limit": [0, 5, 6, 7, 8, 10, 16, 20], "line": [0, 6, 7, 8, 11, 15, 25], "line_collect": 11, "linear": [3, 5], "linearcombin": [3, 12], "linearli": 18, "lineend": 25, "linewidth": [6, 17], "link": [6, 13, 29], "linspac": 18, "linux": [0, 1, 30], "liq_driving_forc": 20, "liquid": [0, 3, 10, 13, 16, 20, 21, 22, 24, 25], "liquid0cu": 25, "liquid0zr": 25, "liquid_mod": 25, "liquid_renb": [13, 17, 22], "liquidu": 17, "list": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 21, 23, 24, 25, 29, 30], "list_of_refer": 25, "list_soln_species_count": [3, 6], "liter": 5, "literatur": [13, 22, 25], "liu": 28, "ll": [5, 7, 21], "llnl": 19, "llvm": [0, 4], "lmfit": 0, "ln": [3, 14], "load": [0, 6, 13, 15, 17, 25], "loc": [6, 10, 15, 17, 21], "local": [0, 5, 6, 7, 27, 30], "local_nam": 6, "localhost": 29, "locat": [3, 10, 13], "log": [0, 3, 25, 30], "logo": 0, "london": 3, "long": [7, 8, 13, 28], "longer": 0, "longest": 24, "loop": [0, 5, 8, 17], "lot": 0, "low": [0, 17], "lower": [0, 5, 7, 11], "lower_convex_hul": [0, 2, 3], "lowest": 8, "lru": 5, "lru_cach": [3, 5], "lstsq_check_infeas": [3, 5], "lt": [15, 16, 20, 21, 23, 24, 25], "lu": [0, 3], "luka": 3, "m": [1, 3, 5, 9, 11, 25, 29, 30], "mac": 0, "maco": [0, 1], "made": [6, 7, 17, 28], "mag": 3, "magic": 13, "magnet": [0, 3, 14, 16], "magnetic_afm_factor": [3, 6], "magnetic_energi": [2, 3], "magnetic_mo": [3, 6], "magnetic_structure_factor": [3, 6], "mai": [4, 5, 7, 8, 10, 11, 17], "main": [29, 30], "mainli": [0, 7], "maint": 0, "maintain": 0, "mainten": 0, "major": [0, 6], "make": [0, 5, 7, 8, 11, 21, 29, 30], "make_cal": 5, "manag": [0, 1, 5], "mangl": 6, "mani": [0, 7, 8, 13, 24], "manifest": 5, "manipul": [0, 24], "map": [0, 2, 3, 5, 6, 9, 10, 15, 17, 23, 26, 27, 28], "map_binari": [10, 11], "map_kwarg": [7, 11], "mapper": 7, "mapstrategi": [7, 8], "march": 14, "marker": [17, 18, 22], "mask": 24, "masked_eq_r": 15, "mass": [3, 5], "mass_fract": 3, "mass_obj": [3, 5], "mass_obj_2d": [3, 5], "massfract": [0, 2, 3], "massiv": 20, "master": [1, 30], "match": [3, 6, 7, 8, 11, 24, 29, 30], "match_str": 6, "matchstr": 6, "materi": [0, 9, 28], "matertrans1960": 21, "mathbb": 4, "mathemat": 0, "mathrm": 3, "matplotlib": [0, 7, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27], "matplotlibrc": 27, "matric": 7, "matrix": [0, 5], "matter": 24, "matur": 7, "max": [0, 5, 11, 16], "max_composit": [10, 11], "max_endmember_pair": 0, "max_extra_point": 0, "max_iter": [3, 5, 12], "maximum": [6, 11], "maximum_iter": [3, 12], "maximum_valu": [3, 12, 20], "maxsiz": 5, "mcmc": 5, "mean": [0, 5, 9, 11, 24, 29], "mean_composit": [10, 11], "meaning": 11, "meant": 10, "measur": [21, 22], "mei": 21, "melt": 16, "member": [0, 5], "memori": [0, 7], "menu": 29, "merg": [3, 5, 30], "messag": [0, 29], "met": 21, "meta": [12, 22, 30], "metadata": [3, 6], "metallkund": 13, "metallurg": 9, "metaproperti": [2, 3, 20], "metast": [0, 16], "metastable_liq_wk": 20, "metastable_wk": 20, "method": [0, 3, 5, 6, 8, 9, 25, 26, 28], "mf": 25, "mg_zhong": 13, "microsoft": [0, 1, 29], "middl": [8, 23], "might": [8, 24], "mileston": 30, "min": [7, 8, 11, 16], "min_composit": [10, 11], "min_delta_ratio": 8, "min_step_length": 0, "mingw": 0, "mingw64": 29, "miniconda": [1, 29], "minim": [0, 2, 3, 7, 11, 12], "minimum": [0, 3, 7, 8, 11, 19], "minimum_composit": [3, 5, 11], "minimum_df": 5, "minimum_valu": [3, 12], "minor": 0, "minut": [0, 30], "misc_gap_tol": 11, "miscibl": [0, 5, 7, 8, 11, 13, 16], "mismatch": 0, "miss": [5, 8, 30], "mistak": 0, "mit": 5, "mitig": 0, "mix": [0, 3, 9, 17, 18, 24], "mix_": 0, "mixing_cod": [3, 6], "mixing_const": [3, 6], "mixing_energi": [2, 3, 9], "mixing_enthalpi": [2, 3, 9], "mixing_entropi": [2, 3, 9], "mixing_expon": [3, 6], "mixing_heat_capac": [2, 3, 9], "mixing_typ": [3, 6], "mnt": 0, "mobil": 0, "mod": [5, 15, 25], "mode": [0, 5], "model": [0, 2, 4, 5, 6, 7, 8, 15, 17, 18, 24, 26, 28], "model_attr_nam": 12, "model_hint": [0, 3, 6], "model_mqmqa": [2, 3], "modelcomputedproperti": [3, 12], "modelmqmqa": [3, 9], "modelsfield": [3, 5], "modif": 3, "modifi": [0, 3, 5, 9, 19], "modul": [0, 2, 17, 19, 28], "mol": [3, 12, 14, 16, 20, 27], "molar": [0, 14, 24, 27], "molar_mass": [3, 5], "molar_volum": 0, "mole": [0, 2, 3, 9, 11, 23, 24, 25, 27], "mole_fract": 3, "molefract": [2, 3, 7, 10], "molten": 9, "moment": 0, "mont": 5, "more": [0, 5, 7, 8, 11, 16, 24, 25, 29], "most": [0, 6, 11, 30], "mous": 10, "mousebutton": 10, "move": [0, 7, 10, 17], "mpa": 25, "mpl": 27, "mpz": 28, "mq": 25, "mqmqa": 9, "mt": 29, "mu": [2, 3, 21, 24], "much": [0, 7], "muggianu": [3, 9], "multi": [0, 5], "multicompon": 19, "multidimension": 24, "multipl": [0, 2, 3, 5, 7, 12, 15, 17], "multiprocess": 0, "must": [1, 3, 5, 6, 7, 9, 10, 11, 13, 20, 21], "mv": 0, "my_phas": 16, "my_phases_alf": 13, "my_phases_alzn": 13, "my_phases_nbr": [13, 17], "mydb": 6, "n": [1, 4, 5, 6, 7, 8, 11, 13, 14, 15, 16, 19, 20, 24, 25, 29], "n_": 9, "n_constraint": 5, "n_point": 5, "n_pt": 18, "nabla": 4, "nacl": 3, "name": [0, 1, 2, 3, 5, 6, 7, 9, 10, 11, 14, 15, 17, 24, 25, 29], "namedtupl": 5, "namespac": 0, "nan": [3, 5, 7, 8, 24], "nasa": 28, "navig": 29, "nb": [17, 18, 22, 23], "nbpt": 5, "nbre_liu": [13, 17, 18, 22], "ndarrai": [5, 11], "ndim": [3, 5], "necessari": [0, 7], "necessarili": [5, 24], "need": [0, 1, 3, 5, 7, 9, 10, 14, 16, 18, 21, 25], "neel_temperatur": [2, 3, 9], "neg": [3, 7], "nest": 5, "netcdf": 0, "neugebau": 14, "neutral": 3, "never": 24, "new": [3, 5, 7, 8, 9, 10, 11, 13, 17, 22, 25, 28, 29, 30], "new_condit": 7, "new_nod": 7, "new_node_found": [3, 7], "new_point": 7, "new_val": 5, "newer": 0, "newest": 28, "newli": [0, 30], "next": [8, 11, 16, 29, 30], "ni": [0, 5, 26, 28], "ni_al_dupin_2001": [13, 16], "nice": 0, "nist": 23, "nn": 25, "nnx14al43h": 28, "no_conflict": 5, "node": [3, 7, 8], "node_queu": 8, "nodequeu": [3, 7], "nodesexhaustederror": [3, 7], "non": [1, 5, 6, 25], "none": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 19, 24, 25], "nonneg": 3, "nonvacant_el": [3, 5], "nonzero": [0, 22], "normal": [0, 3, 7, 8, 9], "normalize_factor": [7, 8], "not_finish": [3, 7], "note": [0, 3, 4, 5, 6, 7, 8, 10, 11, 13, 15, 16, 17, 18, 24], "notebook": [13, 14, 16, 24], "noth": 30, "notic": [0, 16, 18, 25], "notifi": 5, "novel": 7, "now": [0, 11, 16, 18, 25, 27, 29], "np": [2, 3, 5, 7, 8, 10, 11, 14, 15, 16, 17, 18, 21, 22, 24, 25], "nstrf": 28, "nt": [2, 3, 9, 25], "nullspac": 5, "num": 5, "num_candid": 7, "num_const": 6, "num_excess_coeff": 6, "num_fixed_phas": [3, 7], "num_free_phas": [3, 7], "num_gibbs_coeff": 6, "num_internal_con": [3, 5], "num_pair": [3, 6], "num_phase_local_condit": [3, 5], "num_potential_condit": 7, "num_pure_el": 6, "num_quadruplet": [3, 6], "num_reserved_row": 5, "num_statevar": [3, 5], "num_stoich_phas": [3, 6], "num_subl_1_const": [3, 6], "num_subl_2_const": [3, 6], "num_vertex": 11, "numba": 0, "number": [0, 3, 4, 5, 6, 7, 8, 9, 24, 29, 30], "number_of_atom": [2, 3], "numer": [0, 3, 5, 7, 12, 14], "numexpr": 0, "numpi": [0, 7, 10, 14, 15, 17, 18, 21, 22, 24, 25], "o": [0, 5, 11, 13, 15, 30], "obj": [3, 5, 9], "obj_2d": [3, 5], "obj_parameters_2d": [3, 5], "object": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 20, 25], "observ": [5, 16], "obsolet": 0, "obviou": 0, "occasion": [0, 27], "occup": 27, "occupi": 18, "occur": [6, 7, 20], "off": [0, 8, 13, 28], "offset": 7, "often": [22, 23], "ohtani": 0, "old": 0, "old_val": 5, "omit": 14, "on_dependency_upd": [3, 5], "onboard": 28, "onc": [0, 5, 7, 9, 11, 30], "one": [0, 3, 5, 6, 7, 8, 9, 10, 11, 20, 24], "onedr": 19, "onelin": 30, "ones": [3, 18], "onli": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 24, 25, 27], "onto": 7, "open": [6, 28], "oper": [1, 5, 10, 24, 29], "opt": 5, "opt_level": 4, "optim": [0, 3, 4], "option": [0, 3, 4, 5, 6, 7, 9, 10, 11, 14, 16, 24], "ord": 3, "order": [0, 3, 5, 6, 7, 9, 11, 18, 21, 24, 26, 27, 28], "ordereddict": 5, "org": [0, 3, 5, 14, 21, 23, 28], "organ": 11, "orient": 0, "orig_c": 7, "origin": [7, 13, 29, 30], "orthonorm": 5, "osx": [0, 1, 30], "other": [0, 3, 5, 6, 7, 11, 12, 16, 24, 25, 29], "otherwis": [8, 11], "oti": 28, "our": [14, 17, 25, 29], "out": [0, 5, 6, 11, 27, 29, 30], "out_energi": 5, "out_intersecting_point": 5, "out_plane_coef": 5, "out_x": 5, "outcom": 7, "outlin": 19, "outp": 5, "output": [0, 3, 5, 8, 9, 11, 17, 18, 24, 25], "outsid": 7, "over": [0, 5, 8, 11, 17, 21, 24, 27], "overal": 17, "overhead": 0, "overrid": [0, 5], "overridden": [5, 10], "overwrit": [3, 6], "overwritten": 5, "own": 29, "p": [3, 5, 8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28], "pa": [24, 25], "packag": [0, 1, 2, 27], "pad": [0, 10], "pad_point": 10, "pade": 24, "page": [14, 29], "pair": [7, 9, 11], "pairwise_xdiscrep": [10, 11], "pan": 10, "panda": [0, 20, 24], "pandoc": 29, "paper": [0, 13], "parallel": [0, 4, 28], "paralleliz": 0, "param": 6, "param_ord": 6, "param_queri": 3, "param_search": [3, 25], "param_typ": 6, "paramagnet": 16, "paramet": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14], "parameter_array_length": 5, "parameter_ord": [3, 6], "parameter_typ": 25, "pardalo": 3, "parent": [3, 7, 8], "parenthes": 29, "parit": 3, "pars": [0, 3, 6, 25], "parse_additional_term": [3, 6], "parse_chemical_formula": [3, 6], "parse_cs_dat": [3, 6], "parse_endmemb": [3, 6], "parse_endmember_aqu": [3, 6], "parse_endmember_qkto": [3, 6], "parse_endmember_subq": [3, 6], "parse_excess_magnetic_paramet": [3, 6], "parse_excess_paramet": [3, 6], "parse_excess_parameters_pitz": [3, 6], "parse_excess_qkto": [3, 6], "parse_head": [3, 6], "parse_interval_gibb": [3, 6], "parse_interval_heat_capac": [3, 6], "parse_phas": [3, 6], "parse_phase_aqu": [3, 6], "parse_phase_cef": [3, 6], "parse_phase_real_ga": [3, 6], "parse_phase_subq": [3, 6], "parse_ptvm_term": [3, 6], "parse_quadruplet": [3, 6], "parse_stoich_phas": [3, 6], "parse_subq_excess": [3, 6], "parseexcept": 0, "parseimpl": [3, 6], "parsen": [3, 6], "parser": [0, 6, 14], "part": [3, 9, 28], "partial": [3, 26, 28], "particular": [0, 4, 5], "particularli": [0, 18], "partit": [0, 3], "partli": 7, "pascal": 3, "pases": 11, "pass": [0, 3, 4, 5, 6, 7, 8, 10, 11, 13, 18, 19, 24, 27, 29, 30], "path": [0, 13, 29], "pathlib": 0, "pattern": [3, 5, 6], "pc": [3, 6], "pd": 20, "pden": [0, 5, 7, 17], "pdof": 5, "peak": 16, "pelton": 9, "pend": 0, "pennsylvania": 28, "pep": 0, "per": [0, 3, 5, 7, 9, 27], "per_formula_unit": [3, 4, 9], "perform": [0, 3, 4, 5, 6, 7, 8, 11, 24], "perman": 27, "pertain": 8, "ph": 22, "phase": [0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 17, 18, 21, 22, 24, 25, 26, 27, 28], "phase_amt": 5, "phase_aqu": [3, 6], "phase_cef": [3, 6], "phase_color": 7, "phase_constitu": 6, "phase_dof": [3, 5], "phase_frac": 7, "phase_handl": 15, "phase_indic": 24, "phase_legend": [0, 3, 7, 10, 11, 15, 17], "phase_local_condit": 5, "phase_local_cons_func": [3, 5], "phase_local_cons_jac": [3, 5], "phase_nam": [0, 2, 3, 4, 5, 6, 8, 11, 12, 17, 20, 25], "phase_name_without_suffix": [2, 3, 12], "phase_on": 12, "phase_realga": [3, 6], "phase_rec": [2, 3], "phase_record": [3, 5], "phase_record_factori": [2, 3, 5], "phase_set": 22, "phase_stoichiometr": [3, 6], "phase_subq": [3, 6], "phase_two": 12, "phase_typ": [3, 6], "phasebas": [3, 6], "phasefract": [2, 3], "phaselist": [3, 5], "phasemap": 15, "phasenam": [3, 5], "phaserecord": [0, 3, 4, 5], "phaserecordfactori": [3, 4, 5], "phaseregiondata": [7, 8], "phasesfield": [3, 5], "physic": [0, 3, 14, 18, 24], "pick": 0, "pickl": [0, 4], "pickleabl": 5, "piec": 0, "piecewis": [0, 6], "pii": 14, "pin": 0, "pip": [0, 28, 29, 30], "piro": 9, "place": [5, 10], "plai": 3, "plan": [0, 7], "platform": [0, 1, 30], "pleas": [0, 17, 27, 28], "plot": [0, 2, 3, 8, 14, 15, 18, 22, 24, 25, 26, 28], "plot_binari": [3, 7, 19], "plot_boundari": [10, 11], "plot_invari": [3, 7], "plot_isopleth": [3, 7, 19], "plot_kwarg": [7, 10, 11, 13, 15], "plot_step": [3, 7, 15, 19], "plot_ternari": [3, 7, 19, 23], "plot_tielin": [3, 7], "plt": [10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 27], "plu": 5, "plug": 25, "plugin": 0, "pmb": 4, "point": [0, 3, 5, 7, 8, 10, 11, 17, 18, 20, 23, 24, 27, 29, 30], "point_from_equilibrium": [3, 7], "point_is_exit": [3, 7, 8], "point_sampl": [3, 5], "pointer": 5, "pointwis": 0, "polynomi": [3, 6, 9], "polytop": [2, 3, 8], "poor": [8, 20], "portion": 3, "poschmann": 9, "posit": [3, 7, 10, 17], "possibl": [0, 3, 5, 6, 7, 13, 24, 27, 28], "post1": 28, "post2": 24, "post_solve_hook": [3, 5], "potenti": [0, 3, 5, 7, 8, 10, 11, 12, 23, 24], "power": 0, "practic": 1, "pre": [7, 30], "pre_solve_hook": [3, 5], "preced": 11, "precis": 0, "predict": 25, "prefix": 0, "prematur": 7, "presenc": 16, "present": [3, 5, 13, 24], "press": [3, 10], "pressur": [3, 22, 24], "pressuretyp": [2, 3], "pretti": 7, "previou": [0, 7, 18], "previous": 0, "prffield": [3, 5], "primari": 5, "primarili": 10, "prime": [5, 16], "primit": [2, 3], "principl": 4, "print": [0, 5, 6, 11, 13, 18, 23, 24, 25], "probabl": 0, "problem": 0, "problemat": 5, "proce": [8, 11], "procedur": 5, "process": [0, 1, 6, 7], "process_parameter_queu": [3, 6], "produc": [0, 4, 6, 7], "prof": 28, "profil": 0, "programat": 13, "programmat": 13, "progress": 0, "project": [0, 1, 5, 10, 19], "proof": 0, "prop": [3, 5, 12, 20], "prop_2d": [3, 5], "prop_grad": [3, 5], "prop_parameters_2d": [3, 5], "proper": 6, "properli": [0, 29], "properti": [0, 3, 5, 7, 8, 9, 10, 12, 14, 17, 18, 22, 24, 25, 26, 28], "property_framework": [2, 3, 20, 22], "property_nam": [4, 5], "property_to_optim": [3, 12], "protocol": [9, 12], "prototyp": 5, "provid": [0, 3, 5, 6, 11, 23], "pseudo": 0, "pt": 5, "ptvm_term": [3, 6], "ptvmterm": [3, 6], "public": [0, 28, 30], "publish": [0, 3, 14, 30], "pull": [0, 1, 29, 30], "pure": [0, 3, 5, 9, 11, 16, 21, 22, 25], "pure_el": [3, 5, 6], "pure_element_mass_dict": 3, "pure_elements_mass": [3, 6], "push": [29, 30], "pv": 0, "pxd": [1, 30], "py": [0, 1, 4, 19, 29, 30], "py26": 5, "py30": 5, "pycalphad": [0, 2, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26], "pycalphadcd": 1, "pycalphadconda": 1, "pycalphadpip": 1, "pycalphadpython": 1, "pypars": [0, 6], "pypi": [0, 1, 28], "pypirc": 30, "pyplot": [10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25], "pyproject": [0, 1], "pytest": [1, 29, 30], "python": [0, 1, 5, 28, 29, 30], "pythonconda": 1, "pyx": 1, "q_": 5, "qt": 12, "quadruplet": [0, 3, 6, 9], "quadruplet_coordin": [3, 6], "quadruplet_idx": [3, 6], "qualiti": 0, "qualnam": 7, "quantiti": [3, 27], "quasi": [3, 5, 9], "quasichem": [0, 9], "queri": [3, 6, 25], "question": [5, 28], "queue": [6, 7, 8], "quickli": 0, "r": [1, 3, 4, 5, 9, 21, 25, 28, 29, 30], "rais": [0, 6, 7, 25], "random": [5, 10], "randomli": [3, 5, 18], "rang": [13, 16, 21, 27], "rather": [0, 8, 24], "ratio": [3, 6, 8], "raw": 6, "raymond": 5, "rcparam": 27, "re": [0, 3, 6, 7, 8, 17, 18, 21, 22, 25], "reach": 7, "reached_limit": [3, 7], "reaction": 13, "read": [0, 3, 6, 29], "read_cs_dat": [3, 6], "read_tdb": [3, 6], "readabl": [5, 30], "reader": 0, "readi": 29, "readm": 0, "readthedoc": 0, "real": [0, 3, 11], "reason": 11, "rebuild": 11, "rebuild_two_phase_region": [10, 11], "receiv": 29, "recent": [0, 5, 9, 11, 30], "recip": [5, 30], "recommend": [0, 17, 28], "recompil": 1, "recomput": [3, 5], "record": 7, "recriproc": 0, "rectifi": 6, "recurs": 5, "recursionerror": 28, "recursive_tuplifi": [3, 5], "red": 10, "redlich": [0, 3, 9], "redlich_kister_sum": [0, 2, 3, 25], "reduc": [0, 7], "redund": 7, "reevalu": 21, "ref": [3, 6, 9, 22, 25], "ref2": 22, "ref_enthalpi": 22, "ref_eq": 21, "refactor": 0, "refdata": 0, "refer": [0, 3, 5, 6, 7, 9, 12, 24, 26, 28], "referenc": [18, 22], "reference_condit": 12, "reference_energi": [2, 3, 9], "reference_fil": [0, 25], "reference_model": [3, 9], "reference_phas": 3, "reference_st": [3, 9], "referencest": [2, 3, 9, 12, 22], "refin": 0, "reflect": [0, 1], "reflow_text": [3, 6], "reflowed_text": 6, "refstat": 0, "regardless": [0, 5], "regener": [0, 30], "regex": 0, "region": [5, 7, 8, 10, 11, 13, 16, 23, 24, 27], "regist": [10, 17], "register_format": [0, 3, 6], "regress": 0, "reject": 0, "rel": [5, 16, 30], "relat": [0, 5, 6, 10], "relax": 0, "releas": [0, 1, 28], "relev": [3, 5, 7, 9, 10, 11, 17], "reli": 9, "remain": [3, 8, 17], "remov": [0, 3, 5, 7, 9, 13, 16, 29], "remove_metast": 5, "removed_compset": 5, "renam": [0, 6], "rename_element_charg": [3, 6], "reorgan": 0, "repeat": [6, 7, 16, 25], "replac": [0, 3, 6, 9, 29, 30], "repo": 30, "report": [0, 6, 22, 24, 28], "repositori": 30, "repres": [3, 5, 7, 8, 11, 24], "represent": [3, 6, 11], "reproduc": 13, "request": [0, 29, 30], "requir": [0, 1, 3, 5, 6, 7, 13, 18, 27, 29], "research": [5, 28], "reserv": 3, "reshap": 20, "residu": 0, "residual_tol": [3, 12], "resolut": [0, 8], "resolv": [0, 3, 8, 30], "respect": [0, 3, 4, 14, 18, 22, 29], "respoitori": 29, "respons": 11, "restrict": 6, "result": [0, 3, 5, 6, 7, 10, 14, 17, 18, 20, 25, 29], "result_arrai": 5, "result_fract": 5, "result_simplex": 5, "retain": 3, "retriev": 3, "return": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 24, 25], "return_strategi": 7, "reusabl": 5, "review": 29, "revis": 30, "rewrit": 0, "rewritten": 0, "rgb": [10, 11], "rgba": [10, 11], "rich": 0, "richard": 14, "right": [5, 10, 29], "rightarrow": 4, "rm": [29, 30], "roadmap": 0, "robust": 0, "role": 3, "romeijn": 3, "room": 0, "root": 1, "rotat": [10, 17], "roughli": 27, "routin": [0, 5, 10], "row": 20, "rst": 30, "rule": [0, 5, 7, 24], "run": [0, 1, 5, 8, 13, 25, 27, 29], "run_loop": [3, 5], "runtim": 4, "s0364": 13, "s0364591610000052": 14, "s11661": 9, "s298": [3, 6], "s_": 25, "safe": 3, "sai": [8, 29], "salt": 9, "same": [3, 5, 7, 9, 11, 12, 14, 19, 20, 21, 22, 24, 29], "same_phas": [10, 11], "sampl": [0, 3, 5, 7, 8, 17, 18, 24], "sampler": 5, "sanit": 0, "satisfi": [0, 5, 9], "save": [1, 3, 13, 28, 30], "savefig": 27, "scalar": [12, 13], "scalarmapp": 17, "scale": 8, "scatter": [10, 11, 15, 17, 18, 21, 25], "scatter_dict": 11, "scatterplot": 17, "scenario": 5, "schedul": 0, "scheme": 0, "scienc": [0, 14, 28], "sciencedirect": 14, "scientif": 1, "scm": 0, "scrambl": [0, 5], "script": [0, 1, 30], "sdist": [0, 30], "seamless": 0, "search": [0, 3, 6, 7, 8, 11, 23, 25, 29], "second": [3, 16, 18, 29], "secondari": 10, "secondart": 10, "section": [0, 3, 23], "see": [0, 3, 5, 6, 7, 11, 16, 18, 24, 25, 29], "seem": 7, "segment": 11, "sel": [5, 17, 18, 21, 24, 25], "select": [20, 21, 24, 29], "self": [3, 9, 12, 13, 25], "sellebi": 3, "semant": [9, 30], "sens": [5, 8], "separ": [0, 5, 6, 7], "seq": [5, 14], "sequenc": [0, 3, 5, 7], "serial": 4, "serializ": 0, "seriou": 0, "serv": 29, "server": 29, "session": 0, "set": [0, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 20, 22, 25, 30], "set_arrai": 17, "set_aspect": 21, "set_label_coord": 17, "set_local_condit": [3, 5], "set_nan_to_zero": [7, 8], "set_rot": 17, "set_titl": [15, 16, 17, 18, 22, 25], "set_xlabel": [15, 16, 17, 18, 20, 22, 25], "set_xlim": [13, 15, 17, 18, 19, 22, 25], "set_ylabel": [3, 10, 15, 16, 17, 18, 20, 22, 25], "set_ylim": [15, 19], "setup": [1, 14, 30], "setup_requir": 0, "setuptool": [1, 29], "setuptools_scm": 0, "setuptoolspip": 1, "sever": [0, 3, 24, 26, 28], "sf_idx": 15, "sf_sym": 15, "sgte": 0, "sgte91": 0, "sha256": 30, "shape": [2, 3, 5, 12, 18], "sharp": 16, "shift": 0, "shift_reference_st": [2, 3, 9], "should": [0, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 25, 28, 29, 30], "show": [13, 15, 17, 18, 19, 22, 23, 29], "shown": [13, 16], "shut": 29, "si": 27, "side": 5, "sigm": 25, "sigmarenb": [13, 17], "sign": 0, "signatur": 5, "signific": 0, "significantli": [0, 7, 8], "silent": [0, 6], "similar": [5, 6, 7, 11, 24, 29], "similarli": [5, 19], "simpl": 11, "simple_check_change_in_phas": [3, 7], "simple_check_global_min": [3, 7], "simple_check_valid_point": [3, 7], "simplex": 5, "simpli": [0, 24], "simplic": 5, "simul": 0, "sinc": [0, 3, 4, 7, 8, 9, 15, 17, 24, 25, 27, 30], "singl": [0, 7, 8, 15, 18, 19, 24, 27], "singlephasedata": [7, 8], "singular": 0, "sio2": 3, "site": [0, 3, 5, 6, 9, 11, 15, 24, 26, 27, 28], "site_frac": [5, 11], "site_frac_atol": [10, 11], "site_fract": [2, 3, 9, 15, 18], "site_fraction_differenti": [3, 5], "site_ratio": 0, "sitefract": [2, 3, 9], "six": 24, "size": [0, 3, 5, 7, 8, 14, 24], "sizeof_fmt": [3, 5], "skip": [8, 11, 29], "skipto": 25, "slice": 24, "slightli": 14, "slow": 0, "slower": [0, 4], "sm": [2, 3, 9], "sm_mix": [2, 3, 9, 18], "small": [0, 7, 8, 11, 25, 27], "smallest": 11, "smith": 5, "smith1984": 5, "smoother": 0, "snider": 11, "snippet": 20, "so": [0, 5, 6, 7, 8, 11, 13, 16, 20, 25, 27, 29, 30], "softwar": [0, 6, 28], "solid": 25, "solut": [0, 3, 5], "solv": [0, 3, 5, 7, 8], "solve_st": [3, 5], "solver": [0, 2, 3, 7, 12], "solverbas": [3, 5], "solverfield": [3, 5], "solverresult": [3, 5], "some": [0, 5, 6, 7, 8, 10, 14, 17, 19, 23, 24], "someth": [6, 29], "sometim": [0, 8, 28], "soon": [0, 1], "sort": [0, 5, 9, 11, 15, 18, 22, 24], "sourc": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 28, 29, 30], "sp": 25, "space": [3, 5, 8, 10, 18, 28], "speak": 27, "spec": [3, 5, 12], "speci": [0, 2, 3, 5, 6, 9, 18, 24, 25, 26, 28], "special": [0, 3, 7, 26, 28], "species_constitu": 15, "species_nam": [3, 6], "specif": [5, 6, 8, 15, 26, 28], "specifi": [0, 3, 5, 6, 7, 10, 13, 14, 16, 19, 20, 21, 22, 29], "speed": 0, "speedup": 0, "sphinx": [29, 30], "spinel": 15, "split": [6, 7], "squeez": [7, 15, 18, 21, 22], "stabil": [0, 16], "stabl": [0, 5, 7, 8, 12, 16, 22, 28], "stable_composition_set": [3, 7], "stable_composition_sets_flip": [3, 7], "stable_phas": [3, 7], "stable_phases_with_multipl": [3, 7], "stackoverflow": 5, "stage": 30, "standard": 0, "start": [0, 5, 7, 8, 10, 13, 20, 23, 30], "start_pan": [3, 10], "starting_point": [2, 3], "startlin": 6, "startup": 0, "stash": 30, "state": [0, 3, 5, 7, 8, 9, 12, 13, 17, 26, 27, 28, 30], "state_vari": [3, 4, 5, 7, 9], "state_variable_differenti": [3, 5], "statement": 0, "statevari": [2, 3, 4, 5, 7, 8, 9, 10, 11, 13], "static": [3, 6, 9], "statist": 5, "statu": [3, 7], "steadi": 16, "steadili": 16, "step": [0, 5, 7, 8, 13, 14, 16, 20, 25, 29, 30], "step_result": 7, "step_siz": 5, "step_strategi": [3, 7], "steppingstrategi": 8, "stepstrategi": [7, 8, 15, 19], "still": [0, 7, 8], "stoichiometric_factor": [3, 6], "stoichiometry_pure_el": [3, 6], "stoichiometry_quadruplet": [3, 6], "stop": [7, 8, 13], "store": [3, 7, 13, 24], "str": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15], "str_kei": [3, 5], "straightforward": 23, "strat": 23, "strategi": [3, 6, 7, 15, 19], "strategy_bas": [3, 7], "strategy_data": [3, 7], "strategydata": [7, 8], "streamlin": 0, "strict": 0, "string": [3, 5, 6, 9, 10, 11, 24, 30], "stringio": 6, "strong": 0, "structur": [5, 6, 8], "structure_entri": 6, "studi": [21, 25], "studio": 29, "stuff": 7, "style": [6, 14, 16], "subclass": [0, 9, 25], "subexpress": 4, "subject": [5, 12], "subl_1_charg": [3, 6], "subl_1_chemical_group": [3, 6], "subl_1_const": [3, 6], "subl_2_charg": [3, 6], "subl_2_chemical_group": [3, 6], "subl_2_const": [3, 6], "subl_const_idx_pair": [3, 6], "subl_idx": 15, "subl_index": 3, "subl_ratio": [3, 6], "sublattic": [0, 3, 5, 6, 9, 18, 24], "sublattice_index": 15, "sublattice_indic": 3, "submit": 30, "submodul": 2, "subpackag": 2, "subplot": 19, "subqexcessquadruplet": [3, 6], "subqpair": [3, 6], "subqquadrupletcoordin": [3, 6], "subset": 6, "substant": 0, "substitut": [0, 3, 5, 9], "subsystem": 6, "subtract": [3, 9], "success": 7, "successfulli": [7, 30], "suffix": [5, 18], "suggest": 25, "suitabl": 9, "sum": [0, 3, 5, 9, 18, 25], "sum_": 9, "sum_i": 25, "summari": 11, "summat": 3, "sun": 11, "sundman": [0, 3, 13, 19], "sundman2015": 0, "super": 25, "superclass": 9, "supervis": 28, "suppli": [7, 8, 13], "support": [0, 3, 4, 5, 6, 7, 10, 11, 17, 25, 28], "suppress": 25, "sure": [8, 21, 29, 30], "surfac": [5, 25, 26, 28], "suspend": 0, "switch": [0, 1], "symbol": [0, 3, 4, 5, 6, 9, 15, 25], "symbol_replac": [2, 3, 9], "symbols_onli": 5, "symengin": [0, 3, 4, 5, 6, 9], "symengine_graph": 4, "symmetr": 5, "symmetri": 5, "sympi": [0, 15], "sympifi": 0, "sympydiff_util": [2, 3], "sync": 29, "syntax": [0, 3, 9, 14, 16], "system": [0, 1, 5, 6, 8, 9, 11, 15, 16, 17, 19, 21, 23, 24, 25, 29], "system_info": 7, "systemmolestyp": [2, 3], "systemspecif": [3, 5], "systemst": [3, 5], "t": [0, 1, 3, 5, 6, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 30], "t0": [0, 3, 12, 26, 28], "t_max": [3, 6], "t_min": 6, "tab": 25, "tabl": 20, "tabular": 24, "tag": [0, 30], "take": [0, 1, 5, 6, 7, 11, 17, 25, 28], "taken": [5, 8, 21, 24], "tangent": 5, "tarbal": 30, "target": [0, 12, 30], "target_component_index": 5, "target_statevar_index": 5, "tc": [0, 2, 3, 6, 9, 14, 25], "tccommand": [3, 6], "tcprinter": [0, 3, 6], "tdb": [0, 2, 3, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], "tdb_keyword": [2, 3, 25], "tdb_param_typ": 25, "tdbdb": 13, "tdiscrep": [10, 11], "technic": 28, "technologi": 28, "tell": [16, 25], "temp": 25, "temperatur": [0, 3, 6, 10, 11, 12, 14, 15, 16, 17, 20, 21, 22, 23, 24], "temperature_atol": [10, 11], "temperature_in_celsiu": 15, "temperature_limit": [0, 25], "temperaturetyp": [2, 3], "ten": 5, "tension": 25, "term": [3, 5, 6, 9, 24], "termin": 29, "ternari": [0, 2, 3, 7, 8, 9, 19, 25, 26, 28], "ternary_strategi": [3, 7], "ternarystrategi": [7, 8, 19, 23], "ternplot": [0, 3, 7, 10, 19, 27], "test": [0, 1, 3, 7, 8, 25, 29, 30], "test_fix": 7, "test_func": 5, "test_func2": 5, "testmodel": [2, 3], "testpypi": 0, "text": [0, 6, 10, 14, 15, 16, 20, 28], "than": [0, 3, 4, 7, 24], "thank": 0, "thcd": 25, "thei": [0, 1, 3, 5, 6, 7, 8, 13, 21, 24], "them": [0, 7, 15, 24, 29], "themselv": 5, "therefor": [9, 18], "thermo": [0, 6, 13], "thermochimica": 9, "thermodynam": [0, 3, 5, 6, 7, 10, 11, 13, 14, 16, 20, 21, 23, 25], "theta": [3, 25], "thi": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 27, 29, 30], "thin": 19, "thing": [5, 25], "third": 18, "those": [3, 5, 18, 29], "though": 4, "three": [5, 7, 13, 23, 24, 25], "through": [0, 6, 8, 15, 19, 22, 24, 28, 29], "throughout": 3, "throw": 0, "thu": [8, 24], "tick": 10, "tick1": 10, "tick2": 10, "tie": [0, 7], "tie_triangle_color": [7, 10], "tielin": [0, 7, 8, 10, 11, 13, 27], "tieline_collect": 11, "tieline_color": [7, 10, 11], "tight": [0, 27], "tight_layout": 19, "tilmann": 14, "time": [0, 1, 3, 4, 6, 7, 9, 13, 23, 24, 29, 30], "tineline_collect": 11, "tinydb": [0, 6, 25], "titl": [21, 23, 27, 30], "to_datafram": 0, "to_fil": [0, 3, 6], "to_interv": [3, 6], "to_str": [0, 3, 6], "to_xarrai": 5, "todo": 6, "togeth": 11, "toggl": 0, "tok": 6, "token": [0, 3, 6, 25], "tokenpars": [3, 6], "tokenparsererror": [3, 6], "tol": 7, "toler": [7, 11], "toml": [0, 1], "too": [7, 8], "tool": [0, 1, 29], "toolchain": 0, "top": [1, 7, 10, 11, 29], "total": [9, 14, 23], "toward": 29, "tqdm": 0, "traceback": 0, "track": [1, 4, 5, 7], "tracker": [0, 6], "tradit": 0, "tran": 21, "transact": [6, 9], "transform": [3, 9, 10], "transit": [0, 8, 16, 20], "transpar": 0, "travi": 0, "treat": [3, 5], "tree": [3, 9], "trial_simplex": 5, "triangl": [0, 7], "triangular": [0, 2, 3, 7, 26, 28], "triangularax": [3, 10, 23], "tricki": 0, "trigger": 30, "trivial": 6, "true": [0, 3, 4, 5, 6, 7, 8, 10, 11, 23], "truli": 8, "trust": 0, "try": [0, 6, 7, 25, 29], "trybula": 25, "tst": 0, "ttol": 11, "tup": 5, "tupl": [4, 5, 6, 7, 8, 10, 11, 12], "turn": [0, 13], "tutori": [1, 24], "twine": 30, "two": [0, 3, 5, 7, 8, 9, 10, 11, 12, 16, 18, 20, 23, 27], "two_phase_region": [10, 11], "twophaseregion": [10, 11], "twostate_energi": [2, 3], "txt": [1, 5, 29], "txtpip": 1, "type": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 25], "type_definit": [0, 14, 25], "typedef": [0, 6], "typedfield": [3, 5], "typeerror": 28, "typic": [0, 3, 4, 5, 7], "typo": 0, "tzero": [2, 3, 20], "u": [0, 1, 6, 7, 17, 29], "u2": 24, "u6": 24, "unabl": 7, "uncommit": 30, "unconverg": 0, "undefin": 0, "under": [3, 5, 25], "undercool": 25, "underli": [5, 24], "understand": [3, 16], "unexpect": 7, "unfamiliar": 1, "unfortun": 0, "unhandl": 0, "unicod": 0, "unifi": 0, "uniform": 5, "uniformli": 5, "unintuit": 7, "union": [3, 5, 7], "uniqu": [5, 7, 8, 11, 22], "unique_phas": [10, 11], "unique_phase_idx": 22, "unique_phase_set": 22, "unit": [0, 2, 3, 5, 9, 14, 28], "unit_conversion_context": [3, 12], "unitscontain": 12, "univers": [0, 3, 28], "unless": [27, 29, 30], "unlik": [11, 24], "unlist": 0, "unord": 6, "unpack": 5, "unpack_compon": [2, 3], "unpack_condit": [3, 5], "unpack_kwarg": [3, 5], "unpack_phas": [3, 5], "unpack_speci": [3, 5], "unpredict": 5, "unreli": 0, "unstabl": [0, 7], "unsuccess": [7, 8], "unsupport": 6, "until": [0, 8, 16, 29], "unus": 0, "unwrap": 0, "unwrap_piecewis": [2, 3], "up": [0, 5, 7, 10, 11, 14, 17], "upcom": 30, "updat": [0, 1, 3, 5, 7, 27, 29, 30], "update_cs_phase_frac": [3, 7], "update_equilibrium_with_new_condit": [3, 7], "update_paramet": [3, 4], "updated_attribut": 5, "upgrad": 0, "upload": [0, 30], "upon": 7, "upper": [5, 15], "uppercas": 0, "upstream": 29, "url": 29, "ury3": 19, "us": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 24, 25, 26, 28, 29, 30], "usabl": 0, "usag": 0, "user": [0, 3, 4, 6, 7, 10, 11, 17, 19, 29], "user_funct": 5, "usernam": 29, "userwarn": 19, "usual": [0, 4, 8], "util": [0, 2, 3, 8, 11, 15, 17], "v": [3, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 29], "v0": [0, 25], "v1": 0, "v3": 0, "v_den": 7, "v_num": 7, "va": [0, 5, 7, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25], "vacanc": [0, 3, 5, 13], "vacancy_indic": 5, "vacani": 13, "val": [6, 7, 15], "valid": [5, 6, 7, 10, 11], "valign": 10, "valu": [0, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 20, 21, 24, 25, 30], "valueerror": [0, 25], "var": [5, 7], "vari": 18, "variabl": [0, 2, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 27], "variou": [0, 9], "vc": [0, 3, 6, 25], "ve": 29, "vector": [0, 5], "venv": 1, "verbos": [3, 5, 11], "veri": [0, 16, 17, 24, 27], "verifi": [25, 30], "version": [0, 5, 27, 28, 30], "version_d": [0, 25], "versu": 16, "vertex": [21, 24], "vertic": [7, 10], "via": [0, 3, 27], "viabl": 7, "view": 5, "virtual": [0, 1, 29], "visc": 25, "viscos": [26, 28], "viscositymodel": 25, "visual": [0, 1, 29], "vk": [0, 25], "vm": 0, "vol": 3, "volum": [0, 14], "volume_energi": [2, 3], "volumetr": 3, "von": 14, "w": [2, 3, 9, 19, 25, 29], "wa": [0, 7, 8, 11, 24, 30], "wai": [0, 3, 5, 6, 9, 23, 24, 29], "wainwright": 5, "walk": 24, "wall": 23, "want": [4, 5, 16, 23, 25, 29], "warn": [0, 6, 10, 19, 29], "wcl4": 3, "we": [0, 3, 5, 6, 7, 8, 9, 11, 14, 16, 17, 18, 21, 22, 23, 24, 25, 29], "weight": [2, 3, 19, 25], "welcom": 0, "well": [0, 5, 7, 29], "were": [0, 5, 7, 8], "what": [7, 8, 16, 22, 24, 28, 30], "whatev": 24, "wheel": [0, 30], "when": [0, 4, 5, 6, 7, 10, 11, 16, 17, 18, 24, 25, 28, 29, 30], "where": [0, 1, 3, 5, 6, 7, 8, 9, 12, 13, 15, 18, 24, 25, 29], "whether": [4, 5, 6, 7, 8, 11], "which": [0, 1, 3, 4, 5, 7, 8, 9, 10, 13, 17, 20, 22, 24, 29, 30], "while": [5, 25, 29], "width": 6, "wiki": 5, "wikipedia": 5, "wildcard": 0, "window": [0, 1, 30], "with_copi": [3, 7], "within": [3, 7, 11, 18, 29], "without": [0, 1, 4, 5, 8, 9, 20, 24, 29], "wk": [5, 12, 14, 20, 22, 23], "wks1": 16, "wks2": [16, 20, 22], "wks3": [16, 20], "wks4": 20, "wolf": 0, "work": [0, 1, 5, 7, 13, 28, 30], "workaround": 20, "workflow": [0, 30], "workspac": [0, 2, 3, 7, 12, 14, 16, 20, 22, 23], "worth": 24, "would": [0, 5, 7, 8, 21, 22, 24, 29], "wrap": 5, "wrap_symbol": [3, 5], "wrapper": [5, 6, 7, 8, 10, 11, 19], "write": [0, 3, 6, 13, 29], "write_kwarg": 6, "write_tdb": [3, 6], "writer": 0, "written": [5, 6, 29], "wrt": 4, "www": [5, 14], "w\u0142adys\u0142aw": 25, "x": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 29], "x_": 9, "x_al": 20, "x_i": [3, 25], "x_re": 22, "x_zn": [20, 24], "xarrai": [0, 5, 10, 21, 26, 28], "xdiscrep": [10, 11], "xfail": 29, "xi": 25, "xiong": [0, 3], "xiong_magnetic_energi": [2, 3], "xlabel": [14, 21, 23], "xlim": [7, 8, 21], "xp": 5, "xrai": 0, "xsmix": [3, 9], "xtol": 11, "xy": [6, 9], "y": [2, 3, 5, 7, 8, 9, 10, 14, 15, 17, 18, 19, 21, 23, 24], "y_chi_1_r": 18, "y_i": [3, 9], "yaml": 30, "yang": 13, "yaxi": [10, 17], "yazawa": 21, "ydiscrep": [10, 11], "ydiscrepancy_max": [10, 11], "yet": [0, 3, 5, 6, 10, 11, 13], "yield": 5, "ylabel": [10, 14, 17, 21, 23], "ylim": [7, 8, 21], "yong": 0, "you": [0, 1, 5, 13, 17, 18, 23, 28, 29, 30], "your": [0, 27, 28], "yu": 5, "yy": 25, "z": [3, 9, 10, 13, 17, 25, 28], "z_a": 25, "z_i_ab": 6, "za": 25, "zeitschrift": [13, 21], "zero": [0, 3, 5, 7, 8, 18, 26, 28], "zerodivisionerror": 0, "zerovolume_speci": [0, 25], "zeta": [3, 6], "zhang": 23, "zhenmin": 25, "zhou": 25, "zi": 28, "zn": [19, 20, 21, 24, 25], "zoom": 10, "zpf": [7, 8, 11], "zpf_boundary_set": [3, 10], "zpf_check": [2, 3], "zpf_equilibrium": [2, 3], "zpf_line": 7, "zpfboundaryset": [10, 11], "zpfline": [3, 7, 8], "zpfstate": [3, 7], "zr": 25, "\u00fc": 21}, "titles": ["What\u2019s New", "Install pycalphad", "API Documentation", "pycalphad package", "pycalphad.codegen package", "pycalphad.core package", "pycalphad.io package", "pycalphad.mapping package", "pycalphad.mapping.strategy package", "pycalphad.models package", "pycalphad.plot package", "pycalphad.plot.binary package", "pycalphad.property_framework package", "Plotting Isobaric Binary Phase Diagrams with <code class=\"docutils literal notranslate\"><span class=\"pre\">binplot</span></code>", "Heat Capacity of Cementite (<span class=\"math notranslate nohighlight\">\\(Fe_3C\\)</span>)", "Phases with Electrically Charged Species", "Equilibrium Properties and Partial Ordering (Al-Fe and Al-Ni)", "Calculating Energy Surfaces [Legacy Method]", "Special <code class=\"docutils literal notranslate\"><span class=\"pre\">_MIX</span></code> Reference State", "Plotting using the Mapping API", "Plot energy curves for several phases", "Calculate and Plot Activity", "Calculations with Reference States", "Plotting Ternary Phase Diagrams and Using Triangular Axes", "Exploring <code class=\"docutils literal notranslate\"><span class=\"pre\">calculate</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">equilibrium</span></code> xarray Datasets", "Custom Models in pycalphad: Viscosity", "Examples", "FAQ", " pycalphad: Computational Thermodynamics", "Onboarding as a Developer", "Releasing pycalphad"], "titleterms": {"": [0, 13], "0": 0, "01": 0, "02": 0, "03": 0, "04": 0, "05": 0, "06": 0, "07": 0, "08": 0, "09": 0, "1": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "17": 0, "18": 0, "19": 0, "1991": 13, "1993": 13, "2": 0, "20": 0, "2001": 13, "2005": 13, "2013": 13, "2015": 0, "2016": 0, "2017": 0, "2018": 0, "2019": 0, "2020": 0, "2021": 0, "2022": 0, "2023": 0, "2024": 0, "2025": 0, "21": 0, "22": 0, "23": 0, "25": 0, "26": 0, "28": 0, "29": 0, "3": 0, "31": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "_mix": 18, "acknowledg": 28, "activ": [21, 29], "ad": 25, "advanc": 26, "al": [13, 16], "an": 27, "anaconda": 29, "ani": 27, "api": [2, 19], "argument": 27, "ax": 23, "background": 25, "binari": [11, 13, 19], "binary_strategi": 8, "binplot": 13, "build": 29, "cach": 5, "calcul": [5, 17, 18, 20, 21, 22, 24, 25, 27], "capac": [14, 16], "cementit": 14, "charg": 15, "chemic": 21, "cite": 28, "class": 8, "codegen": 4, "combin": 23, "compat_api": 7, "composit": 20, "composition_set": 5, "compset": 11, "comput": 28, "computed_properti": 12, "conda": [1, 29, 30], "condit": [5, 23], "constant": [5, 8], "constraint": 5, "content": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "convex": 22, "core": 5, "creat": [29, 30], "cs_dat": 6, "curv": 20, "custom": 25, "cut": 27, "databas": [6, 21], "dataset": 24, "degre": 16, "deploi": 30, "deriv": 8, "develop": [1, 28, 29], "diagram": [13, 19, 23], "document": 2, "doe": 27, "drive": 20, "dupin": 13, "dure": 27, "electr": 15, "energi": [17, 20, 22], "enthalpi": 22, "environ": 29, "eqplot": 10, "eqsolv": 5, "equilibria": 21, "equilibrium": [5, 16, 24, 27], "error": [5, 29], "eta": 25, "exampl": 26, "experiment": [21, 22], "explor": 24, "faq": 27, "fe": [13, 16], "fe_3c": 14, "figur": 27, "file": 13, "forc": 20, "forg": 30, "fork": 29, "format": 22, "fraction": 18, "function": 20, "get": [21, 28], "grammar": 6, "halton": 5, "heat": [14, 16], "help": 28, "how": [27, 29], "hull": 22, "hyperplan": 5, "i": 27, "indic": 28, "instal": 1, "io": 6, "isobar": 13, "isopleth": 19, "isopleth_strategi": 8, "legaci": 17, "light_dataset": 5, "linear": 23, "liu": 13, "local": 29, "logo": 28, "long": 27, "lower_convex_hul": 5, "m": 13, "manual": 30, "map": [7, 8, 11, 19], "mei": 13, "metaproperti": 12, "method": 17, "mg": 13, "minim": 5, "mix": 22, "model": [3, 9, 25], "model_mqmqa": 9, "modul": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "molar": 23, "mpz": 27, "nb": 13, "new": 0, "ni": [13, 16], "off": 27, "onboard": 29, "order": 16, "packag": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "parallel": 27, "paramet": 25, "parser": 25, "partial": 16, "perform": 25, "phase": [13, 15, 19, 20, 23], "phase_rec": 5, "phase_record_factori": 4, "pip": 1, "plot": [7, 10, 11, 13, 16, 17, 19, 20, 21, 23], "polytop": 5, "post1": 0, "potenti": [21, 29], "primit": 7, "project": 17, "prompt": 29, "properti": 16, "property_framework": 12, "pycalphad": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 25, 27, 28, 29, 30], "pypi": 30, "ratio": 23, "re": 13, "recommend": 1, "recompil": 29, "recursionerror": 27, "refer": [18, 21, 22], "releas": 30, "remot": 29, "repositori": 29, "result": [21, 24], "save": 27, "seiersten": 13, "set": [21, 29], "setup": 29, "sever": 20, "should": 27, "site": 18, "softwar": 29, "solut": 29, "solver": 5, "sometim": 27, "speci": 15, "special": 18, "specif": 18, "starting_point": [5, 7], "state": [18, 21, 22], "step": 19, "step_strategi": 8, "strategi": 8, "strategy_bas": 8, "strategy_data": 8, "structur": 24, "submodul": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "subpackag": [3, 7, 10], "support": 27, "surfac": 17, "sympydiff_util": 4, "t": 20, "t0": 20, "tabl": 28, "take": 27, "tdb": [6, 13, 25], "tdb_keyword": 6, "ternari": [10, 23], "ternary_strategi": 8, "ternplot": 23, "text": 27, "thermodynam": 28, "triangular": [10, 17, 23], "tutori": 29, "type": 12, "typeerror": 27, "tzero": 12, "unit": [12, 27], "up": [21, 29], "upgrad": 1, "us": [19, 23, 27], "util": [5, 7, 10], "variabl": 3, "version": [1, 29], "viscos": 25, "vscode": 29, "websit": 29, "what": [0, 27], "when": 27, "workplac": 29, "workspac": 5, "write": 25, "xarrai": 24, "y": 13, "your": 29, "zero": 20, "zhong": 13, "zn": 13, "zpf_boundary_set": 11, "zpf_check": 7, "zpf_equilibrium": 7}})